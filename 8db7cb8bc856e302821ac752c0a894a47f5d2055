{
  "comments": [
    {
      "key": {
        "uuid": "03921cc9_d30eff5e",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-07-07T09:27:51Z",
      "side": 1,
      "message": "Shouldn\u0027t we be adding support for non-threshold sensors instead of adding static sensors implementations from sensor.yaml?",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "8db7cb8bc856e302821ac752c0a894a47f5d2055",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "fbb9cbe2_982f0d60",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 14,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-07-08T12:40:14Z",
      "side": 1,
      "message": "Do you mean that non-threshold sensors should be collected by dbus-sdr dynamically? Unfortunately, I think it might be hard to achieve that because some services providing non-threshold sensors, like phosphor-ecc, don\u0027t send the dbus signal when it creates/removes interfaces. Without the signal, dbus-sdr can\u0027t get informed of the timing to refresh the sensor tree. Is there some suggestion about this?",
      "parentUuid": "03921cc9_d30eff5e",
      "range": {
        "startLine": 9,
        "startChar": 0,
        "endLine": 14,
        "endChar": 0
      },
      "revId": "8db7cb8bc856e302821ac752c0a894a47f5d2055",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1da1447a_ebd5a449",
        "filename": "dbus-sdr/sdrutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-07-07T09:27:51Z",
      "side": 1,
      "message": "Is this suppose be like this?\n\nWon\u0027t this remove functionality if we don\u0027t want hybrid sensors?",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 104,
        "endChar": 6
      },
      "revId": "8db7cb8bc856e302821ac752c0a894a47f5d2055",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "744f9330_ef6eff68",
        "filename": "dbus-sdr/sdrutils.cpp",
        "patchSetId": 1
      },
      "lineNbr": 104,
      "author": {
        "id": 1000835
      },
      "writtenOn": "2021-07-08T12:40:14Z",
      "side": 1,
      "message": "The functionality of this try-catch won\u0027t get influenced when we disable the flag: FEATURE_HYBRID_SENSORS. For example, I tested this function with the flag disabled and kept no sensor exist on dbus. This try-catch worked well and printed the expected error message:\n    sd_bus_call: xyz.openbmc_project.Common.Error.ResourceNotFound: path or object not found",
      "parentUuid": "1da1447a_ebd5a449",
      "range": {
        "startLine": 78,
        "startChar": 0,
        "endLine": 104,
        "endChar": 6
      },
      "revId": "8db7cb8bc856e302821ac752c0a894a47f5d2055",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "d4efc430_becc55d5",
        "filename": "dbus-sdr/sensorcommands.cpp",
        "patchSetId": 1
      },
      "lineNbr": 425,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-07-07T09:27:51Z",
      "side": 1,
      "message": "rm line",
      "revId": "8db7cb8bc856e302821ac752c0a894a47f5d2055",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    }
  ]
}
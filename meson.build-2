
project(
  'phosphor-host-ipimd',
  'cpp',
  version: '0.1',
  meson_version: '>=0.57.0',
  default_options: [
    'werror=false',
    'warning_level=3',
    'cpp_std=c++17',
  ])

json_dep = dependency('nlohmann_json', required: false)
meson.get_compiler('cpp').has_header_symbol(
  'nlohmann/json.hpp',
  'nlohmann::json',
  dependencies: json_dep)

boost_compile_args = [
    '-DBOOST_ASIO_DISABLE_THREADS',
    '-DBOOST_ALL_NO_LIB',
    '-DBOOST_SYSTEM_NO_DEPRECATED',
    '-DBOOST_ERROR_CODE_HEADER_ONLY',
    '-DBOOST_COROUTINES_NO_DEPRECATION_WARNING',
]

boost_dep = declare_dependency(
    dependencies: dependency('boost', required: false),
    compile_args: boost_compile_args)

phosphor_logging_dep = dependency(
  'phosphor-logging',
  fallback: ['phosphor-logging', 'phosphor_logging_dep']
)

sys_pre = declare_dependency(
  include_directories: include_directories('.', 'include'),
  dependencies: [
    boost_dep,
    json_dep,
    dependency('libsystemd', version : '>= 221'),
    dependency('libcrypto', version: '>= 1.0.2g'),
    dependency('phosphor-dbus-interfaces',
      fallback: ['phosphor-dbus-interfaces', 'phosphor_dbus_interfaces_dep']),
    dependency('sdbusplus', fallback: ['sdbusplus', 'sdbusplus_dep']),
    dependency('phosphor-logging',
      fallback: ['phosphor-logging', 'phosphor_logging_dep'])
  ])


feature_map = {
  'boot-flag-safe-mode-support': '-DENABLE_BOOT_FLAG_SAFE_MODE_SUPPORT',
  'i2c-whitelist-check': '-DENABLE_I2C_WHITELIST_CHECK',
  'softoff': '', # Different
  'oe-sdk': '', # need input with OECORE_TARGET_SYSROOT
  'update-functional-on-fail': '-DUPDATE_FUNCTIONAL_ON_FAIL',
  'libuserlayer': '',
  'transport-oem': '',
  'ipmi-whitelist': '',
  'dynamic-sensors': '',
  'dynamic-sensors-write': '',
  'hybrid-sensors': ''
}


# if not get_option('tests').disabled()
#  subdir('test')
# endif

if get_option('dynamic-sensors')
  dbus_sdr_dep = declare_dependency(
    include_directories: include_directories('.', 'include'),
    dependencies: [
        boost_dep,
        phosphor_logging_dep
    ])

  dbus_sdr_lib = static_library(
    'dbus-sdr',
    'dbus-sdr/sdrutils.cpp',
    'dbus-sdr/sensorutils.cpp',
    implicit_include_directories: false,
    dependencies: dbus_sdr_dep)

  dbus_sdr_dep = declare_dependency(
    link_with: dbus_sdr_lib,
    dependencies: dbus_sdr_dep)

  shared_module(
    'dynamiccmds',
    [
      'dbus-sdr/sensorcommands.cpp',
      'dbus-sdr/sensorutils.cpp',
    ],
    implicit_include_directories: false,
    dependencies: [
      dbus_sdr_dep,
    ],
    install: true,
    install_dir: get_option('libdir') / 'ipmid-providers')
endif


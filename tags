!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
(0x0A, 0x3), (0x0A, 0x5), (0x0A, 0x7)	scripts/entity-example.md	/^# (0x0A, 0x3), (0x0A, 0x5), (0x0A, 0x7)$/;"	c
(0x0F, 0x3), (0x10, 0x5)	scripts/entity-example.md	/^# (0x0F, 0x3), (0x10, 0x5)$/;"	c
(0x1D, 0x4), (0x1D, 0x6), (0x2B, 0x1), (0x2B, 0x3), (0x0F, 0x1),	scripts/entity-example.md	/^# (0x1D, 0x4), (0x1D, 0x6), (0x2B, 0x1), (0x2B, 0x3), (0x0F, 0x1),$/;"	c
(0x20, 0x2), (0x20, 0x3), (0x20, 0x6), (0x20, 0x7), (0x20, 0x8),	scripts/entity-example.md	/^# (0x20, 0x2), (0x20, 0x3), (0x20, 0x6), (0x20, 0x7), (0x20, 0x8),$/;"	c
(0x20, 0x2), (0x20, 0x3), (0x20, 0x7), (0x20, 0x8), (0x20, 0x9)	scripts/entity-example.md	/^# (0x20, 0x2), (0x20, 0x3), (0x20, 0x7), (0x20, 0x8), (0x20, 0x9)$/;"	c
(0x20, 0xA), (0x20, 0xB), (0x20, 0xD), (0x20, 0xE), (0x20, 0xF)	scripts/entity-example.md	/^# (0x20, 0xA), (0x20, 0xB), (0x20, 0xD), (0x20, 0xE), (0x20, 0xF)$/;"	c
0x00	host-ipmid-whitelist.conf	/^0x00:0x00    \/\/<Chassis>:<Chassis Capabiliti>$/;"	k
0x00	host-ipmid-whitelist.conf	/^0x00:0x01    \/\/<Chassis>:<Get Chassis Status>$/;"	k
0x00	host-ipmid-whitelist.conf	/^0x00:0x02    \/\/<Chassis>:<Chassis Control>$/;"	k
0x00	host-ipmid-whitelist.conf	/^0x00:0x05    \/\/<Chassis>:<Set Chassis Capabilities>$/;"	k
0x00	host-ipmid-whitelist.conf	/^0x00:0x06    \/\/<Chassis>:<Set Power Restore Policy>$/;"	k
0x00	host-ipmid-whitelist.conf	/^0x00:0x08    \/\/<Chassis>:<Set System Boot Options>$/;"	k
0x00	host-ipmid-whitelist.conf	/^0x00:0x09    \/\/<Chassis>:<Get System Boot Options>$/;"	k
0x00	host-ipmid-whitelist.conf	/^0x00:0x0F    \/\/<Chassis>:<Get POH Counter Command>$/;"	k
0x04	host-ipmid-whitelist.conf	/^0x04:0x02    \/\/<Sensor\/Event>:<Platform event>$/;"	k
0x04	host-ipmid-whitelist.conf	/^0x04:0x2D    \/\/<Sensor\/Event>:<Get Sensor Reading>$/;"	k
0x04	host-ipmid-whitelist.conf	/^0x04:0x2F    \/\/<Sensor\/Event>:<Get Sensor Type>$/;"	k
0x04	host-ipmid-whitelist.conf	/^0x04:0x30    \/\/<Sensor\/Event>:<Set Sensor Reading and Event Status>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x01    \/\/<App>:<Get Device ID>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x04    \/\/<App>:<Get Self Test Results>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x06    \/\/<App>:<Set ACPI Power State>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x07    \/\/<App>:<Get ACPI Power State>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x08    \/\/<App>:<Get Device GUID>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x22    \/\/<App>:<Reset Watchdog Timer>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x24    \/\/<App>:<Set Watchdog Timer>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x25    \/\/<App>:<Get Watchdog Timer>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x2E    \/\/<App>:<Set BMC Global Enables>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x2F    \/\/<App>:<Get BMC Global Enables>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x31    \/\/<App>:<Get Message Flags>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x35    \/\/<App>:<Read Event Message Buffer>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x36    \/\/<App>:<Get BT Interface Capabilities>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x37    \/\/<App>:<Get System GUID>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x42    \/\/<App>:<Get Channel Info Command>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x4D    \/\/<App>:<Get User Payload Access>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x4E    \/\/<App>:<Get Channel Payload Support>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x4F    \/\/<App>:<Get Channel Payload Version>$/;"	k
0x06	host-ipmid-whitelist.conf	/^0x06:0x54    \/\/<App>:<Get Channel Cipher Suites>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x10    \/\/<Storage>:<Get FRU Inventory Area Info>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x11    \/\/<Storage>:<Read FRU Data>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x20    \/\/<Storage>:<Get SDR Repository Info>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x22    \/\/<Storage>:<Reserve SDR Repository>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x23    \/\/<Storage>:<Get SDR>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x40    \/\/<Storage>:<Get SEL Info>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x42    \/\/<Storage>:<Reserve SEL>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x44    \/\/<Storage>:<Add SEL Entry>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x48    \/\/<Storage>:<Get SEL Time>$/;"	k
0x0A	host-ipmid-whitelist.conf	/^0x0A:0x49    \/\/<Storage>:<Set SEL Time>$/;"	k
0x0C	host-ipmid-whitelist.conf	/^0x0C:0x02    \/\/<Transport>:<Get LAN Configuration Parameters>$/;"	k
0x2C	host-ipmid-whitelist.conf	/^0x2C:0x00    \/\/<Group Extension>:<Group Extension Command>$/;"	k
0x2C	host-ipmid-whitelist.conf	/^0x2C:0x01    \/\/<Group Extension>:<Get DCMI Capabilities>$/;"	k
0x2C	host-ipmid-whitelist.conf	/^0x2C:0x02    \/\/<Group Extension>:<Get Power Reading>$/;"	k
0x2C	host-ipmid-whitelist.conf	/^0x2C:0x03    \/\/<Group Extension>:<Get Power Limit>$/;"	k
0x2C	host-ipmid-whitelist.conf	/^0x2C:0x06    \/\/<Group Extension>:<Get Asset Tag>$/;"	k
0x2C	host-ipmid-whitelist.conf	/^0x2C:0x07    \/\/<Group Extension>:<Get Sensor Info>$/;"	k
0x2C	host-ipmid-whitelist.conf	/^0x2C:0x10    \/\/<Group Extension>:<Get Temperature Readings>$/;"	k
ACTIVATE_POWER_LIMIT	dcmihandler.cpp	/^constexpr auto ACTIVATE_POWER_LIMIT = 0x01;$/;"	v	typeref:typename:auto
ADDRESS	elog-errors.hpp	/^    explicit constexpr ADDRESS(uint32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::org::open_power::Host::Access::_ReadCFAM::ADDRESS
ADDRESS	elog-errors.hpp	/^    explicit constexpr ADDRESS(uint32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::org::open_power::Host::Access::_WriteCFAM::ADDRESS
ADDRESS	elog-errors.hpp	/^    using ADDRESS = _ReadCFAM::ADDRESS;$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::ReadCFAM	typeref:typename:_ReadCFAM::ADDRESS
ADDRESS	elog-errors.hpp	/^    using ADDRESS = _WriteCFAM::ADDRESS;$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::WriteCFAM	typeref:typename:_WriteCFAM::ADDRESS
ADDRESS	elog-errors.hpp	/^struct ADDRESS$/;"	s	namespace:phosphor::logging::org::open_power::Host::Access::_ReadCFAM
ADDRESS	elog-errors.hpp	/^struct ADDRESS$/;"	s	namespace:phosphor::logging::org::open_power::Host::Access::_WriteCFAM
ALLOW_DEPRECATED_API	include/ipmid/api.hpp	/^#define ALLOW_DEPRECATED_API /;"	d
AM_CFLAGS	test/Makefile.am	/^AM_CFLAGS = $(CODE_COVERAGE_CFLAGS)$/;"	m
AM_CPPFLAGS	Makefile.am	/^AM_CPPFLAGS = -I$(abs_srcdir) -I$(abs_srcdir)\/include$/;"	m
AM_CPPFLAGS	test/Makefile.am	/^AM_CPPFLAGS = \\$/;"	m
AM_CXXFLAGS	test/Makefile.am	/^AM_CXXFLAGS = $(GTEST_MAIN_CFLAGS) $(GTEST_CFLAGS)$/;"	m
AM_DEFAULT_SOURCE_EXT	Makefile.am	/^AM_DEFAULT_SOURCE_EXT = .cpp$/;"	m
AM_DEFAULT_SOURCE_EXT	softoff/Makefile.am	/^AM_DEFAULT_SOURCE_EXT = .cpp$/;"	m
AM_LDFLAGS	test/Makefile.am	/^AM_LDFLAGS = $(GTEST_MAIN_LIBS) $(OESDK_TESTCASE_FLAGS)$/;"	m
APPLY_POWER_LIMIT	dcmihandler.hpp	/^    APPLY_POWER_LIMIT = 0x05,$/;"	e	enum:dcmi::Commands
ARGUMENT_NAME	elog-errors.hpp	/^    explicit constexpr ARGUMENT_NAME(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_NAME
ARGUMENT_NAME	elog-errors.hpp	/^    using ARGUMENT_NAME = _InvalidArgument::ARGUMENT_NAME;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::InvalidArgument	typeref:typename:_InvalidArgument::ARGUMENT_NAME
ARGUMENT_NAME	elog-errors.hpp	/^struct ARGUMENT_NAME$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument
ARGUMENT_VALUE	elog-errors.hpp	/^    explicit constexpr ARGUMENT_VALUE(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_VALUE
ARGUMENT_VALUE	elog-errors.hpp	/^    using ARGUMENT_VALUE = _InvalidArgument::ARGUMENT_VALUE;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::InvalidArgument	typeref:typename:_InvalidArgument::ARGUMENT_VALUE
ARGUMENT_VALUE	elog-errors.hpp	/^struct ARGUMENT_VALUE$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument
ASSERT	include/ipmid/types.hpp	/^    ASSERT,   \/\/ Skip on Assert$/;"	e	enum:ipmi::sensor::SkipAssertion
ASSERTINDEX	ipmisensor.cpp	/^#define ASSERTINDEX /;"	d	file:
Access	elog-errors.hpp	/^namespace Access$/;"	n	namespace:phosphor::logging::org::open_power::Host
Access	elog-errors.hpp	/^namespace Access$/;"	n	namespace:sdbusplus::org::open_power::Host
AccessMode	storagehandler.cpp	/^enum class AccessMode$/;"	g	file:
AccessSetFlag	user_channel/channel_layer.hpp	/^enum AccessSetFlag$/;"	g	namespace:ipmi
Action	app/watchdog_service.hpp	/^    using Action =$/;"	t	class:WatchdogService	typeref:typename:sdbusplus::xyz::openbmc_project::State::server::Watchdog::Action
ActivateDHCP	dcmihandler.hpp	/^    ActivateDHCP = 1,$/;"	e	enum:dcmi::DCMIConfigParameters
ActivateRouter	test/oemrouter_unittest.cpp	/^void ActivateRouter()$/;"	f	namespace:oem::__anonba15ac260110	typeref:typename:void
Activation	apphandler.cpp	/^using Activation =$/;"	t	typeref:typename:sdbusplus::xyz::openbmc_project::Software::server::Activation	file:
Active	transporthandler.hpp	/^    Active = 0,$/;"	e	enum:ipmi::transport::IPv6AddressStatus
Add `phosphor-host-ipmid`	docs/testing.md	/^### Add `phosphor-host-ipmid`$/;"	S
AdditionalData	selutility.hpp	/^using AdditionalData = std::vector<std::string>;$/;"	t	namespace:ipmi::sel	typeref:typename:std::vector<std::string>
AddrFamily	transporthandler.hpp	/^struct AddrFamily$/;"	s	namespace:ipmi::transport
AddrFamily	transporthandler.hpp	/^struct AddrFamily<AF_INET6>$/;"	s	namespace:ipmi::transport
AddrFamily	transporthandler.hpp	/^struct AddrFamily<AF_INET>$/;"	s	namespace:ipmi::transport
Admin	include/ipmid/api-types.hpp	/^    Admin,$/;"	e	enum:ipmi::Privilege
Allowed step property combinations	docs/oem-extension-numbering.md	/^##### Allowed step property combinations$/;"	T
Argument	apphandler.cpp	/^    using Argument = xyz::openbmc_project::Common::InvalidArgument;$/;"	t	function:rfc4122ToIpmi	typeref:typename:xyz::openbmc_project::Common::InvalidArgument	file:
Assertion	sensordatahandler.hpp	/^using Assertion = uint16_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:uint16_t
AssertionSet	sensordatahandler.hpp	/^using AssertionSet = std::pair<Assertion, Deassertion>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::pair<Assertion,Deassertion>
Association	include/ipmid/types.hpp	/^using Association = std::tuple<std::string, std::string, std::string>;$/;"	t	namespace:ipmi	typeref:typename:std::tuple<std::string,std::string,std::string>
AssociationList	selutility.cpp	/^    using AssociationList =$/;"	t	function:ipmi::sel::convertLogEntrytoSEL	typeref:typename:std::vector<std::tuple<std::string,std::string,std::string>>	file:
AuthEnables	transporthandler.hpp	/^    AuthEnables = 2,$/;"	e	enum:ipmi::transport::LanParam
AuthSupport	transporthandler.hpp	/^    AuthSupport = 1,$/;"	e	enum:ipmi::transport::LanParam
AutoTestSimple	elog-errors.hpp	/^struct AutoTestSimple : public sdbusplus::exception_t$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog
BAR_DATA	elog-errors.hpp	/^    explicit constexpr BAR_DATA(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::_Bar::BAR_DATA
BAR_DATA	elog-errors.hpp	/^    using BAR_DATA = _Bar::BAR_DATA;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:_Bar::BAR_DATA
BAR_DATA	elog-errors.hpp	/^struct BAR_DATA$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Bar::_Bar
BIOS	transporthandler.hpp	/^    BIOS = 3,$/;"	e	enum:ipmi::transport::IPSrc
BIOSFRB2	app/watchdog.cpp	/^    BIOSFRB2 = 0x1,$/;"	e	enum:IpmiTimerUse	file:
BIOSPOST	app/watchdog.cpp	/^    BIOSPOST = 0x2,$/;"	e	enum:IpmiTimerUse	file:
BMC	apphandler.cpp	/^using BMC = sdbusplus::xyz::openbmc_project::State::server::BMC;$/;"	t	typeref:typename:sdbusplus::xyz::openbmc_project::State::server::BMC	file:
BMC	globalhandler.cpp	/^using BMC = sdbusplus::xyz::openbmc_project::State::server::BMC;$/;"	t	typeref:typename:sdbusplus::xyz::openbmc_project::State::server::BMC	file:
BMC	transporthandler.hpp	/^    BMC = 4,$/;"	e	enum:ipmi::transport::IPSrc
BMCSlaveAddress	sensorhandler.cpp	/^static constexpr uint8_t BMCSlaveAddress = 0x20;$/;"	v	typeref:typename:uint8_t	file:
BMC_TIME_PATH	storagehandler.cpp	/^constexpr auto BMC_TIME_PATH = "\/xyz\/openbmc_project\/time\/bmc";$/;"	v	namespace:__anon0af2b4490110	typeref:typename:auto
BOARD_SENSOR	configure.ac	/^AC_DEFINE(BOARD_SENSOR, "\/xyz\/openbmc_project\/inventory\/system\/chassis\/motherboard", [The /;"	d
BUILT_SOURCES	Makefile.am	/^BUILT_SOURCES = \\$/;"	m
BUILT_SOURCES	softoff/Makefile.am	/^BUILT_SOURCES = \\$/;"	m
Bar	elog-errors.hpp	/^namespace Bar$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example
Bar	elog-errors.hpp	/^struct Bar : public sdbusplus::exception_t$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Bar
Best Practices	docs/testing.md	/^## Best Practices$/;"	s
BootOptionParameter	chassishandler.hpp	/^enum class BootOptionParameter : size_t$/;"	g	typeref:typename:size_t
BootOptionResponseSize	chassishandler.hpp	/^enum class BootOptionResponseSize : size_t$/;"	g	typeref:typename:size_t
Build/add sensorhandler_unittest to test suite	docs/testing.md	/^# Build\/add sensorhandler_unittest to test suite$/;"	c
Building and Running	docs/testing.md	/^## Building and Running$/;"	s
CALLOUT_DEVICE_PATH	elog-errors.hpp	/^    explicit constexpr CALLOUT_DEVICE_PATH(const char* a) :$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_DEVICE_PATH
CALLOUT_DEVICE_PATH	elog-errors.hpp	/^    using CALLOUT_DEVICE_PATH = _Device::CALLOUT_DEVICE_PATH;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::Device	typeref:typename:_Device::CALLOUT_DEVICE_PATH
CALLOUT_DEVICE_PATH	elog-errors.hpp	/^    using CALLOUT_DEVICE_PATH =$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::ReadCFAM	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_DEVICE_PATH
CALLOUT_DEVICE_PATH	elog-errors.hpp	/^    using CALLOUT_DEVICE_PATH =$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::WriteCFAM	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_DEVICE_PATH
CALLOUT_DEVICE_PATH	elog-errors.hpp	/^    using CALLOUT_DEVICE_PATH =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::GPIO	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_DEVICE_PATH
CALLOUT_DEVICE_PATH	elog-errors.hpp	/^    using CALLOUT_DEVICE_PATH =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::IIC	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_DEVICE_PATH
CALLOUT_DEVICE_PATH	elog-errors.hpp	/^    using CALLOUT_DEVICE_PATH =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Control::Device::WriteFailure	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_DEVICE_PATH
CALLOUT_DEVICE_PATH	elog-errors.hpp	/^    using CALLOUT_DEVICE_PATH =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Sensor::Device::ReadFailure	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_DEVICE_PATH
CALLOUT_DEVICE_PATH	elog-errors.hpp	/^struct CALLOUT_DEVICE_PATH$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device
CALLOUT_DEVICE_PATH_TEST	elog-errors.hpp	/^    explicit constexpr CALLOUT_DEVICE_PATH_TEST(const char* a) :$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_DEVICE_PATH_TEST
CALLOUT_DEVICE_PATH_TEST	elog-errors.hpp	/^    using CALLOUT_DEVICE_PATH_TEST = _Callout::CALLOUT_DEVICE_PATH_TEST;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::Callout	typeref:typename:_Callout::CALLOUT_DEVICE_PATH_TEST
CALLOUT_DEVICE_PATH_TEST	elog-errors.hpp	/^    using CALLOUT_DEVICE_PATH_TEST = example::xyz::openbmc_project::Example::$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:example::xyz::openbmc_project::Example::Device::Callout::CALLOUT_DEVICE_PATH_TEST
CALLOUT_DEVICE_PATH_TEST	elog-errors.hpp	/^struct CALLOUT_DEVICE_PATH_TEST$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout
CALLOUT_ERRNO	elog-errors.hpp	/^    explicit constexpr CALLOUT_ERRNO(int32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_ERRNO
CALLOUT_ERRNO	elog-errors.hpp	/^    using CALLOUT_ERRNO = _Device::CALLOUT_ERRNO;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::Device	typeref:typename:_Device::CALLOUT_ERRNO
CALLOUT_ERRNO	elog-errors.hpp	/^    using CALLOUT_ERRNO =$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::ReadCFAM	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_ERRNO
CALLOUT_ERRNO	elog-errors.hpp	/^    using CALLOUT_ERRNO =$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::WriteCFAM	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_ERRNO
CALLOUT_ERRNO	elog-errors.hpp	/^    using CALLOUT_ERRNO =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::GPIO	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_ERRNO
CALLOUT_ERRNO	elog-errors.hpp	/^    using CALLOUT_ERRNO =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::IIC	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_ERRNO
CALLOUT_ERRNO	elog-errors.hpp	/^    using CALLOUT_ERRNO =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Control::Device::WriteFailure	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_ERRNO
CALLOUT_ERRNO	elog-errors.hpp	/^    using CALLOUT_ERRNO =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Sensor::Device::ReadFailure	typeref:typename:xyz::openbmc_project::Common::Callout::Device::CALLOUT_ERRNO
CALLOUT_ERRNO	elog-errors.hpp	/^struct CALLOUT_ERRNO$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device
CALLOUT_ERRNO_TEST	elog-errors.hpp	/^    explicit constexpr CALLOUT_ERRNO_TEST(int32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_ERRNO_TEST
CALLOUT_ERRNO_TEST	elog-errors.hpp	/^    using CALLOUT_ERRNO_TEST = _Callout::CALLOUT_ERRNO_TEST;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::Callout	typeref:typename:_Callout::CALLOUT_ERRNO_TEST
CALLOUT_ERRNO_TEST	elog-errors.hpp	/^    using CALLOUT_ERRNO_TEST = example::xyz::openbmc_project::Example::Device::$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:example::xyz::openbmc_project::Example::Device::Callout::CALLOUT_ERRNO_TEST
CALLOUT_ERRNO_TEST	elog-errors.hpp	/^struct CALLOUT_ERRNO_TEST$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout
CALLOUT_FWD_ASSOCIATION	configure.ac	/^AC_DEFINE(CALLOUT_FWD_ASSOCIATION, "callout", [The name of the callout's forward association.])$/;"	d
CALLOUT_GPIO_NUM	elog-errors.hpp	/^    explicit constexpr CALLOUT_GPIO_NUM(uint32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_GPIO::CALLOUT_GPIO_NUM
CALLOUT_GPIO_NUM	elog-errors.hpp	/^    using CALLOUT_GPIO_NUM = _GPIO::CALLOUT_GPIO_NUM;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::GPIO	typeref:typename:_GPIO::CALLOUT_GPIO_NUM
CALLOUT_GPIO_NUM	elog-errors.hpp	/^struct CALLOUT_GPIO_NUM$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout::_GPIO
CALLOUT_IIC_ADDR	elog-errors.hpp	/^    explicit constexpr CALLOUT_IIC_ADDR(uint16_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_ADDR
CALLOUT_IIC_ADDR	elog-errors.hpp	/^    using CALLOUT_IIC_ADDR = _IIC::CALLOUT_IIC_ADDR;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::IIC	typeref:typename:_IIC::CALLOUT_IIC_ADDR
CALLOUT_IIC_ADDR	elog-errors.hpp	/^struct CALLOUT_IIC_ADDR$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC
CALLOUT_IIC_BUS	elog-errors.hpp	/^    explicit constexpr CALLOUT_IIC_BUS(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_BUS
CALLOUT_IIC_BUS	elog-errors.hpp	/^    using CALLOUT_IIC_BUS = _IIC::CALLOUT_IIC_BUS;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::IIC	typeref:typename:_IIC::CALLOUT_IIC_BUS
CALLOUT_IIC_BUS	elog-errors.hpp	/^struct CALLOUT_IIC_BUS$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC
CALLOUT_INVENTORY_PATH	elog-errors.hpp	/^    explicit constexpr CALLOUT_INVENTORY_PATH(const char* a) :$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Inventory::CALLOUT_INVENTORY_PATH
CALLOUT_INVENTORY_PATH	elog-errors.hpp	/^    using CALLOUT_INVENTORY_PATH = _Inventory::CALLOUT_INVENTORY_PATH;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::Inventory	typeref:typename:_Inventory::CALLOUT_INVENTORY_PATH
CALLOUT_INVENTORY_PATH	elog-errors.hpp	/^    using CALLOUT_INVENTORY_PATH = xyz::openbmc_project::Common::Callout::$/;"	t	struct:phosphor::logging::org::open_power::Host::Event	typeref:typename:xyz::openbmc_project::Common::Callout::Inventory::CALLOUT_INVENTORY_PATH
CALLOUT_INVENTORY_PATH	elog-errors.hpp	/^struct CALLOUT_INVENTORY_PATH$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout::_Inventory
CALLOUT_IPMI_SENSOR_NUM	elog-errors.hpp	/^    explicit constexpr CALLOUT_IPMI_SENSOR_NUM(uint32_t a) :$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IPMISensor::CALLOUT_IPMI_SENSOR_NUM
CALLOUT_IPMI_SENSOR_NUM	elog-errors.hpp	/^    using CALLOUT_IPMI_SENSOR_NUM = _IPMISensor::CALLOUT_IPMI_SENSOR_NUM;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::IPMISensor	typeref:typename:_IPMISensor::CALLOUT_IPMI_SENSOR_NUM
CALLOUT_IPMI_SENSOR_NUM	elog-errors.hpp	/^struct CALLOUT_IPMI_SENSOR_NUM$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout::_IPMISensor
CLEANFILES	Makefile.am	/^CLEANFILES = $(BUILT_SOURCES)$/;"	m
CLEANFILES	softoff/Makefile.am	/^CLEANFILES = \\$/;"	m
CMD_HARD_RESET	chassishandler.hpp	/^    CMD_HARD_RESET = 0x03,$/;"	e	enum:ipmi_chassis_control_cmds
CMD_HEARTBEAT	systemintfcmds.hpp	/^#define CMD_HEARTBEAT /;"	d
CMD_POWER	systemintfcmds.hpp	/^#define CMD_POWER /;"	d
CMD_POWER_CYCLE	chassishandler.hpp	/^    CMD_POWER_CYCLE = 0x02,$/;"	e	enum:ipmi_chassis_control_cmds
CMD_POWER_OFF	chassishandler.hpp	/^    CMD_POWER_OFF = 0x00,$/;"	e	enum:ipmi_chassis_control_cmds
CMD_POWER_ON	chassishandler.hpp	/^    CMD_POWER_ON = 0x01,$/;"	e	enum:ipmi_chassis_control_cmds
CMD_PULSE_DIAGNOSTIC_INTR	chassishandler.hpp	/^    CMD_PULSE_DIAGNOSTIC_INTR = 0x04,$/;"	e	enum:ipmi_chassis_control_cmds
CMD_SOFT_OFF_VIA_OVER_TEMP	chassishandler.hpp	/^    CMD_SOFT_OFF_VIA_OVER_TEMP = 0x05,$/;"	e	enum:ipmi_chassis_control_cmds
COMMON_CXX	Makefile.am	/^COMMON_CXX = \\$/;"	m
COMMON_CXX	libipmid/Makefile.am	/^COMMON_CXX = \\$/;"	m
COMMON_CXX	test/Makefile.am	/^COMMON_CXX = \\$/;"	m
COMMON_CXX	user_channel/Makefile.am	/^COMMON_CXX = \\$/;"	m
CONTROL_HOST_BUSNAME	configure.ac	/^AC_DEFINE_UNQUOTED([CONTROL_HOST_BUSNAME], ["$CONTROL_HOST_BUSNAME"], [The Control Host Dbus bus/;"	d
CONTROL_HOST_OBJ_MGR	configure.ac	/^AC_DEFINE_UNQUOTED([CONTROL_HOST_OBJ_MGR], ["$CONTROL_HOST_OBJ_MGR"], [The Control Host D-Bus Ob/;"	d
CPPFLAGS	configure.ac	/^    AC_SUBST([CPPFLAGS], [$cpp_flags]),$/;"	s
CRITICAL_HIGH_MASK	include/ipmid/types.hpp	/^    CRITICAL_HIGH_MASK = 0x10,$/;"	e	enum:ipmi::sensor::ThresholdMask
CRITICAL_LOW_MASK	include/ipmid/types.hpp	/^    CRITICAL_LOW_MASK = 0x02,$/;"	e	enum:ipmi::sensor::ThresholdMask
CallBack	include/ipmid-host/cmd-utils.hpp	/^using CallBack = std::function<void(IpmiCmdData, bool)>;$/;"	t	namespace:phosphor::host::command
Callback	include/ipmid/api-types.hpp	/^    Callback,$/;"	e	enum:ipmi::Privilege
CallbackSig	include/ipmid/handler.hpp	/^        using CallbackSig = boost::callable_traits::args_t<Handler>;$/;"	t	function:ipmi::IpmiHandler::executeCallback	typeref:typename:boost::callable_traits::args_t<Handler>
Callout	elog-errors.hpp	/^namespace Callout$/;"	n	namespace:phosphor::logging::org::open_power::Common
Callout	elog-errors.hpp	/^namespace Callout$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common
Callout	elog-errors.hpp	/^namespace Callout$/;"	n	namespace:sdbusplus::org::open_power::Common
Callout	elog-errors.hpp	/^namespace Callout$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Common
Callout	elog-errors.hpp	/^struct Callout : public sdbusplus::exception_t$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Device
Cc	include/ipmid/api-types.hpp	/^using Cc = uint8_t;$/;"	t	namespace:ipmi	typeref:typename:uint8_t
ChannelAccess	user_channel/channel_layer.hpp	/^struct ChannelAccess$/;"	s	namespace:ipmi
ChannelAccessData	user_channel/channel_mgmt.hpp	/^struct ChannelAccessData$/;"	s	namespace:ipmi
ChannelConfig	user_channel/channel_mgmt.cpp	/^ChannelConfig::ChannelConfig() : bus(ipmid_get_sd_bus_connection())$/;"	f	class:ipmi::ChannelConfig
ChannelConfig	user_channel/channel_mgmt.hpp	/^class ChannelConfig$/;"	c	namespace:ipmi
ChannelInfo	user_channel/channel_layer.hpp	/^struct ChannelInfo$/;"	s	namespace:ipmi
ChannelNumCipherIDPair	user_channel/cipher_mgmt.hpp	/^using ChannelNumCipherIDPair = std::pair<uint8_t, uint8_t>;$/;"	t	namespace:ipmi	typeref:typename:std::pair<uint8_t,uint8_t>
ChannelParams	transporthandler.hpp	/^struct ChannelParams$/;"	s	namespace:ipmi::transport
ChannelProperties	user_channel/channel_mgmt.hpp	/^struct ChannelProperties$/;"	s	namespace:ipmi
ChassisIDState	chassishandler.hpp	/^enum class ChassisIDState : uint8_t$/;"	g	typeref:typename:uint8_t
Checkstop	elog-errors.hpp	/^struct Checkstop$/;"	s	namespace:phosphor::logging::org::open_power::Host
CipherConfig	user_channel/cipher_mgmt.cpp	/^CipherConfig::CipherConfig(const std::string& csFileName,$/;"	f	class:ipmi::CipherConfig
CipherConfig	user_channel/cipher_mgmt.hpp	/^class CipherConfig$/;"	c	namespace:ipmi
CiphersuiteEntries	transporthandler.hpp	/^    CiphersuiteEntries = 23,$/;"	e	enum:ipmi::transport::LanParam
CiphersuiteSupport	transporthandler.hpp	/^    CiphersuiteSupport = 22,$/;"	e	enum:ipmi::transport::LanParam
Cmd	include/ipmid/api-types.hpp	/^using Cmd = uint8_t;$/;"	t	namespace:ipmi	typeref:typename:uint8_t
Cmd	include/ipmid/oemopenbmc.hpp	/^enum Cmd$/;"	g	namespace:oem
CmpStr	dbus-sdr/sensorcommands.cpp	/^struct CmpStr$/;"	s	namespace:ipmi	file:
CmpStr	include/dbus-sdr/sdrutils.hpp	/^struct CmpStr$/;"	s
CmpStrVersion	include/dbus-sdr/sdrutils.hpp	/^struct CmpStrVersion$/;"	s
Code of Conduct	docs/contributing.md	/^## Code of Conduct$/;"	s
CommandHandler	include/ipmid-host/cmd-utils.hpp	/^using CommandHandler = std::tuple<IpmiCmdData, CallBack>;$/;"	t	namespace:phosphor::host::command	typeref:typename:std::tuple<IpmiCmdData,CallBack>
CommandHandler	ipmid-new.cpp	/^using CommandHandler = phosphor::host::command::CommandHandler;$/;"	t	typeref:typename:phosphor::host::command::CommandHandler	file:
CommandNotSupported	elog-errors.hpp	/^struct CommandNotSupported$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Control::Host
CommandPrivilege	include/ipmid/api.h	/^enum CommandPrivilege$/;"	g
Commands	dcmihandler.hpp	/^enum Commands$/;"	g	namespace:dcmi
Commit	transporthandler.hpp	/^    Commit = 2,$/;"	e	enum:ipmi::transport::SetStatus
Common	elog-errors.hpp	/^namespace Common$/;"	n	namespace:phosphor::logging::org::open_power
Common	elog-errors.hpp	/^namespace Common$/;"	n	namespace:phosphor::logging::xyz::openbmc_project
Common	elog-errors.hpp	/^namespace Common$/;"	n	namespace:sdbusplus::org::open_power
Common	elog-errors.hpp	/^namespace Common$/;"	n	namespace:sdbusplus::xyz::openbmc_project
Complete	transporthandler.hpp	/^    Complete = 0,$/;"	e	enum:ipmi::transport::SetStatus
Contained Entity Id and Contained Entity Instance = (0x0A, 0x1),	scripts/entity-example.md	/^# Contained Entity Id and Contained Entity Instance = (0x0A, 0x1),$/;"	c
Contained Entity Id and Contained Entity Instance = (0x1D, 0x1),	scripts/entity-example.md	/^# Contained Entity Id and Contained Entity Instance = (0x1D, 0x1),$/;"	c
Contained Entity Id and Contained Entity Instance = (0x20, 0x1),	scripts/entity-example.md	/^# Contained Entity Id and Contained Entity Instance = (0x20, 0x1),$/;"	c
ContainedEntitiesArray	include/ipmid/types.hpp	/^using ContainedEntitiesArray =$/;"	t	namespace:ipmi::sensor	typeref:typename:std::array<std::pair<uint8_t,uint8_t>,maxContainedEntities>
Container Entity Id and Container Entity Instance = (0x13, 0x81)	scripts/entity-example.md	/^# Container Entity Id and Container Entity Instance = (0x13, 0x81)$/;"	c
Container Entity Id and Container Entity Instance = (0x18, 0x2)	scripts/entity-example.md	/^# Container Entity Id and Container Entity Instance = (0x18, 0x2)$/;"	c
Container Entity Id and Container Entity Instance = (0x1E, 0x1)	scripts/entity-example.md	/^# Container Entity Id and Container Entity Instance = (0x1E, 0x1)$/;"	c
Container Entity Id and Container Entity Instance = (0x1E, 0x3)	scripts/entity-example.md	/^# Container Entity Id and Container Entity Instance = (0x1E, 0x3)$/;"	c
Context	include/ipmid/message.hpp	/^    Context(std::shared_ptr<sdbusplus::asio::connection> bus, NetFn netFn,$/;"	f	struct:ipmi::Context
Context	include/ipmid/message.hpp	/^struct Context$/;"	s	namespace:ipmi
Contributing Guidelines	docs/contributing.md	/^# Contributing Guidelines$/;"	c
Control	elog-errors.hpp	/^namespace Control$/;"	n	namespace:phosphor::logging::xyz::openbmc_project
Control	elog-errors.hpp	/^namespace Control$/;"	n	namespace:sdbusplus::xyz::openbmc_project
Create	elog-errors.hpp	/^namespace Create$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Dump
Create	elog-errors.hpp	/^namespace Create$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Dump
Credits	docs/testing.md	/^# Credits$/;"	c
DBUS_PROPERTIES	storagehandler.cpp	/^constexpr auto DBUS_PROPERTIES = "org.freedesktop.DBus.Properties";$/;"	v	namespace:__anon0af2b4490110	typeref:typename:auto
DCMICap	dcmihandler.hpp	/^struct DCMICap$/;"	s	namespace:dcmi
DCMICapEntry	dcmihandler.hpp	/^struct DCMICapEntry$/;"	s	namespace:dcmi
DCMICapList	dcmihandler.hpp	/^using DCMICapList = std::vector<DCMICap>;$/;"	t	namespace:dcmi	typeref:typename:std::vector<DCMICap>
DCMICapParameters	dcmihandler.hpp	/^enum class DCMICapParameters$/;"	g	namespace:dcmi
DCMICaps	dcmihandler.hpp	/^using DCMICaps = std::map<DCMICapParameters, DCMICapEntry>;$/;"	t	namespace:dcmi	typeref:typename:std::map<DCMICapParameters,DCMICapEntry>
DCMIConfigParameters	dcmihandler.hpp	/^enum class DCMIConfigParameters : uint8_t$/;"	g	namespace:dcmi	typeref:typename:uint8_t
DCMI_ACTIVATE_DHCP_MASK	dcmihandler.cpp	/^constexpr auto DCMI_ACTIVATE_DHCP_MASK = 0x01;$/;"	v	typeref:typename:auto
DCMI_ACTIVATE_DHCP_REPLY	dcmihandler.cpp	/^constexpr auto DCMI_ACTIVATE_DHCP_REPLY = 0x00;$/;"	v	typeref:typename:auto
DCMI_CONFIG_PARAMETER_REVISION	dcmihandler.cpp	/^constexpr auto DCMI_CONFIG_PARAMETER_REVISION = 1;$/;"	v	typeref:typename:auto
DCMI_OPTION_12_MASK	dcmihandler.cpp	/^constexpr auto DCMI_OPTION_12_MASK = 0x01;$/;"	v	typeref:typename:auto
DCMI_OPTION_60_43_MASK	dcmihandler.cpp	/^constexpr auto DCMI_OPTION_60_43_MASK = 0x02;$/;"	v	typeref:typename:auto
DCMI_PARAMETER_REVISION	dcmihandler.cpp	/^constexpr auto DCMI_PARAMETER_REVISION = 2;$/;"	v	typeref:typename:auto
DCMI_RAND_BACK_OFF_MASK	dcmihandler.cpp	/^constexpr auto DCMI_RAND_BACK_OFF_MASK = 0x80;$/;"	v	typeref:typename:auto
DCMI_SET_CONF_PARAM_REQ_PACKET_MAX_SIZE	dcmihandler.cpp	/^constexpr auto DCMI_SET_CONF_PARAM_REQ_PACKET_MAX_SIZE = 0x04;$/;"	v	typeref:typename:auto
DCMI_SET_CONF_PARAM_REQ_PACKET_MIN_SIZE	dcmihandler.cpp	/^constexpr auto DCMI_SET_CONF_PARAM_REQ_PACKET_MIN_SIZE = 0x03;$/;"	v	typeref:typename:auto
DCMI_SPEC_MAJOR_VERSION	dcmihandler.cpp	/^constexpr auto DCMI_SPEC_MAJOR_VERSION = 1;$/;"	v	typeref:typename:auto
DCMI_SPEC_MINOR_VERSION	dcmihandler.cpp	/^constexpr auto DCMI_SPEC_MINOR_VERSION = 5;$/;"	v	typeref:typename:auto
DEACTIVATE_POWER_LIMIT	dcmihandler.cpp	/^constexpr auto DEACTIVATE_POWER_LIMIT = 0x00;$/;"	v	typeref:typename:auto
DEASSERT	include/ipmid/types.hpp	/^    DEASSERT, \/\/ Skip on Deassert$/;"	e	enum:ipmi::sensor::SkipAssertion
DEASSERTINDEX	ipmisensor.cpp	/^#define DEASSERTINDEX /;"	d	file:
DEBUG	dbus-sdr/storagecommands.cpp	/^static constexpr bool DEBUG = false;$/;"	v	typeref:typename:bool	file:
DEFAULT_ADDRESS	include/ipmid/types.hpp	/^constexpr auto DEFAULT_ADDRESS = "0.0.0.0";$/;"	v	namespace:ipmi::network	typeref:typename:auto
DEFAULT_IDENTIFY_TIME_OUT	chassishandler.cpp	/^constexpr size_t DEFAULT_IDENTIFY_TIME_OUT = 15;$/;"	v	typeref:typename:size_t
DEFAULT_MAC_ADDRESS	include/ipmid/types.hpp	/^constexpr auto DEFAULT_MAC_ADDRESS = "00:00:00:00:00:00";$/;"	v	namespace:ipmi::network	typeref:typename:auto
DELETE_INTERFACE	include/ipmid/utils.hpp	/^constexpr auto DELETE_INTERFACE = "xyz.openbmc_project.Object.Delete";$/;"	v	namespace:ipmi	typeref:typename:auto
DEV_ADDR	elog-errors.hpp	/^    explicit constexpr DEV_ADDR(uint32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestCallout::DEV_ADDR
DEV_ADDR	elog-errors.hpp	/^    explicit constexpr DEV_ADDR(uint32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ADDR
DEV_ADDR	elog-errors.hpp	/^    using DEV_ADDR = _TestCallout::DEV_ADDR;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:_TestCallout::DEV_ADDR
DEV_ADDR	elog-errors.hpp	/^    using DEV_ADDR = _TestErrorTwo::DEV_ADDR;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:_TestErrorTwo::DEV_ADDR
DEV_ADDR	elog-errors.hpp	/^    using DEV_ADDR =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorTwo::DEV_ADDR
DEV_ADDR	elog-errors.hpp	/^    using DEV_ADDR =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorTwo::DEV_ADDR
DEV_ADDR	elog-errors.hpp	/^    using DEV_ADDR =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorTwo::DEV_ADDR
DEV_ADDR	elog-errors.hpp	/^struct DEV_ADDR$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestCallout
DEV_ADDR	elog-errors.hpp	/^struct DEV_ADDR$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo
DEV_ID	elog-errors.hpp	/^    explicit constexpr DEV_ID(uint32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ID
DEV_ID	elog-errors.hpp	/^    using DEV_ID = _TestErrorTwo::DEV_ID;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:_TestErrorTwo::DEV_ID
DEV_ID	elog-errors.hpp	/^    using DEV_ID =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorTwo::DEV_ID
DEV_ID	elog-errors.hpp	/^    using DEV_ID =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorTwo::DEV_ID
DEV_ID	elog-errors.hpp	/^    using DEV_ID =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorTwo::DEV_ID
DEV_ID	elog-errors.hpp	/^struct DEV_ID$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo
DEV_NAME	elog-errors.hpp	/^    explicit constexpr DEV_NAME(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_NAME
DEV_NAME	elog-errors.hpp	/^    using DEV_NAME = _TestErrorTwo::DEV_NAME;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:_TestErrorTwo::DEV_NAME
DEV_NAME	elog-errors.hpp	/^    using DEV_NAME =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorTwo::DEV_NAME
DEV_NAME	elog-errors.hpp	/^    using DEV_NAME =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorTwo::DEV_NAME
DEV_NAME	elog-errors.hpp	/^    using DEV_NAME =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorTwo::DEV_NAME
DEV_NAME	elog-errors.hpp	/^struct DEV_NAME$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo
DHCP	transporthandler.hpp	/^    DHCP = 2,$/;"	e	enum:ipmi::transport::IPSrc
DHCP	transporthandler.hpp	/^    DHCP = 2,$/;"	e	enum:ipmi::transport::IPv6Source
DHCP	transporthandler.hpp	/^constexpr uint8_t DHCP = 0;$/;"	v	namespace:ipmi::transport::IPv6StatusFlag	typeref:typename:uint8_t
DHCPTiming1	dcmihandler.hpp	/^    DHCPTiming1,$/;"	e	enum:dcmi::DCMIConfigParameters
DHCPTiming2	dcmihandler.hpp	/^    DHCPTiming2,$/;"	e	enum:dcmi::DCMIConfigParameters
DHCPTiming3	dcmihandler.hpp	/^    DHCPTiming3,$/;"	e	enum:dcmi::DCMIConfigParameters
DHCP_OPT12_ENABLED	dcmihandler.cpp	/^constexpr auto DHCP_OPT12_ENABLED = "SendHostNameEnabled";$/;"	v	typeref:typename:auto
DHCP_TIMING1	dcmihandler.cpp	/^constexpr auto DHCP_TIMING1 = 0x04;       \/\/ 4 sec$/;"	v	typeref:typename:auto
DHCP_TIMING2_LOWER	dcmihandler.cpp	/^constexpr auto DHCP_TIMING2_LOWER = 0x78;$/;"	v	typeref:typename:auto
DHCP_TIMING2_UPPER	dcmihandler.cpp	/^constexpr auto DHCP_TIMING2_UPPER = 0x00; \/\/ 2 min$/;"	v	typeref:typename:auto
DHCP_TIMING3_LOWER	dcmihandler.cpp	/^constexpr auto DHCP_TIMING3_LOWER = 0x40;$/;"	v	typeref:typename:auto
DHCP_TIMING3_UPPER	dcmihandler.cpp	/^constexpr auto DHCP_TIMING3_UPPER = 0x00; \/\/ 64 sec$/;"	v	typeref:typename:auto
Data	include/ipmid-host/cmd-utils.hpp	/^using Data = uint8_t;$/;"	t	namespace:phosphor::host::command	typeref:typename:uint8_t
DbusChObjProperties	user_channel/channel_mgmt.hpp	/^using DbusChObjProperties = std::vector<std::pair<std::string, DbusVariant>>;$/;"	t	namespace:ipmi	typeref:typename:std::vector<std::pair<std::string,DbusVariant>>
DbusInterface	fruread.hpp	/^using DbusInterface = std::string;$/;"	t	typeref:typename:std::string
DbusInterface	include/ipmid/types.hpp	/^using DbusInterface = std::string;$/;"	t	namespace:ipmi	typeref:typename:std::string
DbusInterfaceMap	include/ipmid/types.hpp	/^using DbusInterfaceMap = std::map<DbusInterface, DbusPropertyMap>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<DbusInterface,DbusPropertyMap>
DbusInterfaceMap	include/ipmid/types.hpp	/^using DbusInterfaceMap = std::map<DbusInterface, PropertyMap>;$/;"	t	namespace:ipmi	typeref:typename:std::map<DbusInterface,PropertyMap>
DbusInterfaceVec	fruread.hpp	/^using DbusInterfaceVec = std::vector<std::pair<DbusInterface, DbusPropertyVec>>;$/;"	t	typeref:typename:std::vector<std::pair<DbusInterface,DbusPropertyVec>>
DbusObjectInfo	include/ipmid/types.hpp	/^using DbusObjectInfo = std::pair<DbusObjectPath, DbusService>;$/;"	t	namespace:ipmi	typeref:typename:std::pair<DbusObjectPath,DbusService>
DbusObjectPath	include/ipmid/types.hpp	/^using DbusObjectPath = std::string;$/;"	t	namespace:ipmi	typeref:typename:std::string
DbusProperty	fruread.hpp	/^using DbusProperty = std::string;$/;"	t	typeref:typename:std::string
DbusProperty	include/ipmid/types.hpp	/^using DbusProperty = std::string;$/;"	t	namespace:ipmi	typeref:typename:std::string
DbusPropertyMap	include/ipmid/types.hpp	/^using DbusPropertyMap = std::map<DbusProperty, DbusPropertyValues>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<DbusProperty,DbusPropertyValues>
DbusPropertyValues	include/ipmid/types.hpp	/^using DbusPropertyValues = std::pair<PreReqOffsetValueMap, OffsetValueMap>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::pair<PreReqOffsetValueMap,OffsetValueMap>
DbusPropertyVec	fruread.hpp	/^using DbusPropertyVec = std::vector<std::pair<DbusProperty, IPMIFruData>>;$/;"	t	typeref:typename:std::vector<std::pair<DbusProperty,IPMIFruData>>
DbusService	include/ipmid/types.hpp	/^using DbusService = std::string;$/;"	t	namespace:ipmi	typeref:typename:std::string
DbusUserObjPath	user_channel/user_mgmt.hpp	/^using DbusUserObjPath = sdbusplus::message::object_path;$/;"	t	namespace:ipmi	typeref:typename:sdbusplus::message::object_path
DbusUserObjProperties	user_channel/user_mgmt.hpp	/^using DbusUserObjProperties =$/;"	t	namespace:ipmi	typeref:typename:std::vector<std::pair<std::string,DbusUserPropVariant>>
DbusUserObjValue	user_channel/user_mgmt.hpp	/^using DbusUserObjValue = std::map<std::string, DbusUserObjProperties>;$/;"	t	namespace:ipmi	typeref:typename:std::map<std::string,DbusUserObjProperties>
DbusUserPropVariant	user_channel/user_mgmt.hpp	/^using DbusUserPropVariant =$/;"	t	namespace:ipmi	typeref:typename:std::variant<std::vector<std::string>,std::string,bool>
DbusValue	chassishandler.cpp	/^using DbusValue = RestorePolicy::Policy;$/;"	t	namespace:power_policy	typeref:typename:RestorePolicy::Policy	file:
DbusVariant	user_channel/channel_mgmt.hpp	/^using DbusVariant = std::variant<std::vector<std::string>, std::string, bool>;$/;"	t	namespace:ipmi	typeref:typename:std::variant<std::vector<std::string>,std::string,bool>
Deassertion	sensordatahandler.hpp	/^using Deassertion = uint16_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:uint16_t
Delete the VLAN	docs/ipmitool-commands-cheatsheet.md	/^### Delete the VLAN$/;"	S
Device	elog-errors.hpp	/^namespace Device$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example
Device	elog-errors.hpp	/^namespace Device$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Control
Device	elog-errors.hpp	/^namespace Device$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Sensor
Device	elog-errors.hpp	/^namespace Device$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Control
Device	elog-errors.hpp	/^namespace Device$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Sensor
Device	elog-errors.hpp	/^struct Device$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
Device ID Configuration	docs/configuration.md	/^# Device ID Configuration$/;"	c
Disabled	elog-errors.hpp	/^struct Disabled$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Dump::Create
Disabled	transporthandler.hpp	/^    Disabled = 1,$/;"	e	enum:ipmi::transport::IPv6AddressStatus
DiscoveryConfig	dcmihandler.hpp	/^    DiscoveryConfig,$/;"	e	enum:dcmi::DCMIConfigParameters
Download OpenBMC Continuous Integration Image	docs/testing.md	/^### Download OpenBMC Continuous Integration Image$/;"	S
DualStack	transporthandler.hpp	/^    DualStack = 2,$/;"	e	enum:ipmi::transport::IPFamilyEnables
DualStack	transporthandler.hpp	/^constexpr uint8_t DualStack = 1;$/;"	v	namespace:ipmi::transport::IPFamilySupportFlag	typeref:typename:uint8_t
Dump	elog-errors.hpp	/^namespace Dump$/;"	n	namespace:phosphor::logging::xyz::openbmc_project
Dump	elog-errors.hpp	/^namespace Dump$/;"	n	namespace:sdbusplus::xyz::openbmc_project
Dynamic	transporthandler.hpp	/^constexpr uint8_t Dynamic = 1;$/;"	v	namespace:ipmi::transport::IPv6RouterControlFlag	typeref:typename:uint8_t
EAuthType	user_channel/channel_layer.hpp	/^enum class EAuthType : uint8_t$/;"	g	namespace:ipmi	typeref:typename:uint8_t
EChannelAccessMode	user_channel/channel_layer.hpp	/^enum class EChannelAccessMode : uint8_t$/;"	g	namespace:ipmi	typeref:typename:uint8_t
EChannelActionType	user_channel/channel_layer.hpp	/^} EChannelActionType;$/;"	t	namespace:ipmi	typeref:enum:ipmi::__anone8937c160103
EChannelID	user_channel/user_layer.hpp	/^enum class EChannelID : uint8_t$/;"	g	namespace:ipmi	typeref:typename:uint8_t
EChannelMediumType	user_channel/channel_layer.hpp	/^enum class EChannelMediumType : uint8_t$/;"	g	namespace:ipmi	typeref:typename:uint8_t
EChannelProtocolType	user_channel/channel_layer.hpp	/^enum class EChannelProtocolType : uint8_t$/;"	g	namespace:ipmi	typeref:typename:uint8_t
EChannelSessSupported	user_channel/channel_layer.hpp	/^enum class EChannelSessSupported : uint8_t$/;"	g	namespace:ipmi	typeref:typename:uint8_t
EInterfaceIndex	include/ipmid/api.h	/^} EInterfaceIndex;$/;"	t	typeref:enum:__anon8b5e56ea0103
END_OF_RECORD	sensorhandler.hpp	/^static const uint16_t END_OF_RECORD = 0xFFFF;$/;"	v	typeref:typename:const uint16_t
ENTITYGEN	configure.ac	/^AC_SUBST(ENTITYGEN)$/;"	s
ENTITY_RECORD_ID_START	sensorhandler.hpp	/^static const uint16_t ENTITY_RECORD_ID_START = 512;$/;"	v	typeref:typename:const uint16_t
ENTITY_YAML_GEN	configure.ac	/^AC_SUBST(ENTITY_YAML_GEN)$/;"	s
EOF	generate_whitelist.sh	/^cat << EOF$/;"	h
ERRNO	elog-errors.hpp	/^    explicit constexpr ERRNO(int32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::ERRNO
ERRNO	elog-errors.hpp	/^    explicit constexpr ERRNO(int32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::ERRNO
ERRNO	elog-errors.hpp	/^    explicit constexpr ERRNO(int32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::ERRNO
ERRNO	elog-errors.hpp	/^    using ERRNO = _Open::ERRNO;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Open	typeref:typename:_Open::ERRNO
ERRNO	elog-errors.hpp	/^    using ERRNO = _Seek::ERRNO;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Seek	typeref:typename:_Seek::ERRNO
ERRNO	elog-errors.hpp	/^    using ERRNO = _Write::ERRNO;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Write	typeref:typename:_Write::ERRNO
ERRNO	elog-errors.hpp	/^struct ERRNO$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File::_Open
ERRNO	elog-errors.hpp	/^struct ERRNO$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File::_Seek
ERRNO	elog-errors.hpp	/^struct ERRNO$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File::_Write
ERRNUM	elog-errors.hpp	/^    explicit constexpr ERRNUM(uint16_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::ERRNUM
ERRNUM	elog-errors.hpp	/^    using ERRNUM = _TestErrorOne::ERRNUM;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:_TestErrorOne::ERRNUM
ERRNUM	elog-errors.hpp	/^    using ERRNUM =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorOne::ERRNUM
ERRNUM	elog-errors.hpp	/^    using ERRNUM =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorOne::ERRNUM
ERRNUM	elog-errors.hpp	/^struct ERRNUM$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne
ESEL	elog-errors.hpp	/^    explicit constexpr ESEL(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::org::open_power::Host::_Event::ESEL
ESEL	elog-errors.hpp	/^    explicit constexpr ESEL(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::org::open_power::Host::_MaintenanceProcedure::ESEL
ESEL	elog-errors.hpp	/^    using ESEL = _Event::ESEL;$/;"	t	struct:phosphor::logging::org::open_power::Host::Event	typeref:typename:_Event::ESEL
ESEL	elog-errors.hpp	/^    using ESEL = _MaintenanceProcedure::ESEL;$/;"	t	struct:phosphor::logging::org::open_power::Host::MaintenanceProcedure	typeref:typename:_MaintenanceProcedure::ESEL
ESEL	elog-errors.hpp	/^struct ESEL$/;"	s	namespace:phosphor::logging::org::open_power::Host::_Event
ESEL	elog-errors.hpp	/^struct ESEL$/;"	s	namespace:phosphor::logging::org::open_power::Host::_MaintenanceProcedure
Elog	elog-errors.hpp	/^namespace Elog$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example
Entity Record id is the key	scripts/entity-example.md	/^# Entity Record id is the key$/;"	c
EntityInfo	include/ipmid/types.hpp	/^struct EntityInfo$/;"	s	namespace:ipmi::sensor
EntityInfoMap	include/ipmid/types.hpp	/^using EntityInfoMap = std::map<Id, EntityInfo>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<Id,EntityInfo>
EntityInfoMapContainer	entity_map_json.hpp	/^    EntityInfoMapContainer(const EntityInfoMap& entityRecords) :$/;"	f	class:ipmi::sensor::EntityInfoMapContainer
EntityInfoMapContainer	entity_map_json.hpp	/^class EntityInfoMapContainer$/;"	c	namespace:ipmi::sensor
EntityInst	include/ipmid/types.hpp	/^using EntityInst = uint8_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:uint8_t
EntityType	include/ipmid/types.hpp	/^using EntityType = uint8_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:uint8_t
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::org::open_power::Common::Callout
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::org::open_power::Host
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::org::open_power::Host::Access
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Common
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Common::Callout
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Common::File
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Control::Device
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Control::Host
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Dump::Create
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Sensor::Device
Error	elog-errors.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::xyz::openbmc_project::State::Host
Error	error-HostEvent.hpp	/^namespace Error$/;"	n	namespace:sdbusplus::org::open_power::Host
Event	elog-errors.hpp	/^struct Event$/;"	s	namespace:phosphor::logging::org::open_power::Host
Event	error-HostEvent.hpp	/^struct Event final : public sdbusplus::exception_t$/;"	s	namespace:sdbusplus::org::open_power::Host::Error
Example	elog-errors.hpp	/^namespace Example$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project
Exponent	include/ipmid/types.hpp	/^using Exponent = int8_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:int8_t
FEATURE_DYNAMIC_SENSORS	configure.ac	/^AM_CONDITIONAL([FEATURE_DYNAMIC_SENSORS], [test x$dynamic_sensors = xtrue])$/;"	c
FEATURE_IPMI_WHITELIST	configure.ac	/^AM_CONDITIONAL([FEATURE_IPMI_WHITELIST], [test x$ipmi_whitelist = xtrue])$/;"	c
FEATURE_LIBUSERLAYER	configure.ac	/^AM_CONDITIONAL(FEATURE_LIBUSERLAYER, [test "x$enable_libuserlayer" != "xno"])$/;"	c
FEATURE_TRANSPORT_OEM	configure.ac	/^AM_CONDITIONAL([FEATURE_TRANSPORT_OEM], [test x$transport_oem = xtrue])$/;"	c
FILE_NAME	elog-errors.hpp	/^    explicit constexpr FILE_NAME(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_NAME
FILE_NAME	elog-errors.hpp	/^    using FILE_NAME = _TestErrorOne::FILE_NAME;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:_TestErrorOne::FILE_NAME
FILE_NAME	elog-errors.hpp	/^    using FILE_NAME =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorOne::FILE_NAME
FILE_NAME	elog-errors.hpp	/^    using FILE_NAME =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorOne::FILE_NAME
FILE_NAME	elog-errors.hpp	/^struct FILE_NAME$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne
FILE_PATH	elog-errors.hpp	/^    explicit constexpr FILE_PATH(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_PATH
FILE_PATH	elog-errors.hpp	/^    using FILE_PATH = _TestErrorOne::FILE_PATH;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:_TestErrorOne::FILE_PATH
FILE_PATH	elog-errors.hpp	/^    using FILE_PATH =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorOne::FILE_PATH
FILE_PATH	elog-errors.hpp	/^    using FILE_PATH =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:example::xyz::openbmc_project::Example::Elog::TestErrorOne::FILE_PATH
FILE_PATH	elog-errors.hpp	/^struct FILE_PATH$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne
FOO_DATA	elog-errors.hpp	/^    explicit constexpr FOO_DATA(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::_Foo::FOO_DATA
FOO_DATA	elog-errors.hpp	/^    using FOO_DATA = _Foo::FOO_DATA;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:_Foo::FOO_DATA
FOO_DATA	elog-errors.hpp	/^    using FOO_DATA = example::xyz::openbmc_project::Example::Foo::Foo::FOO_DATA;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:example::xyz::openbmc_project::Example::Foo::Foo::FOO_DATA
FOO_DATA	elog-errors.hpp	/^struct FOO_DATA$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Foo::_Foo
FRUAreaMap	read_fru_data.hpp	/^using FRUAreaMap = std::map<FRUId, FruAreaData>;$/;"	t	namespace:ipmi::fru	typeref:typename:std::map<FRUId,FruAreaData>
FRUGEN	configure.ac	/^AC_SUBST(FRUGEN)$/;"	s
FRUHeader	include/dbus-sdr/storagecommands.hpp	/^struct FRUHeader$/;"	s
FRUId	read_fru_data.hpp	/^using FRUId = uint8_t;$/;"	t	namespace:ipmi::fru	typeref:typename:uint8_t
FRU_RECORD_DEVICE_ID_MAX_LENGTH	sensorhandler.hpp	/^static const int FRU_RECORD_DEVICE_ID_MAX_LENGTH = 16;$/;"	v	namespace:get_sdr	typeref:typename:const int
FRU_RECORD_ID_START	sensorhandler.hpp	/^static const uint16_t FRU_RECORD_ID_START = 256;$/;"	v	typeref:typename:const uint16_t
FRU_YAML_GEN	configure.ac	/^AC_SUBST(FRU_YAML_GEN)$/;"	s
FULL_RECORD_ID_STR_MAX_LENGTH	sensorhandler.hpp	/^#define FULL_RECORD_ID_STR_MAX_LENGTH /;"	d
Factorial	sample.cpp	/^int Factorial(int n)$/;"	f	typeref:typename:int
File	elog-errors.hpp	/^namespace File$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common
File	elog-errors.hpp	/^namespace File$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Common
File	user_channel/file.hpp	/^    File(const std::string& name, const std::string& mode,$/;"	f	class:phosphor::user::File
File	user_channel/file.hpp	/^    File(int fd, const std::string& name, const std::string& mode,$/;"	f	class:phosphor::user::File
File	user_channel/file.hpp	/^class File$/;"	c	namespace:phosphor::user
FilterBase	include/ipmid/filter.hpp	/^class FilterBase$/;"	c	namespace:ipmi
FilterFunction	include/ipmid/filter.hpp	/^using FilterFunction = ipmi::Cc(ipmi::message::Request::ptr);$/;"	t	namespace:ipmi
FilterTuple	ipmid-new.cpp	/^using FilterTuple = std::tuple<int,            \/* prio *\/$/;"	t	namespace:ipmi	typeref:typename:std::tuple<int,FilterBase::ptr>	file:
Foo	elog-errors.hpp	/^namespace Foo$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example
Foo	elog-errors.hpp	/^struct Foo : public sdbusplus::exception_t$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Foo
Formatting Commit Messages	docs/contributing.md	/^## Formatting Commit Messages$/;"	s
FruAreaData	ipmi_fru_info_area.hpp	/^using FruAreaData = std::vector<uint8_t>;$/;"	t	namespace:ipmi::fru	typeref:typename:std::vector<uint8_t>
FruId	fruread.hpp	/^using FruId = uint32_t;$/;"	t	typeref:typename:uint32_t
FruInstance	fruread.hpp	/^struct FruInstance$/;"	s
FruInstancePath	fruread.hpp	/^using FruInstancePath = std::string;$/;"	t	typeref:typename:std::string
FruInstanceVec	fruread.hpp	/^using FruInstanceVec = std::vector<FruInstance>;$/;"	t	typeref:typename:std::vector<FruInstance>
FruInventoryData	ipmi_fru_info_area.hpp	/^using FruInventoryData = std::map<Section, PropertyMap>;$/;"	t	namespace:ipmi::fru	typeref:typename:std::map<Section,PropertyMap>
FruMap	fruread.hpp	/^using FruMap = std::map<FruId, FruInstanceVec>;$/;"	t	typeref:typename:std::map<FruId,FruInstanceVec>
GENERAL_ERROR	dbus-sdr/sensorcommands.cpp	/^static constexpr int GENERAL_ERROR = -1;$/;"	v	namespace:ipmi	typeref:typename:int	file:
GET_ASSET_TAG	dcmihandler.hpp	/^    GET_ASSET_TAG = 0x06,$/;"	e	enum:dcmi::Commands
GET_CAPABILITIES	dcmihandler.hpp	/^    GET_CAPABILITIES = 0x01,$/;"	e	enum:dcmi::Commands
GET_CONF_PARAMS	dcmihandler.hpp	/^    GET_CONF_PARAMS = 0x13,$/;"	e	enum:dcmi::Commands
GET_MGMNT_CTRL_ID_STR	dcmihandler.hpp	/^    GET_MGMNT_CTRL_ID_STR = 0x09,$/;"	e	enum:dcmi::Commands
GET_POWER_LIMIT	dcmihandler.hpp	/^    GET_POWER_LIMIT = 0x03,$/;"	e	enum:dcmi::Commands
GET_POWER_READING	dcmihandler.hpp	/^    GET_POWER_READING = 0x02,$/;"	e	enum:dcmi::Commands
GET_SENSOR_INFO	dcmihandler.hpp	/^    GET_SENSOR_INFO = 0x07,$/;"	e	enum:dcmi::Commands
GET_TEMP_READINGS	dcmihandler.hpp	/^    GET_TEMP_READINGS = 0x10,$/;"	e	enum:dcmi::Commands
GPIO	elog-errors.hpp	/^struct GPIO$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
GRPEXT_GET_GROUP_CMD	groupext.cpp	/^#define GRPEXT_GET_GROUP_CMD /;"	d	file:
GTEST_SAMPLE	sample.h	/^#define GTEST_SAMPLE$/;"	d
Gateway1	transporthandler.hpp	/^    Gateway1 = 12,$/;"	e	enum:ipmi::transport::LanParam
Gateway1MAC	transporthandler.hpp	/^    Gateway1MAC = 13,$/;"	e	enum:ipmi::transport::LanParam
GetAssetTagRequest	dcmihandler.hpp	/^struct GetAssetTagRequest$/;"	s	namespace:dcmi
GetAssetTagResponse	dcmihandler.hpp	/^struct GetAssetTagResponse$/;"	s	namespace:dcmi
GetConfParamsRequest	dcmihandler.hpp	/^struct GetConfParamsRequest$/;"	s	namespace:dcmi
GetConfParamsResponse	dcmihandler.hpp	/^struct GetConfParamsResponse$/;"	s	namespace:dcmi
GetDCMICapRequest	dcmihandler.hpp	/^struct GetDCMICapRequest$/;"	s	namespace:dcmi
GetDCMICapResponse	dcmihandler.hpp	/^struct GetDCMICapResponse$/;"	s	namespace:dcmi
GetFRUAreaAccessType	include/dbus-sdr/storagecommands.hpp	/^enum class GetFRUAreaAccessType : uint8_t$/;"	g	typeref:typename:uint8_t
GetMgmntCtrlIdStrRequest	dcmihandler.hpp	/^struct GetMgmntCtrlIdStrRequest$/;"	s	namespace:dcmi
GetMgmntCtrlIdStrResponse	dcmihandler.hpp	/^struct GetMgmntCtrlIdStrResponse$/;"	s	namespace:dcmi
GetPowerLimitResponse	dcmihandler.hpp	/^struct GetPowerLimitResponse$/;"	s	namespace:dcmi
GetPowerReadingRequest	dcmihandler.hpp	/^struct GetPowerReadingRequest$/;"	s	namespace:dcmi
GetPowerReadingResponse	dcmihandler.hpp	/^struct GetPowerReadingResponse$/;"	s	namespace:dcmi
GetReadingResponse	include/ipmid/types.hpp	/^struct GetReadingResponse$/;"	s	namespace:ipmi::sensor
GetSELEntryRequest	selutility.hpp	/^struct GetSELEntryRequest$/;"	s	namespace:ipmi::sel
GetSELEntryResponse	selutility.hpp	/^struct GetSELEntryResponse$/;"	s	namespace:ipmi::sel
GetSdrReq	sensorhandler.hpp	/^struct GetSdrReq$/;"	s	namespace:get_sdr
GetSdrResp	sensorhandler.hpp	/^struct GetSdrResp$/;"	s	namespace:get_sdr
GetSensorInfoRequest	dcmihandler.hpp	/^struct GetSensorInfoRequest$/;"	s	namespace:dcmi
GetSensorInfoResponseHdr	dcmihandler.hpp	/^struct GetSensorInfoResponseHdr$/;"	s	namespace:dcmi
GetSensorResponse	include/ipmid/types.hpp	/^struct GetSensorResponse$/;"	s	namespace:ipmi::sensor
GetSensorThresholdsResponse	sensorhandler.hpp	/^struct GetSensorThresholdsResponse$/;"	s	namespace:get_sdr
GetTempReadingsRequest	dcmihandler.hpp	/^struct GetTempReadingsRequest$/;"	s	namespace:dcmi
GetTempReadingsResponseHdr	dcmihandler.hpp	/^struct GetTempReadingsResponseHdr$/;"	s	namespace:dcmi
GetUserNameReq	user_channel/usercommands.cpp	/^struct GetUserNameReq$/;"	s	namespace:ipmi	file:
GetUserNameResp	user_channel/usercommands.cpp	/^struct GetUserNameResp$/;"	s	namespace:ipmi	file:
Group	include/ipmid/api-types.hpp	/^using Group = uint8_t;$/;"	t	namespace:ipmi	typeref:typename:uint8_t
Group	include/ipmid/oemrouter.hpp	/^using Group = std::array<std::uint8_t, groupMagicSize>;$/;"	t	namespace:oem	typeref:typename:std::array<std::uint8_t,groupMagicSize>
HOST_IPMI_BUS	softoff/softoff.hpp	/^    static constexpr auto HOST_IPMI_BUS = "org.openbmc.HostIpmi";$/;"	m	class:phosphor::ipmi::SoftPowerOff	typeref:typename:auto
HOST_IPMI_INTF	softoff/softoff.hpp	/^    static constexpr auto HOST_IPMI_INTF = "org.openbmc.HostIpmi";$/;"	m	class:phosphor::ipmi::SoftPowerOff	typeref:typename:auto
HOST_IPMI_LIB_PATH	configure.ac	/^AC_DEFINE_UNQUOTED([HOST_IPMI_LIB_PATH], ["$HOST_IPMI_LIB_PATH"], [The file path to search for l/;"	d
HOST_IPMI_OBJ	softoff/softoff.hpp	/^    static constexpr auto HOST_IPMI_OBJ = "\/org\/openbmc\/HostIpmi\/1";$/;"	m	class:phosphor::ipmi::SoftPowerOff	typeref:typename:auto
HOST_MATCH	include/ipmid/utils.hpp	/^constexpr auto HOST_MATCH = "host0";$/;"	v	namespace:ipmi	typeref:typename:auto
HOST_NAME	configure.ac	/^AC_DEFINE_UNQUOTED([HOST_NAME], ["$HOST_NAME"], [The Host name in the object path])$/;"	d
HOST_STATE_INTERFACE	host-cmd-manager.cpp	/^constexpr auto HOST_STATE_INTERFACE = "xyz.openbmc_project.State.Host";$/;"	v	namespace:phosphor::host::command	typeref:typename:auto
HOST_STATE_PATH	host-cmd-manager.cpp	/^constexpr auto HOST_STATE_PATH = "\/xyz\/openbmc_project\/state\/host0";$/;"	v	namespace:phosphor::host::command	typeref:typename:auto
HOST_TRANS_PROP	host-cmd-manager.cpp	/^constexpr auto HOST_TRANS_PROP = "RequestedHostTransition";$/;"	v	namespace:phosphor::host::command	typeref:typename:auto
Handler	include/ipmid/oemrouter.hpp	/^using Handler = std::function<ipmi_ret_t(ipmi_cmd_t,          \/\/ cmd byte$/;"	t	namespace:oem
HandlerBase	include/ipmid/handler.hpp	/^class HandlerBase$/;"	c	namespace:ipmi
HandlerCompletion	include/ipmid/handler.hpp	/^    HandlerCompletion(Cc cc) noexcept : cc(cc)$/;"	f	class:ipmi::HandlerCompletion
HandlerCompletion	include/ipmid/handler.hpp	/^class HandlerCompletion$/;"	c	namespace:ipmi
HandlerException	include/ipmid/handler.hpp	/^    HandlerException(Cc cc, const char* what) :$/;"	f	class:ipmi::HandlerException
HandlerException	include/ipmid/handler.hpp	/^    HandlerException(Cc cc, const std::string& what) :$/;"	f	class:ipmi::HandlerException
HandlerException	include/ipmid/handler.hpp	/^class HandlerException : public HandlerCompletion, public std::runtime_error$/;"	c	namespace:ipmi
HandlerTuple	ipmid-new.cpp	/^using HandlerTuple = std::tuple<int,                        \/* prio *\/$/;"	t	namespace:ipmi	typeref:typename:std::tuple<int,Privilege,HandlerBase::ptr>	file:
HardReset	app/watchdog.cpp	/^    HardReset = 0x1,$/;"	e	enum:IpmiAction	file:
Host	elog-errors.hpp	/^namespace Host$/;"	n	namespace:phosphor::logging::org::open_power
Host	elog-errors.hpp	/^namespace Host$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Control
Host	elog-errors.hpp	/^namespace Host$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::State
Host	elog-errors.hpp	/^namespace Host$/;"	n	namespace:sdbusplus::org::open_power
Host	elog-errors.hpp	/^namespace Host$/;"	n	namespace:sdbusplus::xyz::openbmc_project::Control
Host	elog-errors.hpp	/^namespace Host$/;"	n	namespace:sdbusplus::xyz::openbmc_project::State
Host	error-HostEvent.hpp	/^namespace Host$/;"	n	namespace:sdbusplus::org::open_power
Host	host-interface.hpp	/^    Host(sdbusplus::bus::bus& bus, const char* objPath) :$/;"	f	class:phosphor::host::command::Host
Host	host-interface.hpp	/^class Host$/;"	c	namespace:phosphor::host::command
I2C Device Access (Command 2)	docs/oem-extension-numbering.md	/^### I2C Device Access (Command 2)$/;"	S
I2C Request Message - Overall	docs/oem-extension-numbering.md	/^#### I2C Request Message - Overall$/;"	t
I2C Request Message - Step Properties	docs/oem-extension-numbering.md	/^#### I2C Request Message - Step Properties$/;"	t
I2C Response Message	docs/oem-extension-numbering.md	/^#### I2C Response Message$/;"	t
IIC	elog-errors.hpp	/^struct IIC$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
INTF_ETHERNET	transporthandler.hpp	/^constexpr auto INTF_ETHERNET = "xyz.openbmc_project.Network.EthernetInterface";$/;"	v	namespace:ipmi::transport	typeref:typename:auto
INTF_IP	transporthandler.hpp	/^constexpr auto INTF_IP = "xyz.openbmc_project.Network.IP";$/;"	v	namespace:ipmi::transport	typeref:typename:auto
INTF_IP_CREATE	transporthandler.hpp	/^constexpr auto INTF_IP_CREATE = "xyz.openbmc_project.Network.IP.Create";$/;"	v	namespace:ipmi::transport	typeref:typename:auto
INTF_MAC	transporthandler.hpp	/^constexpr auto INTF_MAC = "xyz.openbmc_project.Network.MACAddress";$/;"	v	namespace:ipmi::transport	typeref:typename:auto
INTF_NEIGHBOR	transporthandler.hpp	/^constexpr auto INTF_NEIGHBOR = "xyz.openbmc_project.Network.Neighbor";$/;"	v	namespace:ipmi::transport	typeref:typename:auto
INTF_NEIGHBOR_CREATE_STATIC	transporthandler.hpp	/^constexpr auto INTF_NEIGHBOR_CREATE_STATIC =$/;"	v	namespace:ipmi::transport	typeref:typename:auto
INTF_SYSTEMCONFIG	transporthandler.hpp	/^constexpr auto INTF_SYSTEMCONFIG =$/;"	v	namespace:ipmi::transport	typeref:typename:auto
INTF_VLAN	transporthandler.hpp	/^constexpr auto INTF_VLAN = "xyz.openbmc_project.Network.VLAN";$/;"	v	namespace:ipmi::transport	typeref:typename:auto
INTF_VLAN_CREATE	transporthandler.hpp	/^constexpr auto INTF_VLAN_CREATE = "xyz.openbmc_project.Network.VLAN.Create";$/;"	v	namespace:ipmi::transport	typeref:typename:auto
INVALID	user_channel/channel_layer.hpp	/^    INVALID = 0xFF,$/;"	e	enum:ipmi::PayloadType
INVSENSORGEN	configure.ac	/^AC_SUBST(INVSENSORGEN)$/;"	s
INVSENSOR_YAML_GEN	configure.ac	/^AC_SUBST(INVSENSOR_YAML_GEN)$/;"	s
IP	transporthandler.hpp	/^    IP = 3,$/;"	e	enum:ipmi::transport::LanParam
IPFamilyEnables	transporthandler.hpp	/^    IPFamilyEnables = 51,$/;"	e	enum:ipmi::transport::LanParam
IPFamilyEnables	transporthandler.hpp	/^enum class IPFamilyEnables : uint8_t$/;"	g	namespace:ipmi::transport	typeref:typename:uint8_t
IPFamilySupport	transporthandler.hpp	/^    IPFamilySupport = 50,$/;"	e	enum:ipmi::transport::LanParam
IPFamilySupportFlag	transporthandler.hpp	/^namespace IPFamilySupportFlag$/;"	n	namespace:ipmi::transport
IPMI	user_channel/channel_layer.hpp	/^    IPMI = 0x00,$/;"	e	enum:ipmi::PayloadType
IPMI command cheat sheet	docs/ipmitool-commands-cheatsheet.md	/^# IPMI command cheat sheet$/;"	c
IPMIFruData	fruread.hpp	/^struct IPMIFruData$/;"	s
IPMIFruInventory	sensorhandler.cpp	/^static constexpr uint8_t IPMIFruInventory = 0x02;$/;"	v	typeref:typename:uint8_t	file:
IPMIGetSensorEventEnableThresholds	include/dbus-sdr/sensorcommands.hpp	/^enum class IPMIGetSensorEventEnableThresholds : uint8_t$/;"	g	typeref:typename:uint8_t
IPMINetfnSensorCmds	include/dbus-sdr/sensorcommands.hpp	/^enum class IPMINetfnSensorCmds : ipmi_cmd_t$/;"	g	typeref:typename:ipmi_cmd_t
IPMISensor	elog-errors.hpp	/^struct IPMISensor$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
IPMISensorEventEnableByte2	include/dbus-sdr/sensorcommands.hpp	/^enum class IPMISensorEventEnableByte2 : uint8_t$/;"	g	typeref:typename:uint8_t
IPMISensorEventEnableThresholds	include/dbus-sdr/sensorcommands.hpp	/^enum class IPMISensorEventEnableThresholds : uint8_t$/;"	g	typeref:typename:uint8_t
IPMISensorReadingByte2	include/dbus-sdr/sensorcommands.hpp	/^enum class IPMISensorReadingByte2 : uint8_t$/;"	g	typeref:typename:uint8_t
IPMISensorReadingByte3	include/dbus-sdr/sensorcommands.hpp	/^enum class IPMISensorReadingByte3 : uint8_t$/;"	g	typeref:typename:uint8_t
IPMISetPasswordReturnCodes	user_channel/usercommands.hpp	/^enum class IPMISetPasswordReturnCodes$/;"	g	namespace:ipmi
IPMIStatsEntry	include/dbus-sdr/sdrutils.hpp	/^class IPMIStatsEntry$/;"	c	namespace:details
IPMIStatsTable	include/dbus-sdr/sdrutils.hpp	/^class IPMIStatsTable$/;"	c	namespace:details
IPMIThresholdRespBits	include/dbus-sdr/sensorcommands.hpp	/^enum class IPMIThresholdRespBits$/;"	g
IPMIThresholds	include/dbus-sdr/sensorcommands.hpp	/^struct IPMIThresholds$/;"	s	namespace:ipmi
IPMI_CC_BUSY	include/ipmid/api.h	/^    IPMI_CC_BUSY = 0xC0,$/;"	e	enum:ipmi_return_codes
IPMI_CC_FAIL_SET_IN_PROGRESS	chassishandler.hpp	/^    IPMI_CC_FAIL_SET_IN_PROGRESS = 0x81,$/;"	e	enum:ipmi_chassis_return_codes
IPMI_CC_ILLEGAL_COMMAND	include/ipmid/api.h	/^    IPMI_CC_ILLEGAL_COMMAND = 0xCD,$/;"	e	enum:ipmi_return_codes
IPMI_CC_INSUFFICIENT_PRIVILEGE	include/ipmid/api.h	/^    IPMI_CC_INSUFFICIENT_PRIVILEGE = 0xD4,$/;"	e	enum:ipmi_return_codes
IPMI_CC_INVALID	include/ipmid/api.h	/^    IPMI_CC_INVALID = 0xC1,$/;"	e	enum:ipmi_return_codes
IPMI_CC_INVALID_FIELD_REQUEST	include/ipmid/api.h	/^    IPMI_CC_INVALID_FIELD_REQUEST = 0xCC,$/;"	e	enum:ipmi_return_codes
IPMI_CC_INVALID_RESERVATION_ID	include/ipmid/api.h	/^    IPMI_CC_INVALID_RESERVATION_ID = 0xC5,$/;"	e	enum:ipmi_return_codes
IPMI_CC_LEN	include/ipmid/api.h	/^#define IPMI_CC_LEN /;"	d
IPMI_CC_OK	include/ipmid/api.h	/^    IPMI_CC_OK = 0x00,$/;"	e	enum:ipmi_return_codes
IPMI_CC_OUT_OF_SPACE	include/ipmid/api.h	/^    IPMI_CC_OUT_OF_SPACE = 0xC4,$/;"	e	enum:ipmi_return_codes
IPMI_CC_PARM_NOT_SUPPORTED	chassishandler.hpp	/^    IPMI_CC_PARM_NOT_SUPPORTED = 0x80,$/;"	e	enum:ipmi_chassis_return_codes
IPMI_CC_PARM_OUT_OF_RANGE	include/ipmid/api.h	/^    IPMI_CC_PARM_OUT_OF_RANGE = 0xC9,$/;"	e	enum:ipmi_return_codes
IPMI_CC_REQUESTED_TOO_MANY_BYTES	include/ipmid/api.h	/^    IPMI_CC_REQUESTED_TOO_MANY_BYTES = 0xCA,$/;"	e	enum:ipmi_return_codes
IPMI_CC_REQ_DATA_LEN_INVALID	include/ipmid/api.h	/^    IPMI_CC_REQ_DATA_LEN_INVALID = 0xC7,$/;"	e	enum:ipmi_return_codes
IPMI_CC_REQ_DATA_TRUNCATED	include/ipmid/api.h	/^    IPMI_CC_REQ_DATA_TRUNCATED = 0xC6,$/;"	e	enum:ipmi_return_codes
IPMI_CC_RESPONSE_ERROR	include/ipmid/api.h	/^    IPMI_CC_RESPONSE_ERROR = 0xCE,$/;"	e	enum:ipmi_return_codes
IPMI_CC_SENSOR_INVALID	include/ipmid/api.h	/^    IPMI_CC_SENSOR_INVALID = 0xCB,$/;"	e	enum:ipmi_return_codes
IPMI_CC_SYSTEM_INFO_PARAMETER_NOT_SUPPORTED	include/ipmid/api.h	/^    IPMI_CC_SYSTEM_INFO_PARAMETER_NOT_SUPPORTED = 0x80,$/;"	e	enum:ipmi_return_codes
IPMI_CC_SYSTEM_INFO_PARAMETER_SET_READ_ONLY	include/ipmid/api.h	/^    IPMI_CC_SYSTEM_INFO_PARAMETER_SET_READ_ONLY = 0x82,$/;"	e	enum:ipmi_return_codes
IPMI_CC_TIMEOUT	include/ipmid/api.h	/^    IPMI_CC_TIMEOUT = 0xC3,$/;"	e	enum:ipmi_return_codes
IPMI_CC_UNSPECIFIED_ERROR	include/ipmid/api.h	/^    IPMI_CC_UNSPECIFIED_ERROR = 0xFF,$/;"	e	enum:ipmi_return_codes
IPMI_CMD_ADD_SEL	storagehandler.hpp	/^    IPMI_CMD_ADD_SEL = 0x44,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_CHASSIS_CONTROL	chassishandler.hpp	/^    IPMI_CMD_CHASSIS_CONTROL = 0x02,$/;"	e	enum:ipmi_netfn_chassis_cmds
IPMI_CMD_CHASSIS_IDENTIFY	chassishandler.hpp	/^    IPMI_CMD_CHASSIS_IDENTIFY = 0x04,$/;"	e	enum:ipmi_netfn_chassis_cmds
IPMI_CMD_CHASSIS_STATUS	chassishandler.hpp	/^    IPMI_CMD_CHASSIS_STATUS = 0x01,$/;"	e	enum:ipmi_netfn_chassis_cmds
IPMI_CMD_CLEAR_SEL	storagehandler.hpp	/^    IPMI_CMD_CLEAR_SEL = 0x47,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_COLD_RESET	globalhandler.hpp	/^    IPMI_CMD_COLD_RESET = 0x02,$/;"	e	enum:ipmi_global_control_cmds
IPMI_CMD_DELETE_SEL	storagehandler.hpp	/^    IPMI_CMD_DELETE_SEL = 0x46,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_GET_ACPI	apphandler.hpp	/^    IPMI_CMD_GET_ACPI = 0x07,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_GET_BMC_GLOBAL_ENABLES	systemintfcmds.hpp	/^    IPMI_CMD_GET_BMC_GLOBAL_ENABLES = 0x2F,$/;"	e	enum:ipmi_netfn_system_intf_cmds
IPMI_CMD_GET_CAP_BIT	apphandler.hpp	/^    IPMI_CMD_GET_CAP_BIT = 0x36,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_GET_CHANNEL_ACCESS	apphandler.hpp	/^    IPMI_CMD_GET_CHANNEL_ACCESS = 0x41,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_GET_CHAN_INFO	apphandler.hpp	/^    IPMI_CMD_GET_CHAN_INFO = 0x42,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_GET_CHASSIS_CAP	chassishandler.hpp	/^    IPMI_CMD_GET_CHASSIS_CAP = 0x00,$/;"	e	enum:ipmi_netfn_chassis_cmds
IPMI_CMD_GET_DEVICE_GUID	apphandler.hpp	/^    IPMI_CMD_GET_DEVICE_GUID = 0x08,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_GET_DEVICE_ID	apphandler.hpp	/^    IPMI_CMD_GET_DEVICE_ID = 0x01,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_GET_DEVICE_SDR	sensorhandler.hpp	/^    IPMI_CMD_GET_DEVICE_SDR = 0x21,$/;"	e	enum:ipmi_netfn_sen_cmds
IPMI_CMD_GET_DEVICE_SDR_INFO	sensorhandler.hpp	/^    IPMI_CMD_GET_DEVICE_SDR_INFO = 0x20,$/;"	e	enum:ipmi_netfn_sen_cmds
IPMI_CMD_GET_FRU_INV_AREA_INFO	storagehandler.hpp	/^    IPMI_CMD_GET_FRU_INV_AREA_INFO = 0x10,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_GET_MSG_FLAGS	systemintfcmds.hpp	/^    IPMI_CMD_GET_MSG_FLAGS = 0x31,$/;"	e	enum:ipmi_netfn_system_intf_cmds
IPMI_CMD_GET_POH_COUNTER	chassishandler.hpp	/^    IPMI_CMD_GET_POH_COUNTER = 0x0F,$/;"	e	enum:ipmi_netfn_chassis_cmds
IPMI_CMD_GET_REPOSITORY_INFO	storagehandler.hpp	/^    IPMI_CMD_GET_REPOSITORY_INFO = 0x20,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_GET_SDR	storagehandler.hpp	/^    IPMI_CMD_GET_SDR = 0x23,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_GET_SELF_TEST_RESULTS	apphandler.hpp	/^    IPMI_CMD_GET_SELF_TEST_RESULTS = 0x04,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_GET_SEL_ENTRY	storagehandler.hpp	/^    IPMI_CMD_GET_SEL_ENTRY = 0x43,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_GET_SEL_INFO	storagehandler.hpp	/^    IPMI_CMD_GET_SEL_INFO = 0x40,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_GET_SEL_TIME	storagehandler.hpp	/^    IPMI_CMD_GET_SEL_TIME = 0x48,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_GET_SENSOR_READING	sensorhandler.hpp	/^    IPMI_CMD_GET_SENSOR_READING = 0x2D,$/;"	e	enum:ipmi_netfn_sen_cmds
IPMI_CMD_GET_SENSOR_THRESHOLDS	sensorhandler.hpp	/^    IPMI_CMD_GET_SENSOR_THRESHOLDS = 0x27,$/;"	e	enum:ipmi_netfn_sen_cmds
IPMI_CMD_GET_SENSOR_TYPE	sensorhandler.hpp	/^    IPMI_CMD_GET_SENSOR_TYPE = 0x2F,$/;"	e	enum:ipmi_netfn_sen_cmds
IPMI_CMD_GET_SYSTEM_INFO	apphandler.hpp	/^    IPMI_CMD_GET_SYSTEM_INFO = 0x59,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_GET_SYS_BOOT_OPTIONS	chassishandler.hpp	/^    IPMI_CMD_GET_SYS_BOOT_OPTIONS = 0x09,$/;"	e	enum:ipmi_netfn_chassis_cmds
IPMI_CMD_GET_SYS_GUID	apphandler.hpp	/^    IPMI_CMD_GET_SYS_GUID = 0x37,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_GET_USER_ACCESS	user_channel/usercommands.hpp	/^    IPMI_CMD_GET_USER_ACCESS = 0x44,$/;"	e	enum:ipmi::ipmi_netfn_user_cmds
IPMI_CMD_GET_USER_NAME	user_channel/usercommands.hpp	/^    IPMI_CMD_GET_USER_NAME = 0x46,$/;"	e	enum:ipmi::ipmi_netfn_user_cmds
IPMI_CMD_GET_WD	apphandler.hpp	/^    IPMI_CMD_GET_WD = 0x25,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_PLATFORM_EVENT	sensorhandler.hpp	/^    IPMI_CMD_PLATFORM_EVENT = 0x2,$/;"	e	enum:ipmi_netfn_sen_cmds
IPMI_CMD_READ_EVENT	systemintfcmds.hpp	/^    IPMI_CMD_READ_EVENT = 0x35,$/;"	e	enum:ipmi_netfn_system_intf_cmds
IPMI_CMD_READ_FRU_DATA	storagehandler.hpp	/^    IPMI_CMD_READ_FRU_DATA = 0x11,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_RESERVE_DEVICE_SDR_REPO	sensorhandler.hpp	/^    IPMI_CMD_RESERVE_DEVICE_SDR_REPO = 0x22,$/;"	e	enum:ipmi_netfn_sen_cmds
IPMI_CMD_RESERVE_SDR	storagehandler.hpp	/^    IPMI_CMD_RESERVE_SDR = 0x22,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_RESERVE_SEL	storagehandler.hpp	/^    IPMI_CMD_RESERVE_SEL = 0x42,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_RESET_WD	apphandler.hpp	/^    IPMI_CMD_RESET_WD = 0x22,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_SET_ACPI	apphandler.hpp	/^    IPMI_CMD_SET_ACPI = 0x06,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_SET_BMC_GLOBAL_ENABLES	systemintfcmds.hpp	/^    IPMI_CMD_SET_BMC_GLOBAL_ENABLES = 0x2E,$/;"	e	enum:ipmi_netfn_system_intf_cmds
IPMI_CMD_SET_CHAN_ACCESS	apphandler.hpp	/^    IPMI_CMD_SET_CHAN_ACCESS = 0x40,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_SET_CHASSIS_CAP	chassishandler.hpp	/^    IPMI_CMD_SET_CHASSIS_CAP = 0x05,$/;"	e	enum:ipmi_netfn_chassis_cmds
IPMI_CMD_SET_SEL_TIME	storagehandler.hpp	/^    IPMI_CMD_SET_SEL_TIME = 0x49,$/;"	e	enum:ipmi_netfn_storage_cmds
IPMI_CMD_SET_SENSOR	sensorhandler.hpp	/^    IPMI_CMD_SET_SENSOR = 0x30,$/;"	e	enum:ipmi_netfn_sen_cmds
IPMI_CMD_SET_SYSTEM_INFO	apphandler.hpp	/^    IPMI_CMD_SET_SYSTEM_INFO = 0x58,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_SET_SYS_BOOT_OPTIONS	chassishandler.hpp	/^    IPMI_CMD_SET_SYS_BOOT_OPTIONS = 0x08,$/;"	e	enum:ipmi_netfn_chassis_cmds
IPMI_CMD_SET_USER_ACCESS	user_channel/usercommands.hpp	/^    IPMI_CMD_SET_USER_ACCESS = 0x43,$/;"	e	enum:ipmi::ipmi_netfn_user_cmds
IPMI_CMD_SET_USER_NAME	user_channel/usercommands.hpp	/^    IPMI_CMD_SET_USER_NAME = 0x45,$/;"	e	enum:ipmi::ipmi_netfn_user_cmds
IPMI_CMD_SET_USER_PASSWORD	user_channel/usercommands.hpp	/^    IPMI_CMD_SET_USER_PASSWORD = 0x47,$/;"	e	enum:ipmi::ipmi_netfn_user_cmds
IPMI_CMD_SET_WD	apphandler.hpp	/^    IPMI_CMD_SET_WD = 0x24,$/;"	e	enum:ipmi_netfn_app_cmds
IPMI_CMD_WILDCARD	include/ipmid/api.h	/^    IPMI_CMD_WILDCARD = 0xFF,$/;"	e	enum:ipmi_netfn_wild_card_cmd
IPMI_DBUS_TIMEOUT	include/ipmid/utils.hpp	/^constexpr std::chrono::microseconds IPMI_DBUS_TIMEOUT = 5s;$/;"	v	namespace:ipmi	typeref:typename:std::chrono::microseconds
IPMI_DCMI_CC_NO_ACTIVE_POWER_LIMIT	include/ipmid/api.h	/^    IPMI_DCMI_CC_NO_ACTIVE_POWER_LIMIT = 0x80,$/;"	e	enum:ipmi_return_codes
IPMI_LOGICAL_FRU	sensorhandler.hpp	/^    IPMI_LOGICAL_FRU = 0x80,$/;"	e	enum:device_type
IPMI_OK	chassishandler.hpp	/^    IPMI_OK = 0x0,$/;"	e	enum:ipmi_chassis_return_codes
IPMI_OUT_OF_SPACE	chassishandler.hpp	/^    IPMI_OUT_OF_SPACE = 0xC4,$/;"	e	enum:ipmi_generic_return_codes
IPMI_PHYSICAL_FRU	sensorhandler.hpp	/^    IPMI_PHYSICAL_FRU = 0x00,$/;"	e	enum:device_type
IPMI_SENSOR_CURRENT	sensorhandler.hpp	/^    IPMI_SENSOR_CURRENT = 0x03,$/;"	e	enum:ipmi_sensor_types
IPMI_SENSOR_FAN	sensorhandler.hpp	/^    IPMI_SENSOR_FAN = 0x04,$/;"	e	enum:ipmi_sensor_types
IPMI_SENSOR_TEMP	sensorhandler.hpp	/^    IPMI_SENSOR_TEMP = 0x01,$/;"	e	enum:ipmi_sensor_types
IPMI_SENSOR_TPM	sensorhandler.hpp	/^    IPMI_SENSOR_TPM = 0xCC,$/;"	e	enum:ipmi_sensor_types
IPMI_SENSOR_VOLTAGE	sensorhandler.hpp	/^    IPMI_SENSOR_VOLTAGE = 0x02,$/;"	e	enum:ipmi_sensor_types
IPMI_SYSINFO_BMC_URL	apphandler.hpp	/^    IPMI_SYSINFO_BMC_URL = 0x06,$/;"	e	enum:ipmi_app_sysinfo_params
IPMI_SYSINFO_OEM_START	apphandler.hpp	/^    IPMI_SYSINFO_OEM_START = 0xC0, \/\/ Start of range of OEM parameters$/;"	e	enum:ipmi_app_sysinfo_params
IPMI_SYSINFO_OS_HYP_URL	apphandler.hpp	/^    IPMI_SYSINFO_OS_HYP_URL = 0x07,$/;"	e	enum:ipmi_app_sysinfo_params
IPMI_SYSINFO_OS_NAME	apphandler.hpp	/^    IPMI_SYSINFO_OS_NAME = 0x04,$/;"	e	enum:ipmi_app_sysinfo_params
IPMI_SYSINFO_OS_VERSION	apphandler.hpp	/^    IPMI_SYSINFO_OS_VERSION = 0x05,$/;"	e	enum:ipmi_app_sysinfo_params
IPMI_SYSINFO_PRIMARY_OS_NAME	apphandler.hpp	/^    IPMI_SYSINFO_PRIMARY_OS_NAME = 0x03,$/;"	e	enum:ipmi_app_sysinfo_params
IPMI_SYSINFO_SET_STATE	apphandler.hpp	/^    IPMI_SYSINFO_SET_STATE = 0x00,$/;"	e	enum:ipmi_app_sysinfo_params
IPMI_SYSINFO_SYSTEM_FW_VERSION	apphandler.hpp	/^    IPMI_SYSINFO_SYSTEM_FW_VERSION = 0x01,$/;"	e	enum:ipmi_app_sysinfo_params
IPMI_SYSINFO_SYSTEM_NAME	apphandler.hpp	/^    IPMI_SYSINFO_SYSTEM_NAME = 0x02,$/;"	e	enum:ipmi_app_sysinfo_params
IPMI_WDOG_CC_NOT_INIT	include/ipmid/api.h	/^    IPMI_WDOG_CC_NOT_INIT = 0x80,$/;"	e	enum:ipmi_return_codes
IPMI_WHITELIST_SOURCE	Makefile.am	/^IPMI_WHITELIST_SOURCE = ipmiwhitelist.cpp$/;"	m
IPMI_WHITELIST_SOURCE	Makefile.am	/^IPMI_WHITELIST_SOURCE =$/;"	m
IPMIcmd	include/ipmid-host/cmd-utils.hpp	/^using IPMIcmd = uint8_t;$/;"	t	namespace:phosphor::host::command	typeref:typename:uint8_t
IPSrc	transporthandler.hpp	/^    IPSrc = 4,$/;"	e	enum:ipmi::transport::LanParam
IPSrc	transporthandler.hpp	/^enum class IPSrc : uint8_t$/;"	g	namespace:ipmi::transport	typeref:typename:uint8_t
IPV4_ADDRESS_SIZE_BYTE	include/ipmid/types.hpp	/^constexpr auto IPV4_ADDRESS_SIZE_BYTE = 4;$/;"	v	namespace:ipmi::network	typeref:typename:auto
IPV6_ADDRESS_SIZE_BYTE	include/ipmid/types.hpp	/^constexpr auto IPV6_ADDRESS_SIZE_BYTE = 16;$/;"	v	namespace:ipmi::network	typeref:typename:auto
IP_INTERFACE	chassishandler.cpp	/^constexpr auto IP_INTERFACE = "xyz.openbmc_project.Network.IP";$/;"	v	typeref:typename:auto
IPv4Only	transporthandler.hpp	/^    IPv4Only = 0,$/;"	e	enum:ipmi::transport::IPFamilyEnables
IPv6AddressStatus	transporthandler.hpp	/^enum class IPv6AddressStatus : uint8_t$/;"	g	namespace:ipmi::transport	typeref:typename:uint8_t
IPv6Alerts	transporthandler.hpp	/^constexpr uint8_t IPv6Alerts = 2;$/;"	v	namespace:ipmi::transport::IPFamilySupportFlag	typeref:typename:uint8_t
IPv6DynamicAddresses	transporthandler.hpp	/^    IPv6DynamicAddresses = 59,$/;"	e	enum:ipmi::transport::LanParam
IPv6Only	transporthandler.hpp	/^    IPv6Only = 1,$/;"	e	enum:ipmi::transport::IPFamilyEnables
IPv6Only	transporthandler.hpp	/^constexpr uint8_t IPv6Only = 0;$/;"	v	namespace:ipmi::transport::IPFamilySupportFlag	typeref:typename:uint8_t
IPv6RouterControl	transporthandler.hpp	/^    IPv6RouterControl = 64,$/;"	e	enum:ipmi::transport::LanParam
IPv6RouterControlFlag	transporthandler.hpp	/^namespace IPv6RouterControlFlag$/;"	n	namespace:ipmi::transport
IPv6Source	transporthandler.hpp	/^enum class IPv6Source : uint8_t$/;"	g	namespace:ipmi::transport	typeref:typename:uint8_t
IPv6StaticAddresses	transporthandler.hpp	/^    IPv6StaticAddresses = 56,$/;"	e	enum:ipmi::transport::LanParam
IPv6StaticRouter1IP	transporthandler.hpp	/^    IPv6StaticRouter1IP = 65,$/;"	e	enum:ipmi::transport::LanParam
IPv6StaticRouter1MAC	transporthandler.hpp	/^    IPv6StaticRouter1MAC = 66,$/;"	e	enum:ipmi::transport::LanParam
IPv6StaticRouter1PrefixLength	transporthandler.hpp	/^    IPv6StaticRouter1PrefixLength = 67,$/;"	e	enum:ipmi::transport::LanParam
IPv6StaticRouter1PrefixValue	transporthandler.hpp	/^    IPv6StaticRouter1PrefixValue = 68,$/;"	e	enum:ipmi::transport::LanParam
IPv6Status	transporthandler.hpp	/^    IPv6Status = 55,$/;"	e	enum:ipmi::transport::LanParam
IPv6StatusFlag	transporthandler.hpp	/^namespace IPv6StatusFlag$/;"	n	namespace:ipmi::transport
ISBITSET	ipmisensor.cpp	/^#define ISBITSET(/;"	d	file:
Iana	include/ipmid/api-types.hpp	/^using Iana = oem::Number;$/;"	t	namespace:ipmi	typeref:typename:oem::Number
Id	include/ipmid/types.hpp	/^using Id = uint8_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:uint8_t
Id	selutility.hpp	/^using Id = uint32_t;$/;"	t	namespace:ipmi::sel	typeref:typename:uint32_t
IdInfoMap	include/ipmid/types.hpp	/^using IdInfoMap = std::map<Id, Info>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<Id,Info>
IfAddr	transporthandler.hpp	/^struct IfAddr$/;"	s	namespace:ipmi::transport
IfNeigh	transporthandler.hpp	/^struct IfNeigh$/;"	s	namespace:ipmi::transport
InProgress	transporthandler.hpp	/^    InProgress = 1,$/;"	e	enum:ipmi::transport::SetStatus
Info	include/ipmid/types.hpp	/^struct Info$/;"	s	namespace:ipmi::sensor
InputArgsType	include/ipmid/handler.hpp	/^        using InputArgsType = typename utility::DecayTuple<CallbackSig>::type;$/;"	t	function:ipmi::IpmiHandler::executeCallback	typeref:typename:utility::DecayTuple<CallbackSig>::type
Install Docker	docs/testing.md	/^### Install Docker$/;"	S
InstancePath	include/ipmid/types.hpp	/^using InstancePath = std::string;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::string
Interface	sensordatahandler.hpp	/^using Interface = std::string;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::string
Interface	settings.hpp	/^using Interface = std::string;$/;"	t	namespace:settings	typeref:typename:std::string
InterfaceList	include/ipmid/types.hpp	/^using InterfaceList = std::vector<std::string>;$/;"	t	namespace:ipmi	typeref:typename:std::vector<std::string>
InterfaceMap	include/ipmid/types.hpp	/^using InterfaceMap = std::map<DbusInterface, PropertyMap>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<DbusInterface,PropertyMap>
Interfaces	dcmihandler.hpp	/^using Interfaces = std::vector<std::string>;$/;"	t	namespace:dcmi::assettag	typeref:typename:std::vector<std::string>
Interfaces	sensordatahandler.hpp	/^using Interfaces = std::vector<Interface>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::vector<Interface>
Interfaces	settings.cpp	/^    using Interfaces = std::vector<Interface>;$/;"	t	function:settings::Objects::Objects	typeref:typename:std::vector<Interface>	file:
Interfaces	settings.cpp	/^    using Interfaces = std::vector<Interface>;$/;"	t	function:settings::Objects::service	typeref:typename:std::vector<Interface>	file:
InternalFailure	dcmihandler.cpp	/^using InternalFailure =$/;"	t	typeref:typename:sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure	file:
InternalFailure	elog-errors.hpp	/^struct InternalFailure$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common
InternalFailure	host-cmd-manager.cpp	/^using InternalFailure =$/;"	t	namespace:phosphor::host::command	typeref:typename:sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure	file:
InternalFailure	read_fru_data.cpp	/^using InternalFailure =$/;"	t	namespace:ipmi::fru	typeref:typename:sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure	file:
InternalFailure	selutility.cpp	/^using InternalFailure =$/;"	t	typeref:typename:sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure	file:
InternalFailure	sensordatahandler.cpp	/^using InternalFailure =$/;"	t	namespace:ipmi::sensor	typeref:typename:sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure	file:
InternalFailure	sensorhandler.cpp	/^using InternalFailure =$/;"	t	typeref:typename:sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure	file:
InternalFailure	storagehandler.cpp	/^using InternalFailure =$/;"	t	typeref:typename:sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure	file:
InternalFailure	user_channel/shadowlock.hpp	/^using InternalFailure =$/;"	t	namespace:phosphor::user::shadow	typeref:typename:sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure
InternalFailure	user_channel/user_mgmt.cpp	/^using InternalFailure =$/;"	t	namespace:ipmi	typeref:typename:sdbusplus::xyz::openbmc_project::Common::Error::InternalFailure	file:
InvObjectIDMap	include/ipmid/types.hpp	/^using InvObjectIDMap = std::map<InventoryPath, SelData>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<InventoryPath,SelData>
InvalidArgument	elog-errors.hpp	/^struct InvalidArgument$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common
Inventory	elog-errors.hpp	/^struct Inventory$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
InventoryPath	include/ipmid/types.hpp	/^using InventoryPath = std::string;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::string
IpmiAction	app/watchdog.cpp	/^enum class IpmiAction : uint8_t$/;"	g	typeref:typename:uint8_t	file:
IpmiCmdData	include/ipmid-host/cmd-utils.hpp	/^using IpmiCmdData = std::pair<IPMIcmd, Data>;$/;"	t	namespace:phosphor::host::command	typeref:typename:std::pair<IPMIcmd,Data>
IpmiFilter	include/ipmid/filter.hpp	/^    IpmiFilter(Filter&& filter) : filter_(std::move(filter))$/;"	f	class:ipmi::IpmiFilter
IpmiFilter	include/ipmid/filter.hpp	/^class IpmiFilter : public FilterBase$/;"	c	namespace:ipmi
IpmiHandler	include/ipmid/handler.hpp	/^    explicit IpmiHandler(Handler&& handler) :$/;"	f	class:ipmi::IpmiHandler
IpmiHandler	include/ipmid/handler.hpp	/^    explicit IpmiHandler(const ipmid_callback_t& handler, void* ctx = nullptr) :$/;"	f	class:ipmi::IpmiHandler
IpmiHandler	include/ipmid/handler.hpp	/^    explicit IpmiHandler(const oem::Handler& handler) : handler_(handler)$/;"	f	class:ipmi::IpmiHandler
IpmiHandler	include/ipmid/handler.hpp	/^class IpmiHandler final : public HandlerBase$/;"	c	namespace:ipmi
IpmiHandler	include/ipmid/handler.hpp	/^class IpmiHandler<ipmid_callback_t> final : public HandlerBase$/;"	c	namespace:ipmi
IpmiHandler	include/ipmid/handler.hpp	/^class IpmiHandler<oem::Handler> final : public HandlerBase$/;"	c	namespace:ipmi
IpmiProvider	ipmid-new.cpp	/^    explicit IpmiProvider(const char* fname) : addr(nullptr), name(fname)$/;"	f	struct:ipmi::IpmiProvider	file:
IpmiProvider	ipmid-new.cpp	/^struct IpmiProvider$/;"	s	namespace:ipmi	file:
IpmiRestartCause	chassishandler.cpp	/^enum class IpmiRestartCause$/;"	g	file:
IpmiTimerUse	app/watchdog.cpp	/^enum class IpmiTimerUse : uint8_t$/;"	g	typeref:typename:uint8_t	file:
IpmiUpdateData	include/ipmid/types.hpp	/^using IpmiUpdateData = sdbusplus::message::message;$/;"	t	namespace:ipmi::sensor	typeref:typename:sdbusplus::message::message
IpmiValue	chassishandler.cpp	/^using IpmiValue = uint8_t;$/;"	t	namespace:boot_options	typeref:typename:uint8_t	file:
IpmiValue	chassishandler.cpp	/^using IpmiValue = uint8_t;$/;"	t	namespace:power_policy	typeref:typename:uint8_t	file:
Json	app/channel.hpp	/^using Json = nlohmann::json;$/;"	t	namespace:cipher	typeref:typename:nlohmann::json
Json	dcmihandler.hpp	/^using Json = nlohmann::json;$/;"	t	namespace:dcmi	typeref:typename:nlohmann::json
Json	user_channel/channel_mgmt.hpp	/^using Json = nlohmann::json;$/;"	t	namespace:ipmi	typeref:typename:nlohmann::json
Json	user_channel/cipher_mgmt.cpp	/^using Json = nlohmann::json;$/;"	t	namespace:ipmi	typeref:typename:nlohmann::json	file:
Json	user_channel/user_mgmt.cpp	/^using Json = nlohmann::json;$/;"	t	namespace:ipmi	typeref:typename:nlohmann::json	file:
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::Callout	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::AutoTestSimple	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::org::open_power::Common::Callout::Procedure	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::org::open_power::Host::Access::ReadCFAM	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::org::open_power::Host::Access::WriteCFAM	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::org::open_power::Host::Checkstop	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::org::open_power::Host::Event	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::org::open_power::Host::MaintenanceProcedure	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::org::open_power::Host::WatchdogTimedOut	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::Device	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::GPIO	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::IIC	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::IPMISensor	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::Inventory	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::Open	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::Seek	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::Write	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::InternalFailure	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::InvalidArgument	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Timeout	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Control::Device::WriteFailure	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Control::Host::CommandNotSupported	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::Disabled	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::QuotaExceeded	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Sensor::Device::ReadFailure	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::ERR;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::State::Host::SoftOffTimeout	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::INFO;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::INFO;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:auto
L	elog-errors.hpp	/^    static constexpr auto L = level::INFO;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:auto
LENGTH_MASK	sensorhandler.hpp	/^static const uint8_t LENGTH_MASK = 0x1F;$/;"	v	typeref:typename:const uint8_t
LanParam	transporthandler.hpp	/^enum class LanParam : uint8_t$/;"	g	namespace:ipmi::transport	typeref:typename:uint8_t
LegacyRouter	ipmid-new.cpp	/^class LegacyRouter : public oem::Router$/;"	c	namespace:oem	file:
Lock	user_channel/shadowlock.hpp	/^    Lock()$/;"	f	class:phosphor::user::shadow::Lock
Lock	user_channel/shadowlock.hpp	/^class Lock$/;"	c	namespace:phosphor::user::shadow
MAC	transporthandler.hpp	/^    MAC = 5,$/;"	e	enum:ipmi::transport::LanParam
MAC_ADDRESS_FORMAT	include/ipmid/types.hpp	/^constexpr auto MAC_ADDRESS_FORMAT = "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx";$/;"	v	namespace:ipmi::network	typeref:typename:auto
MAC_INTERFACE	chassishandler.cpp	/^constexpr auto MAC_INTERFACE = "xyz.openbmc_project.Network.MACAddress";$/;"	v	typeref:typename:auto
MANAGEABILITY_ACCESS_ATTRIBUTES	dcmihandler.hpp	/^    MANAGEABILITY_ACCESS_ATTRIBUTES = 0x04, \/\/!< Manageability Access Attributes$/;"	e	enum:dcmi::DCMICapParameters
MANDATORY_PLAT_ATTRIBUTES	dcmihandler.hpp	/^    MANDATORY_PLAT_ATTRIBUTES = 0x02,       \/\/!< Mandatory Platform Attributes$/;"	e	enum:dcmi::DCMICapParameters
MAPPER_BUSNAME	sensordatahandler.cpp	/^static constexpr auto MAPPER_BUSNAME = "xyz.openbmc_project.ObjectMapper";$/;"	v	namespace:ipmi::sensor	typeref:typename:auto	file:
MAPPER_BUS_NAME	include/ipmid/utils.hpp	/^constexpr auto MAPPER_BUS_NAME = "xyz.openbmc_project.ObjectMapper";$/;"	v	namespace:ipmi	typeref:typename:auto
MAPPER_INTERFACE	sensordatahandler.cpp	/^static constexpr auto MAPPER_INTERFACE = "xyz.openbmc_project.ObjectMapper";$/;"	v	namespace:ipmi::sensor	typeref:typename:auto	file:
MAPPER_INTF	include/ipmid/utils.hpp	/^constexpr auto MAPPER_INTF = "xyz.openbmc_project.ObjectMapper";$/;"	v	namespace:ipmi	typeref:typename:auto
MAPPER_OBJ	include/ipmid/utils.hpp	/^constexpr auto MAPPER_OBJ = "\/xyz\/openbmc_project\/object_mapper";$/;"	v	namespace:ipmi	typeref:typename:auto
MAPPER_PATH	sensordatahandler.cpp	/^static constexpr auto MAPPER_PATH = "\/xyz\/openbmc_project\/object_mapper";$/;"	v	namespace:ipmi::sensor	typeref:typename:auto	file:
MAX_DBUS_PATH	sensorhandler.hpp	/^#define MAX_DBUS_PATH /;"	d
MAX_IPMI_BUFFER	include/ipmid/api.h	/^#define MAX_IPMI_BUFFER /;"	d
MAX_IPV6_DYNAMIC_ADDRESSES	transporthandler.hpp	/^constexpr uint8_t MAX_IPV6_DYNAMIC_ADDRESSES = 15;$/;"	v	namespace:ipmi::transport	typeref:typename:uint8_t
MAX_IPV6_STATIC_ADDRESSES	transporthandler.hpp	/^constexpr uint8_t MAX_IPV6_STATIC_ADDRESSES = 15;$/;"	v	namespace:ipmi::transport	typeref:typename:uint8_t
META_PASSWD_SIG	user_channel/passwd_mgr.cpp	/^#define META_PASSWD_SIG /;"	d	file:
METHOD_GET	include/ipmid/utils.hpp	/^constexpr auto METHOD_GET = "Get";$/;"	v	namespace:ipmi	typeref:typename:auto
METHOD_GET_ALL	include/ipmid/utils.hpp	/^constexpr auto METHOD_GET_ALL = "GetAll";$/;"	v	namespace:ipmi	typeref:typename:auto
METHOD_SET	include/ipmid/utils.hpp	/^constexpr auto METHOD_SET = "Set";$/;"	v	namespace:ipmi	typeref:typename:auto
MaintenanceProcedure	elog-errors.hpp	/^struct MaintenanceProcedure$/;"	s	namespace:phosphor::logging::org::open_power::Host
MaintenanceProcedure	error-HostEvent.hpp	/^struct MaintenanceProcedure final : public sdbusplus::exception_t$/;"	s	namespace:sdbusplus::org::open_power::Host::Error
MakeRouter	test/oemrouter_unittest.cpp	/^void MakeRouter()$/;"	f	namespace:oem::__anonba15ac260110	typeref:typename:void
ManagedEntry	dbus-sdr/storagecommands.cpp	/^using ManagedEntry = std::pair<sdbusplus::message::object_path, ObjectType>;$/;"	t	namespace:ipmi::storage	typeref:typename:std::pair<sdbusplus::message::object_path,ObjectType>	file:
ManagedObjectType	dbus-sdr/storagecommands.cpp	/^using ManagedObjectType =$/;"	t	namespace:ipmi::storage	typeref:typename:boost::container::flat_map<sdbusplus::message::object_path,ObjectType>	file:
Manager	host-cmd-manager.cpp	/^Manager::Manager(sdbusplus::bus::bus& bus) :$/;"	f	class:phosphor::host::command::Manager
Manager	host-cmd-manager.hpp	/^class Manager$/;"	c	namespace:phosphor::host::command
MapperResponse	settings.cpp	/^    using MapperResponse = std::map<Path, std::map<Service, Interfaces>>;$/;"	t	function:settings::Objects::Objects	typeref:typename:std::map<Path,std::map<Service,Interfaces>>	file:
MapperResponseType	sensordatahandler.hpp	/^using MapperResponseType = std::map<Path, std::map<Service, Interfaces>>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<Path,std::map<Service,Interfaces>>
Message	selutility.hpp	/^using Message = std::string;$/;"	t	namespace:ipmi::sel	typeref:typename:std::string
MetaPassStruct	user_channel/passwd_mgr.cpp	/^struct MetaPassStruct$/;"	s	namespace:ipmi	file:
Multiplier	include/ipmid/types.hpp	/^using Multiplier = uint16_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:uint16_t
Mutability	include/ipmid/types.hpp	/^enum class Mutability$/;"	g	namespace:ipmi::sensor
NETFUN_APP	include/ipmid/api.h	/^    NETFUN_APP = 0x06,$/;"	e	enum:ipmi_net_fns
NETFUN_BRIDGE	include/ipmid/api.h	/^    NETFUN_BRIDGE = 0x02,$/;"	e	enum:ipmi_net_fns
NETFUN_CHASSIS	include/ipmid/api.h	/^    NETFUN_CHASSIS = 0x00,$/;"	e	enum:ipmi_net_fns
NETFUN_FIRMWARE	include/ipmid/api.h	/^    NETFUN_FIRMWARE = 0x08,$/;"	e	enum:ipmi_net_fns
NETFUN_GRPEXT	include/ipmid/api.h	/^    NETFUN_GRPEXT = 0x2c,$/;"	e	enum:ipmi_net_fns
NETFUN_IBM_OEM	include/ipmid/api.h	/^    NETFUN_IBM_OEM = 0x3A$/;"	e	enum:ipmi_net_fns
NETFUN_NONE	include/ipmid/api.h	/^    NETFUN_NONE = 0x30,$/;"	e	enum:ipmi_net_fns
NETFUN_OEM	include/ipmid/api.h	/^    NETFUN_OEM = 0x32,$/;"	e	enum:ipmi_net_fns
NETFUN_OEM_GROUP	include/ipmid/api.h	/^    NETFUN_OEM_GROUP = 0x2e,$/;"	e	enum:ipmi_net_fns
NETFUN_SENSOR	include/ipmid/api.h	/^    NETFUN_SENSOR = 0x04,$/;"	e	enum:ipmi_net_fns
NETFUN_STORAGE	include/ipmid/api.h	/^    NETFUN_STORAGE = 0x0a,$/;"	e	enum:ipmi_net_fns
NETFUN_TRANSPORT	include/ipmid/api.h	/^    NETFUN_TRANSPORT = 0x0c,$/;"	e	enum:ipmi_net_fns
NONE	include/ipmid/types.hpp	/^    NONE,     \/\/ No skip defined$/;"	e	enum:ipmi::sensor::SkipAssertion
NON_CRITICAL_HIGH_MASK	include/ipmid/types.hpp	/^    NON_CRITICAL_HIGH_MASK = 0x08,$/;"	e	enum:ipmi::sensor::ThresholdMask
NON_CRITICAL_LOW_MASK	include/ipmid/types.hpp	/^    NON_CRITICAL_LOW_MASK = 0x01,$/;"	e	enum:ipmi::sensor::ThresholdMask
NetFn	include/ipmid/api-types.hpp	/^using NetFn = uint8_t;$/;"	t	namespace:ipmi	typeref:typename:uint8_t
Network Configuration	docs/ipmitool-commands-cheatsheet.md	/^## Network Configuration$/;"	s
NoResource	user_channel/user_mgmt.cpp	/^using NoResource =$/;"	t	namespace:ipmi	typeref:typename:sdbusplus::xyz::openbmc_project::User::Common::Error::NoResource	file:
None	app/watchdog.cpp	/^    None = 0x0,$/;"	e	enum:IpmiAction	file:
None	include/ipmid/api-types.hpp	/^    None = 0x00,$/;"	e	enum:ipmi::Privilege
NumInstances	dcmihandler.hpp	/^using NumInstances = size_t;$/;"	t	namespace:dcmi	typeref:typename:size_t
Number	include/ipmid/iana.hpp	/^using Number = std::uint32_t; \/\/ smallest standard size >= 24.$/;"	t	namespace:oem	typeref:typename:std::uint32_t
OEM	app/watchdog.cpp	/^    OEM = 0x5,$/;"	e	enum:IpmiTimerUse	file:
OEM Extensions, Block Transfer Transport Example.	docs/oem-extension-numbering.md	/^### OEM Extensions, Block Transfer Transport Example.$/;"	S
OEM Request	docs/oem-extension-numbering.md	/^#### OEM Request$/;"	t
OEM Response	docs/oem-extension-numbering.md	/^#### OEM Response$/;"	t
OEMCmd	host-interface.cpp	/^using OEMCmd = uint8_t;$/;"	t	namespace:phosphor::host::command	typeref:typename:uint8_t	file:
OESDK_TESTCASE_FLAGS	configure.ac	/^    AC_SUBST([OESDK_TESTCASE_FLAGS], [$testcase_flags])$/;"	s
OFFSET	elog-errors.hpp	/^    explicit constexpr OFFSET(int64_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::OFFSET
OFFSET	elog-errors.hpp	/^    using OFFSET = _Seek::OFFSET;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Seek	typeref:typename:_Seek::OFFSET
OFFSET	elog-errors.hpp	/^struct OFFSET$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File::_Seek
OPEN_SESSION_REQUEST	user_channel/channel_layer.hpp	/^    OPEN_SESSION_REQUEST = 0x10,$/;"	e	enum:ipmi::PayloadType
OPEN_SESSION_RESPONSE	user_channel/channel_layer.hpp	/^    OPEN_SESSION_RESPONSE = 0x11,$/;"	e	enum:ipmi::PayloadType
OPTIONAL_PLAT_ATTRIBUTES	dcmihandler.hpp	/^    OPTIONAL_PLAT_ATTRIBUTES = 0x03,        \/\/!< Optional Platform Attributes$/;"	e	enum:dcmi::DCMICapParameters
OSLoad	app/watchdog.cpp	/^    OSLoad = 0x3,$/;"	e	enum:IpmiTimerUse	file:
Object	include/ipmid/types.hpp	/^using Object = sdbusplus::message::object_path;$/;"	t	namespace:ipmi::sensor	typeref:typename:sdbusplus::message::object_path
ObjectLookupCache	transporthandler.hpp	/^    ObjectLookupCache(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	class:ipmi::transport::ObjectLookupCache
ObjectLookupCache	transporthandler.hpp	/^class ObjectLookupCache$/;"	c	namespace:ipmi::transport
ObjectMap	include/ipmid/types.hpp	/^using ObjectMap = std::map<Object, InterfaceMap>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<Object,InterfaceMap>
ObjectPath	dcmihandler.hpp	/^using ObjectPath = std::string;$/;"	t	namespace:dcmi::assettag	typeref:typename:std::string
ObjectPaths	selutility.hpp	/^using ObjectPaths = std::vector<std::string>;$/;"	t	namespace:ipmi::sel	typeref:typename:std::vector<std::string>
ObjectTree	dcmihandler.hpp	/^using ObjectTree = std::map<ObjectPath, std::map<Service, Interfaces>>;$/;"	t	namespace:dcmi::assettag	typeref:typename:std::map<ObjectPath,std::map<Service,Interfaces>>
ObjectTree	include/ipmid/types.hpp	/^using ObjectTree =$/;"	t	namespace:ipmi	typeref:typename:std::map<DbusObjectPath,std::map<DbusService,std::vector<DbusInterface>>>
ObjectType	dbus-sdr/storagecommands.cpp	/^using ObjectType =$/;"	t	namespace:ipmi::storage	typeref:typename:boost::container::flat_map<std::string,boost::container::flat_map<std::string,Value>>	file:
ObjectValueTree	include/ipmid/types.hpp	/^using ObjectValueTree =$/;"	t	namespace:ipmi	typeref:typename:std::map<sdbusplus::message::object_path,DbusInterfaceMap>
Objects	settings.cpp	/^Objects::Objects(sdbusplus::bus::bus& bus,$/;"	f	class:settings::Objects
Objects	settings.hpp	/^struct Objects$/;"	s	namespace:settings
Oem	include/ipmid/api-types.hpp	/^    Oem,$/;"	e	enum:ipmi::Privilege
Offset	include/ipmid/types.hpp	/^using Offset = uint8_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:uint8_t
OffsetB	include/ipmid/types.hpp	/^using OffsetB = int16_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:int16_t
OffsetValueMap	include/ipmid/types.hpp	/^using OffsetValueMap = std::map<Offset, Values>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<Offset,Values>
OneTimeEnabled	settings.hpp	/^using OneTimeEnabled = bool;$/;"	t	namespace:settings::boot	typeref:typename:bool
Open	elog-errors.hpp	/^struct Open$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File
OpenBMC OEM Cmd Codes	docs/oem-extension-numbering.md	/^### OpenBMC OEM Cmd Codes$/;"	S
Operator	include/ipmid/api-types.hpp	/^    Operator,$/;"	e	enum:ipmi::Privilege
Organizing Commits	docs/contributing.md	/^## Organizing Commits$/;"	s
PATH	elog-errors.hpp	/^    explicit constexpr PATH(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::PATH
PATH	elog-errors.hpp	/^    explicit constexpr PATH(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::PATH
PATH	elog-errors.hpp	/^    explicit constexpr PATH(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::PATH
PATH	elog-errors.hpp	/^    using PATH = _Open::PATH;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Open	typeref:typename:_Open::PATH
PATH	elog-errors.hpp	/^    using PATH = _Seek::PATH;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Seek	typeref:typename:_Seek::PATH
PATH	elog-errors.hpp	/^    using PATH = _Write::PATH;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Write	typeref:typename:_Write::PATH
PATH	elog-errors.hpp	/^struct PATH$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File::_Open
PATH	elog-errors.hpp	/^struct PATH$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File::_Seek
PATH	elog-errors.hpp	/^struct PATH$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File::_Write
PATH_ROOT	transporthandler.hpp	/^constexpr auto PATH_ROOT = "\/xyz\/openbmc_project\/network";$/;"	v	namespace:ipmi::transport	typeref:typename:auto
PATH_SYSTEMCONFIG	transporthandler.hpp	/^constexpr auto PATH_SYSTEMCONFIG = "\/xyz\/openbmc_project\/network\/config";$/;"	v	namespace:ipmi::transport	typeref:typename:auto
PCAP_INTERFACE	dcmihandler.cpp	/^constexpr auto PCAP_INTERFACE = "xyz.openbmc_project.Control.Power.Cap";$/;"	v	typeref:typename:auto
PCAP_PATH	dcmihandler.cpp	/^constexpr auto PCAP_PATH = "\/xyz\/openbmc_project\/control\/host0\/power_cap";$/;"	v	typeref:typename:auto
POWER_CAP_ENABLE_PROP	dcmihandler.cpp	/^constexpr auto POWER_CAP_ENABLE_PROP = "PowerCapEnable";$/;"	v	typeref:typename:auto
POWER_CAP_PROP	dcmihandler.cpp	/^constexpr auto POWER_CAP_PROP = "PowerCap";$/;"	v	typeref:typename:auto
POWER_READING_SENSOR	configure.ac	/^AC_DEFINE_UNQUOTED([POWER_READING_SENSOR], ["$POWER_READING_SENSOR"], [Power reading sensor conf/;"	d
PRIVILEGE_ADMIN	include/ipmid/api.h	/^    PRIVILEGE_ADMIN,$/;"	e	enum:CommandPrivilege
PRIVILEGE_CALLBACK	include/ipmid/api.h	/^    PRIVILEGE_CALLBACK = 0x01,$/;"	e	enum:CommandPrivilege
PRIVILEGE_OEM	include/ipmid/api.h	/^    PRIVILEGE_OEM,$/;"	e	enum:CommandPrivilege
PRIVILEGE_OPERATOR	include/ipmid/api.h	/^    PRIVILEGE_OPERATOR,$/;"	e	enum:CommandPrivilege
PRIVILEGE_USER	include/ipmid/api.h	/^    PRIVILEGE_USER,$/;"	e	enum:CommandPrivilege
PROCEDURE	elog-errors.hpp	/^    explicit constexpr PROCEDURE(uint32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::org::open_power::Common::Callout::_Procedure::PROCEDURE
PROCEDURE	elog-errors.hpp	/^    using PROCEDURE = _Procedure::PROCEDURE;$/;"	t	struct:phosphor::logging::org::open_power::Common::Callout::Procedure	typeref:typename:_Procedure::PROCEDURE
PROCEDURE	elog-errors.hpp	/^    using PROCEDURE = org::open_power::Common::Callout::Procedure::PROCEDURE;$/;"	t	struct:phosphor::logging::org::open_power::Host::MaintenanceProcedure	typeref:typename:org::open_power::Common::Callout::Procedure::PROCEDURE
PROCEDURE	elog-errors.hpp	/^struct PROCEDURE$/;"	s	namespace:phosphor::logging::org::open_power::Common::Callout::_Procedure
PROPERTY_ELAPSED	storagehandler.cpp	/^constexpr auto PROPERTY_ELAPSED = "Elapsed";$/;"	v	namespace:__anon0af2b4490110	typeref:typename:auto
PROP_INTF	include/ipmid/utils.hpp	/^constexpr auto PROP_INTF = "org.freedesktop.DBus.Properties";$/;"	v	namespace:ipmi	typeref:typename:auto
Pace of Review	docs/contributing.md	/^## Pace of Review$/;"	s
PackBytes	include/ipmid/message/pack.hpp	/^void PackBytes(uint8_t* pointer, const NumericType& i)$/;"	f	namespace:ipmi::message::details	typeref:typename:void
PackBytesUnaligned	include/ipmid/message/pack.hpp	/^void PackBytesUnaligned(Payload& p, const NumericType& i)$/;"	f	namespace:ipmi::message::details	typeref:typename:void
PackSingle	include/ipmid/message/pack.hpp	/^struct PackSingle$/;"	s	namespace:ipmi::message::details
PackSingle	include/ipmid/message/pack.hpp	/^struct PackSingle<Payload>$/;"	s	namespace:ipmi::message::details
PackSingle	include/ipmid/message/pack.hpp	/^struct PackSingle<bool>$/;"	s	namespace:ipmi::message::details
PackSingle	include/ipmid/message/pack.hpp	/^struct PackSingle<std::string>$/;"	s	namespace:ipmi::message::details
PackSingle	include/ipmid/message/pack.hpp	/^struct PackSingle<std::string_view>$/;"	s	namespace:ipmi::message::details
PackSingle_t	include/ipmid/message.hpp	/^using PackSingle_t = PackSingle<utility::TypeIdDowncast_t<T>>;$/;"	t	namespace:ipmi::message::details	typeref:typename:PackSingle<utility::TypeIdDowncast_t<T>>
PasswdMgr	user_channel/passwd_mgr.cpp	/^PasswdMgr::PasswdMgr()$/;"	f	class:ipmi::PasswdMgr
PasswdMgr	user_channel/passwd_mgr.hpp	/^class PasswdMgr$/;"	c	namespace:ipmi
Password	user_channel/passwd_mgr.hpp	/^    using Password = std::string;$/;"	t	class:ipmi::PasswdMgr	typeref:typename:std::string
Path	sensordatahandler.hpp	/^using Path = std::string;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::string
Path	settings.hpp	/^using Path = std::string;$/;"	t	namespace:settings	typeref:typename:std::string
Payload	include/ipmid/message.hpp	/^    explicit Payload(std::vector<uint8_t>&& data) : raw(std::move(data))$/;"	f	struct:ipmi::message::Payload
Payload	include/ipmid/message.hpp	/^struct Payload$/;"	s	namespace:ipmi::message
PayloadAccess	user_channel/user_layer.hpp	/^struct PayloadAccess$/;"	s	namespace:ipmi
PayloadLogging	test/message/payload.cpp	/^class PayloadLogging : public testing::Test$/;"	c	file:
PayloadType	user_channel/channel_layer.hpp	/^enum class PayloadType : uint8_t$/;"	g	namespace:ipmi	typeref:typename:uint8_t
PlatformEventRequest	sensorhandler.hpp	/^struct PlatformEventRequest$/;"	s
PowerButton	chassishandler.cpp	/^    PowerButton = 0x3,$/;"	e	enum:IpmiRestartCause	file:
PowerCycle	app/watchdog.cpp	/^    PowerCycle = 0x3,$/;"	e	enum:IpmiAction	file:
PowerOff	app/watchdog.cpp	/^    PowerOff = 0x2,$/;"	e	enum:IpmiAction	file:
PowerPolicyAlwaysOn	chassishandler.cpp	/^    PowerPolicyAlwaysOn = 0x6,$/;"	e	enum:IpmiRestartCause	file:
PowerPolicyPreviousState	chassishandler.cpp	/^    PowerPolicyPreviousState = 0x7,$/;"	e	enum:IpmiRestartCause	file:
PowerState	apphandler.cpp	/^enum class PowerState : uint8_t$/;"	g	namespace:acpi_state	typeref:typename:uint8_t	file:
PowerStateType	apphandler.cpp	/^enum class PowerStateType : uint8_t$/;"	g	namespace:acpi_state	typeref:typename:uint8_t	file:
PreReqOffsetValueMap	include/ipmid/types.hpp	/^using PreReqOffsetValueMap = std::map<Offset, PreReqValues>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::map<Offset,PreReqValues>
PreReqValues	include/ipmid/types.hpp	/^struct PreReqValues$/;"	s	namespace:ipmi::sensor
PrivAccess	user_channel/user_layer.hpp	/^struct PrivAccess$/;"	s	namespace:ipmi
PrivAndGroupType	user_channel/user_mgmt.cpp	/^using PrivAndGroupType = std::variant<std::string, std::vector<std::string>>;$/;"	t	namespace:ipmi	typeref:typename:std::variant<std::string,std::vector<std::string>>	file:
Privilege	include/ipmid/api-types.hpp	/^enum class Privilege : uint8_t$/;"	g	namespace:ipmi	typeref:typename:uint8_t
Procedure	elog-errors.hpp	/^struct Procedure$/;"	s	namespace:phosphor::logging::org::open_power::Common::Callout
Properties	app/watchdog_service.hpp	/^    struct Properties$/;"	s	class:WatchdogService
PropertiesCache	transporthandler.hpp	/^    using PropertiesCache = std::unordered_map<std::string, PropertyMap>;$/;"	t	class:ipmi::transport::ObjectLookupCache	typeref:typename:std::unordered_map<std::string,PropertyMap>
Property	ipmi_fru_info_area.hpp	/^using Property = std::string;$/;"	t	namespace:ipmi::fru	typeref:typename:std::string
PropertyMap	include/ipmid/types.hpp	/^using PropertyMap = ipmi::PropertyMap;$/;"	t	namespace:ipmi::sensor	typeref:typename:ipmi::PropertyMap
PropertyMap	include/ipmid/types.hpp	/^using PropertyMap = std::map<DbusProperty, Value>;$/;"	t	namespace:ipmi	typeref:typename:std::map<DbusProperty,Value>
PropertyMap	ipmi_fru_info_area.hpp	/^using PropertyMap = std::map<Property, Value>;$/;"	t	namespace:ipmi::fru	typeref:typename:std::map<Property,Value>
PropertyName	selutility.hpp	/^using PropertyName = std::string;$/;"	t	namespace:ipmi::sel	typeref:typename:std::string
PropertyType	selutility.hpp	/^using PropertyType =$/;"	t	namespace:ipmi::sel	typeref:typename:std::variant<Resolved,Id,Timestamp,Message,AdditionalData>
Quickly Running At Home	docs/testing.md	/^## Quickly Running At Home$/;"	s
QuotaExceeded	elog-errors.hpp	/^struct QuotaExceeded$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Dump::Create
RAKP1	user_channel/channel_layer.hpp	/^    RAKP1 = 0x12,$/;"	e	enum:ipmi::PayloadType
RAKP2	user_channel/channel_layer.hpp	/^    RAKP2 = 0x13,$/;"	e	enum:ipmi::PayloadType
RAKP3	user_channel/channel_layer.hpp	/^    RAKP3 = 0x14,$/;"	e	enum:ipmi::PayloadType
RAKP4	user_channel/channel_layer.hpp	/^    RAKP4 = 0x15,$/;"	e	enum:ipmi::PayloadType
REASON	elog-errors.hpp	/^    explicit constexpr REASON(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::_QuotaExceeded::REASON
REASON	elog-errors.hpp	/^    using REASON = _QuotaExceeded::REASON;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::QuotaExceeded	typeref:typename:_QuotaExceeded::REASON
REASON	elog-errors.hpp	/^struct REASON$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Dump::Create::_QuotaExceeded
ROOT	include/ipmid/utils.hpp	/^constexpr auto ROOT = "\/";$/;"	v	namespace:ipmi	typeref:typename:auto
Read	include/ipmid/types.hpp	/^    Read = 1 << 0,$/;"	e	enum:ipmi::sensor::Mutability
ReadCFAM	elog-errors.hpp	/^struct ReadCFAM$/;"	s	namespace:phosphor::logging::org::open_power::Host::Access
ReadFailure	elog-errors.hpp	/^struct ReadFailure$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Sensor::Device
Reading Output	docs/testing.md	/^## Reading Output$/;"	s
ReadingType	include/ipmid/types.hpp	/^using ReadingType = uint8_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:uint8_t
RegisterTwoWays	test/oemrouter_unittest.cpp	/^void RegisterTwoWays(ipmi_cmd_t* nextCmd)$/;"	f	namespace:oem::__anonba15ac260110	typeref:typename:void
RegisterWithRouter	test/oemrouter_unittest.cpp	/^void RegisterWithRouter(Number oen, ipmi_cmd_t cmd, Handler cb)$/;"	f	namespace:oem::__anonba15ac260110	typeref:typename:void
RemoteCommand	chassishandler.cpp	/^    RemoteCommand = 0x1,$/;"	e	enum:IpmiRestartCause	file:
Request	include/ipmid/message.hpp	/^    explicit Request(Context::ptr context, std::vector<uint8_t>&& d) :$/;"	f	struct:ipmi::message::Request
Request	include/ipmid/message.hpp	/^struct Request$/;"	s	namespace:ipmi::message
Reserved	app/watchdog.cpp	/^    Reserved = 0x0,$/;"	e	enum:IpmiTimerUse	file:
ResetButton	chassishandler.cpp	/^    ResetButton = 0x2,$/;"	e	enum:IpmiRestartCause	file:
Resolved	selutility.hpp	/^using Resolved = bool;$/;"	t	namespace:ipmi::sel	typeref:typename:bool
Response	dcmihandler.hpp	/^struct Response$/;"	s	namespace:dcmi::sensor_info
Response	dcmihandler.hpp	/^struct Response$/;"	s	namespace:dcmi::temp_readings
Response	include/ipmid/message.hpp	/^    explicit Response(Context::ptr& context) :$/;"	f	struct:ipmi::message::Response
Response	include/ipmid/message.hpp	/^struct Response$/;"	s	namespace:ipmi::message
ResponseList	dcmihandler.hpp	/^using ResponseList = std::vector<Response>;$/;"	t	namespace:dcmi::sensor_info	typeref:typename:std::vector<Response>
ResponseList	dcmihandler.hpp	/^using ResponseList = std::vector<Response>;$/;"	t	namespace:dcmi::temp_readings	typeref:typename:std::vector<Response>
ResultType	include/ipmid/handler.hpp	/^        using ResultType = boost::callable_traits::return_type_t<Handler>;$/;"	t	function:ipmi::IpmiHandler::executeCallback	typeref:typename:boost::callable_traits::return_type_t<Handler>
Reviewing Tests	docs/testing.md	/^# Reviewing Tests$/;"	c
Revision	apphandler.cpp	/^} Revision;$/;"	t	typeref:struct:__anon1df7a8b50408	file:
Router	include/ipmid/oemrouter.hpp	/^class Router$/;"	c	namespace:oem
RspType	include/ipmid/api-types.hpp	/^using RspType = std::tuple<ipmi::Cc, std::optional<std::tuple<RetTypes...>>>;$/;"	t	namespace:ipmi	typeref:typename:std::tuple<ipmi::Cc,std::optional<std::tuple<RetTypes...>>>
Run the New Tests	docs/testing.md	/^## Run the New Tests$/;"	s
Running Tests	docs/testing.md	/^# Running Tests$/;"	c
SDR_VERSION	sensorhandler.hpp	/^static const uint8_t SDR_VERSION = 0x51;$/;"	v	typeref:typename:const uint8_t
SD_JOURNAL_SUPPRESS_LOCATION	test/message/payload.cpp	/^#define SD_JOURNAL_SUPPRESS_LOCATION$/;"	d	file:
SELEventRecord	selutility.hpp	/^struct SELEventRecord$/;"	s	namespace:ipmi::sel
SELEventRecordFormat	selutility.hpp	/^union SELEventRecordFormat$/;"	u	namespace:ipmi::sel
SELOEMRecordTypeCD	selutility.hpp	/^struct SELOEMRecordTypeCD$/;"	s	namespace:ipmi::sel
SELOEMRecordTypeEF	selutility.hpp	/^struct SELOEMRecordTypeEF$/;"	s	namespace:ipmi::sel
SELRecordLength	selutility.hpp	/^constexpr size_t SELRecordLength = 16;$/;"	v	namespace:ipmi::sel	typeref:typename:size_t
SEL_OEM_ID_0	systemintfcmds.hpp	/^#define SEL_OEM_ID_0 /;"	d
SEL_RECORD_TYPE_OEM	systemintfcmds.hpp	/^#define SEL_RECORD_TYPE_OEM /;"	d
SENSORGEN	configure.ac	/^AC_SUBST(SENSORGEN)$/;"	s
SENSOR_DATA_ENTITY_RECORD	sensorhandler.hpp	/^    SENSOR_DATA_ENTITY_RECORD = 0x8,$/;"	e	enum:get_sdr::SensorDataRecordType
SENSOR_DATA_EVENT_RECORD	sensorhandler.hpp	/^    SENSOR_DATA_EVENT_RECORD = 0x3,$/;"	e	enum:get_sdr::SensorDataRecordType
SENSOR_DATA_FRU_RECORD	sensorhandler.hpp	/^    SENSOR_DATA_FRU_RECORD = 0x11,$/;"	e	enum:get_sdr::SensorDataRecordType
SENSOR_DATA_FULL_RECORD	sensorhandler.hpp	/^    SENSOR_DATA_FULL_RECORD = 0x1,$/;"	e	enum:get_sdr::SensorDataRecordType
SENSOR_SCALE_PROP	dcmihandler.cpp	/^constexpr auto SENSOR_SCALE_PROP = "Scale";$/;"	v	typeref:typename:auto
SENSOR_UNIT_AMPERES	sensorhandler.hpp	/^    SENSOR_UNIT_AMPERES = 5,$/;"	e	enum:get_sdr::SensorUnitTypeCodes
SENSOR_UNIT_DEGREES_C	sensorhandler.hpp	/^    SENSOR_UNIT_DEGREES_C = 1,$/;"	e	enum:get_sdr::SensorUnitTypeCodes
SENSOR_UNIT_JOULES	sensorhandler.hpp	/^    SENSOR_UNIT_JOULES = 7,$/;"	e	enum:get_sdr::SensorUnitTypeCodes
SENSOR_UNIT_METERS	sensorhandler.hpp	/^    SENSOR_UNIT_METERS = 34,$/;"	e	enum:get_sdr::SensorUnitTypeCodes
SENSOR_UNIT_REVOLUTIONS	sensorhandler.hpp	/^    SENSOR_UNIT_REVOLUTIONS = 41,$/;"	e	enum:get_sdr::SensorUnitTypeCodes
SENSOR_UNIT_RPM	sensorhandler.hpp	/^    SENSOR_UNIT_RPM = 18,$/;"	e	enum:get_sdr::SensorUnitTypeCodes
SENSOR_UNIT_UNSPECIFIED	sensorhandler.hpp	/^    SENSOR_UNIT_UNSPECIFIED = 0,$/;"	e	enum:get_sdr::SensorUnitTypeCodes
SENSOR_UNIT_VOLTS	sensorhandler.hpp	/^    SENSOR_UNIT_VOLTS = 4,$/;"	e	enum:get_sdr::SensorUnitTypeCodes
SENSOR_UNIT_WATTS	sensorhandler.hpp	/^    SENSOR_UNIT_WATTS = 6,$/;"	e	enum:get_sdr::SensorUnitTypeCodes
SENSOR_VALUE_INTF	dcmihandler.cpp	/^constexpr auto SENSOR_VALUE_INTF = "xyz.openbmc_project.Sensor.Value";$/;"	v	typeref:typename:auto
SENSOR_VALUE_PROP	dcmihandler.cpp	/^constexpr auto SENSOR_VALUE_PROP = "Value";$/;"	v	typeref:typename:auto
SENSOR_YAML_GEN	configure.ac	/^AC_SUBST(SENSOR_YAML_GEN)$/;"	s
SETTINGS_MATCH	chassishandler.cpp	/^constexpr auto SETTINGS_MATCH = "host0";$/;"	v	typeref:typename:auto
SETTINGS_ROOT	chassishandler.cpp	/^constexpr auto SETTINGS_ROOT = "\/";$/;"	v	typeref:typename:auto
SET_ASSET_TAG	dcmihandler.hpp	/^    SET_ASSET_TAG = 0x08,$/;"	e	enum:dcmi::Commands
SET_CONF_PARAMS	dcmihandler.hpp	/^    SET_CONF_PARAMS = 0x12,$/;"	e	enum:dcmi::Commands
SET_MGMNT_CTRL_ID_STR	dcmihandler.hpp	/^    SET_MGMNT_CTRL_ID_STR = 0x0A,$/;"	e	enum:dcmi::Commands
SET_POWER_LIMIT	dcmihandler.hpp	/^    SET_POWER_LIMIT = 0x04,$/;"	e	enum:dcmi::Commands
SLAAC	transporthandler.hpp	/^    SLAAC = 1,$/;"	e	enum:ipmi::transport::IPv6Source
SLAAC	transporthandler.hpp	/^constexpr uint8_t SLAAC = 1;$/;"	v	namespace:ipmi::transport::IPv6StatusFlag	typeref:typename:uint8_t
SMSOS	app/watchdog.cpp	/^    SMSOS = 0x4,$/;"	e	enum:IpmiTimerUse	file:
SOFT_OFF	systemintfcmds.hpp	/^#define SOFT_OFF /;"	d
SOL	user_channel/channel_layer.hpp	/^    SOL = 0x01,$/;"	e	enum:ipmi::PayloadType
STRING	elog-errors.hpp	/^    explicit constexpr STRING(const char* a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_AutoTestSimple::STRING
STRING	elog-errors.hpp	/^    using STRING = _AutoTestSimple::STRING;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::AutoTestSimple	typeref:typename:_AutoTestSimple::STRING
STRING	elog-errors.hpp	/^struct STRING$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_AutoTestSimple
SUBDIRS	Makefile.am	/^SUBDIRS = include libipmid libipmid-host user_channel . test softoff$/;"	m
SUPPORTED_DCMI_CAPS	dcmihandler.hpp	/^    SUPPORTED_DCMI_CAPS = 0x01,             \/\/!< Supported DCMI Capabilities$/;"	e	enum:dcmi::DCMICapParameters
SYSTEM_INTERFACE	include/ipmid/api.h	/^    SYSTEM_INTERFACE = 0xFF,$/;"	e	enum:CommandPrivilege
SYSTEM_SENSOR	configure.ac	/^AC_DEFINE(SYSTEM_SENSOR, "\/xyz\/openbmc_project\/inventory\/system", [The inventory path to the/;"	d
Scale	include/ipmid/types.hpp	/^using Scale = int16_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:int16_t
ScaledOffset	include/ipmid/types.hpp	/^using ScaledOffset = double;$/;"	t	namespace:ipmi::sensor	typeref:typename:double
SdrRepositoryInfoOps	include/dbus-sdr/storagecommands.hpp	/^enum class SdrRepositoryInfoOps : uint8_t$/;"	g	typeref:typename:uint8_t
Section	ipmi_fru_info_area.hpp	/^using Section = std::string;$/;"	t	namespace:ipmi::fru	typeref:typename:std::string
SecureAllocator	user_channel/user_mgmt.hpp	/^    SecureAllocator() throw() : std::allocator<T>()$/;"	f	class:ipmi::SecureAllocator
SecureAllocator	user_channel/user_mgmt.hpp	/^    SecureAllocator(const SecureAllocator& a) throw() : std::allocator<T>(a)$/;"	f	class:ipmi::SecureAllocator
SecureAllocator	user_channel/user_mgmt.hpp	/^    SecureAllocator(const SecureAllocator<U>& a) throw() : std::allocator<T>(a)$/;"	f	class:ipmi::SecureAllocator
SecureAllocator	user_channel/user_mgmt.hpp	/^class SecureAllocator : public std::allocator<T>$/;"	c	namespace:ipmi
SecureString	user_channel/user_mgmt.hpp	/^using SecureString = std::basic_string<char, std::char_traits<char>,$/;"	t	namespace:ipmi	typeref:typename:std::basic_string<char,std::char_traits<char>,ipmi::SecureAllocator<char>>
Seek	elog-errors.hpp	/^struct Seek$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File
SelData	include/ipmid/types.hpp	/^struct SelData$/;"	s	namespace:ipmi::sensor
Sending Patches	docs/contributing.md	/^## Sending Patches$/;"	s
Sending for Review	docs/testing.md	/^## Sending for Review$/;"	s
Sensor	elog-errors.hpp	/^namespace Sensor$/;"	n	namespace:phosphor::logging::xyz::openbmc_project
Sensor	elog-errors.hpp	/^namespace Sensor$/;"	n	namespace:sdbusplus::xyz::openbmc_project
SensorCache	dbus-sdr/sensorcommands.cpp	/^static boost::container::flat_map<std::string, ObjectValueTree> SensorCache;$/;"	v	namespace:ipmi	typeref:typename:boost::container::flat_map<std::string,ObjectValueTree>	file:
SensorDataEntityRecord	sensorhandler.hpp	/^struct SensorDataEntityRecord$/;"	s	namespace:get_sdr
SensorDataEntityRecordBody	sensorhandler.hpp	/^struct SensorDataEntityRecordBody$/;"	s	namespace:get_sdr
SensorDataEntityRecordKey	sensorhandler.hpp	/^struct SensorDataEntityRecordKey$/;"	s	namespace:get_sdr
SensorDataEventRecord	sensorhandler.hpp	/^struct SensorDataEventRecord$/;"	s	namespace:get_sdr
SensorDataEventRecordBody	sensorhandler.hpp	/^struct SensorDataEventRecordBody$/;"	s	namespace:get_sdr
SensorDataFruRecord	sensorhandler.hpp	/^struct SensorDataFruRecord$/;"	s	namespace:get_sdr
SensorDataFruRecordBody	sensorhandler.hpp	/^struct SensorDataFruRecordBody$/;"	s	namespace:get_sdr
SensorDataFruRecordKey	sensorhandler.hpp	/^struct SensorDataFruRecordKey$/;"	s	namespace:get_sdr
SensorDataFullRecord	sensorhandler.hpp	/^struct SensorDataFullRecord$/;"	s	namespace:get_sdr
SensorDataFullRecordBody	sensorhandler.hpp	/^struct SensorDataFullRecordBody$/;"	s	namespace:get_sdr
SensorDataRecordHeader	sensorhandler.hpp	/^struct SensorDataRecordHeader$/;"	s	namespace:get_sdr
SensorDataRecordKey	sensorhandler.hpp	/^struct SensorDataRecordKey$/;"	s	namespace:get_sdr
SensorDataRecordType	sensorhandler.hpp	/^enum SensorDataRecordType$/;"	g	namespace:get_sdr
SensorFunctionalError	sensorhandler.hpp	/^struct SensorFunctionalError : public std::exception$/;"	s
SensorName	include/ipmid/types.hpp	/^using SensorName = std::string;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::string
SensorNumMap	include/dbus-sdr/sdrutils.hpp	/^using SensorNumMap = boost::bimap<int, std::string>;$/;"	t	typeref:typename:boost::bimap<int,std::string>
SensorSubTree	include/dbus-sdr/sdrutils.hpp	/^using SensorSubTree = boost::container::flat_map<$/;"	t
SensorThresholdResp	include/dbus-sdr/sensorcommands.hpp	/^struct SensorThresholdResp$/;"	s
SensorTypeCodes	include/dbus-sdr/sdrutils.hpp	/^enum class SensorTypeCodes : uint8_t$/;"	g	typeref:typename:uint8_t
SensorUnitTypeCodes	sensorhandler.hpp	/^enum SensorUnitTypeCodes$/;"	g	namespace:get_sdr
SensorUnits	include/dbus-sdr/storagecommands.hpp	/^enum class SensorUnits : uint8_t$/;"	g	typeref:typename:uint8_t
Service	dcmihandler.hpp	/^using Service = std::string;$/;"	t	namespace:dcmi::assettag	typeref:typename:std::string
Service	sensordatahandler.hpp	/^using Service = std::string;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::string
Service	settings.hpp	/^using Service = std::string;$/;"	t	namespace:settings	typeref:typename:std::string
ServiceCache	include/ipmid/utils.hpp	/^class ServiceCache$/;"	c	namespace:ipmi
ServiceCache	libipmid/utils.cpp	/^ServiceCache::ServiceCache(const std::string& intf, const std::string& path) :$/;"	f	class:ipmi::ServiceCache
ServiceCache	libipmid/utils.cpp	/^ServiceCache::ServiceCache(std::string&& intf, std::string&& path) :$/;"	f	class:ipmi::ServiceCache
ServicePath	sensordatahandler.hpp	/^using ServicePath = std::pair<Path, Service>;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::pair<Path,Service>
SessionDetails	apphandler.cpp	/^using SessionDetails =$/;"	t	typeref:typename:std::tuple<uint2_t,uint6_t,uint4_t,uint4_t,uint4_t,uint4_t,uint32_t,std::array<uint8_t,macAddrLen>,uint16_t>	file:
Set the IP Address	docs/ipmitool-commands-cheatsheet.md	/^### Set the IP Address$/;"	S
Set the VLAN	docs/ipmitool-commands-cheatsheet.md	/^### Set the VLAN$/;"	S
Set the default gateway	docs/ipmitool-commands-cheatsheet.md	/^### Set the default gateway$/;"	S
Set the interface mode	docs/ipmitool-commands-cheatsheet.md	/^### Set the interface mode$/;"	S
Set the network mask	docs/ipmitool-commands-cheatsheet.md	/^### Set the network mask$/;"	S
SetAssetTagRequest	dcmihandler.hpp	/^struct SetAssetTagRequest$/;"	s	namespace:dcmi
SetAssetTagResponse	dcmihandler.hpp	/^struct SetAssetTagResponse$/;"	s	namespace:dcmi
SetConfParamsRequest	dcmihandler.hpp	/^struct SetConfParamsRequest$/;"	s	namespace:dcmi
SetMgmntCtrlIdStrRequest	dcmihandler.hpp	/^struct SetMgmntCtrlIdStrRequest$/;"	s	namespace:dcmi
SetMgmntCtrlIdStrResponse	dcmihandler.hpp	/^struct SetMgmntCtrlIdStrResponse$/;"	s	namespace:dcmi
SetPowerLimitRequest	dcmihandler.hpp	/^struct SetPowerLimitRequest$/;"	s	namespace:dcmi
SetSensorReadingReq	include/ipmid/types.hpp	/^struct SetSensorReadingReq$/;"	s	namespace:ipmi::sensor
SetStatus	transporthandler.hpp	/^    SetStatus = 0,$/;"	e	enum:ipmi::transport::LanParam
SetStatus	transporthandler.hpp	/^enum class SetStatus : uint8_t$/;"	g	namespace:ipmi::transport	typeref:typename:uint8_t
SetUp	test/message/payload.cpp	/^    void SetUp()$/;"	f	class:PayloadLogging	typeref:typename:void	file:
SetUserNameReq	user_channel/usercommands.cpp	/^struct SetUserNameReq$/;"	s	namespace:ipmi	file:
SetUserPasswordReq	user_channel/usercommands.cpp	/^struct SetUserPasswordReq$/;"	s	namespace:ipmi	file:
Setting Up Your Environment	docs/testing.md	/^## Setting Up Your Environment$/;"	s
Sign	dcmihandler.hpp	/^using Sign = bool;$/;"	t	namespace:dcmi::temp_readings	typeref:typename:bool
SignalHandler	libipmid/signals.cpp	/^    SignalHandler(std::shared_ptr<boost::asio::io_context>& io, int sigNum) :$/;"	f	class:__anonf9df85400110::SignalHandler	file:
SignalHandler	libipmid/signals.cpp	/^class SignalHandler$/;"	c	namespace:__anonf9df85400110	file:
SignalResponse	include/ipmid/api.hpp	/^enum class SignalResponse : int$/;"	g	typeref:typename:int
Size	include/ipmid/message/types.hpp	/^struct Size$/;"	s	namespace:types::details
Sketch of OpenBMC OEM message formats	docs/oem-extension-numbering.md	/^# Sketch of OpenBMC OEM message formats$/;"	c
SkipAssertion	include/ipmid/types.hpp	/^enum class SkipAssertion$/;"	g	namespace:ipmi::sensor
SoftOffTimeout	elog-errors.hpp	/^struct SoftOffTimeout$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::State::Host
SoftPowerOff	softoff/softoff.hpp	/^    SoftPowerOff(sdbusplus::bus::bus& bus, sd_event* event,$/;"	f	class:phosphor::ipmi::SoftPowerOff
SoftPowerOff	softoff/softoff.hpp	/^class SoftPowerOff$/;"	c	namespace:phosphor::ipmi
SoftReset	chassishandler.cpp	/^    SoftReset = 0xa,$/;"	e	enum:IpmiRestartCause	file:
State	elog-errors.hpp	/^namespace State$/;"	n	namespace:phosphor::logging::xyz::openbmc_project
State	elog-errors.hpp	/^namespace State$/;"	n	namespace:sdbusplus::xyz::openbmc_project
State	include/ipmid/sessiondef.hpp	/^enum class State : uint8_t$/;"	g	namespace:session	typeref:typename:uint8_t
Static	transporthandler.hpp	/^    Static = 0,$/;"	e	enum:ipmi::transport::IPv6Source
Static	transporthandler.hpp	/^    Static = 1,$/;"	e	enum:ipmi::transport::IPSrc
Static	transporthandler.hpp	/^constexpr uint8_t Static = 0;$/;"	v	namespace:ipmi::transport::IPv6RouterControlFlag	typeref:typename:uint8_t
SubnetMask	transporthandler.hpp	/^    SubnetMask = 6,$/;"	e	enum:ipmi::transport::LanParam
SysInfoParamStore	sys_info_param.hpp	/^class SysInfoParamStore : public SysInfoParamStoreIntf$/;"	c
SysInfoParamStoreIntf	sys_info_param.hpp	/^class SysInfoParamStoreIntf$/;"	c
TEST	test/dbus-sdr/sensorcommands_unittest.cpp	/^TEST(sensorUtils, TestRanges)$/;"	f
TEST	test/dbus-sdr/sensorcommands_unittest.cpp	/^TEST(sensorutils, TranslateToIPMI)$/;"	f
TEST	test/entitymap_json_unittest.cpp	/^TEST(ValidateJson, AllValidEntryReturnsExpectedMap)$/;"	f	namespace:ipmi::sensor::__anon8b1a09f80110
TEST	test/entitymap_json_unittest.cpp	/^TEST(ValidateJson, EntryHasInsufficientContainerEntryCountReturnsEmpty)$/;"	f	namespace:ipmi::sensor::__anon8b1a09f80110
TEST	test/entitymap_json_unittest.cpp	/^TEST(ValidateJson, FailWithMissingFieldReturnsEmpty)$/;"	f	namespace:ipmi::sensor::__anon8b1a09f80110
TEST	test/entitymap_json_unittest.cpp	/^TEST(ValidateJson, FailWithNonArrayReturnsEmpty)$/;"	f	namespace:ipmi::sensor::__anon8b1a09f80110
TEST	test/entitymap_json_unittest.cpp	/^TEST(ValidateJson, ThereAreTwoEntriesBothValidReturnsBoth)$/;"	f	namespace:ipmi::sensor::__anon8b1a09f80110
TEST	test/entitymap_json_unittest.cpp	/^TEST(ValidateJson, ThereAreTwoEntriesOneInvalidReturnsEmpty)$/;"	f	namespace:ipmi::sensor::__anon8b1a09f80110
TEST	test/message/pack.cpp	/^TEST(PackAdvanced, BoolsnBitfieldsnFixedIntsOhMy)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackAdvanced, ComplexOptionalTuple)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackAdvanced, TupleInts)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackAdvanced, Uints)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackAdvanced, UnalignedBitPacking)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackAdvanced, VariantArray)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Array4xUint32)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Array4xUint8)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Bitset32)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Bitset3Bitset5)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Bitset8)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Boolx8)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, OptionalContainsValue)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, OptionalEmpty)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Payload)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, PayloadOtherUnaligned)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, PayloadUnaligned)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, PrependPayload)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, PrependPayloadOtherUnaligned)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, PrependPayloadUnaligned)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, StringView)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, StringViewUnaligned)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Tuple)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Uint16)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Uint24)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Uint32)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Uint3Uint5)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Uint64)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, Uint8)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, VectorUint32)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, VectorUint8)$/;"	f
TEST	test/message/pack.cpp	/^TEST(PackBasics, VectorUnaligned)$/;"	f
TEST	test/message/payload.cpp	/^TEST(Payload, Data)$/;"	f
TEST	test/message/payload.cpp	/^TEST(Payload, InputSize)$/;"	f
TEST	test/message/payload.cpp	/^TEST(Payload, OutputSize)$/;"	f
TEST	test/message/payload.cpp	/^TEST(Payload, Resize)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, DiscardBits)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, FillBits)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, FillBitsNotEnoughBytes)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, FillBitsTooManyBits)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, FullyUnpacked)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, PartialPayload)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, Pop)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, PopBits)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, PopBitsNoFillBits)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, ResetInternal)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadRequest, ResetUsage)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadResponse, Append)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadResponse, AppendBits)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadResponse, AppendDrain)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadResponse, Drain15Bits)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadResponse, Drain15BitsWholeBytesOnly)$/;"	f
TEST	test/message/payload.cpp	/^TEST(PayloadResponse, Drain16Bits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Arrays, Array4xUint32)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Arrays, Array4xUint32InsufficientBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Arrays, Array4xUint32TooManyBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Arrays, Array4xUint8)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Arrays, Array4xUint8InsufficientBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Arrays, Array4xUint8TooManyBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bitsets, Bitset31TooManyBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bitsets, Bitset32)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bitsets, Bitset33InsufficientBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bitsets, Bitset3Bitset4TooManyBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bitsets, Bitset3Bitset5)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bitsets, Bitset3Bitset6InsufficientBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bitsets, Bitset7TooManyBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bitsets, Bitset8)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bitsets, Bitset9InsufficientBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bools, Boolx8)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bools, Boolx8InsufficientBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Bools, Boolx8TooManyBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(FixedInts, Uint24InsufficientBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(FixedInts, Uint24TooManyBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(FixedInts, Uint3Uint4TooManyBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(FixedInts, Uint3Uint5)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(FixedInts, Uint3Uint6InsufficientBits)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint16)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint16InsufficientBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint16TooManyBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint24)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint32)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint32InsufficientBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint32TooManyBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint64)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint64InsufficientBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint64TooManyBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint8)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint8InsufficientBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Uints, Uint8TooManyBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(UnpackAdvanced, BoolsnBitfieldsnFixedIntsOhMy)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(UnpackAdvanced, OptionalInsufficientBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(UnpackAdvanced, OptionalOk)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(UnpackAdvanced, TupleInts)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(UnpackAdvanced, Uints)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(UnpackAdvanced, UnalignedBitUnpacking)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Vectors, VectorEmptyOk)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Vectors, VectorOfTuplesInsufficientBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Vectors, VectorOfTuplesOk)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Vectors, VectorUint32)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Vectors, VectorUint32NonIntegralBytes)$/;"	f
TEST	test/message/unpack.cpp	/^TEST(Vectors, VectorUint8)$/;"	f
TEST	test/oemrouter_unittest.cpp	/^TEST(OemRouterTest, ActivateRouterSetsLastNetToOEMGROUP)$/;"	f	namespace:oem
TEST	test/oemrouter_unittest.cpp	/^TEST(OemRouterTest, CommandsAreRejectedIfInvalid)$/;"	f	namespace:oem
TEST	test/oemrouter_unittest.cpp	/^TEST(OemRouterTest, MakeRouterProducesConsistentSingleton)$/;"	f	namespace:oem
TEST	test/oemrouter_unittest.cpp	/^TEST(OemRouterTest, VerifiesSpecificCommandMatches)$/;"	f	namespace:oem
TEST	test/oemrouter_unittest.cpp	/^TEST(OemRouterTest, WildCardMatchesTwoRandomCodes)$/;"	f	namespace:oem
TEST	test/sample_unittest.cpp	/^TEST(FactorialTest, Zero)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(isSessionObjectMatchedTest, InvalidObjectPath)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(isSessionObjectMatchedTest, InvalidSessionHandle)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(isSessionObjectMatchedTest, InvalidSessionId)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(isSessionObjectMatchedTest, NoObjectPath)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(isSessionObjectMatchedTest, ValidSessionHandle)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(isSessionObjectMatchedTest, ValidSessionId)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(isSessionObjectMatchedTest, ZeroSessionId_ZeroSessionHandle)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(parseSessionInputPayloadTest, InvalidObjectPath)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(parseSessionInputPayloadTest, NoObjectPath)$/;"	f
TEST	test/session/closesession_unittest.cpp	/^TEST(parseSessionInputPayloadTest, ValidObjectPath)$/;"	f
TESTS	Makefile.am	/^TESTS = $(check_PROGRAMS)$/;"	m
TESTS	test/Makefile.am	/^TESTS = $(check_PROGRAMS)$/;"	m
TEST_F	test/message/payload.cpp	/^TEST_F(PayloadLogging, EnforcingChecked)$/;"	f
TEST_F	test/message/payload.cpp	/^TEST_F(PayloadLogging, EnforcingCheckedUnpacked)$/;"	f
TEST_F	test/message/payload.cpp	/^TEST_F(PayloadLogging, EnforcingException)$/;"	f
TEST_F	test/message/payload.cpp	/^TEST_F(PayloadLogging, EnforcingMove)$/;"	f
TEST_F	test/message/payload.cpp	/^TEST_F(PayloadLogging, EnforcingUnchecked)$/;"	f
TEST_F	test/message/payload.cpp	/^TEST_F(PayloadLogging, EnforcingUncheckedError)$/;"	f
TEST_F	test/message/payload.cpp	/^TEST_F(PayloadLogging, EnforcingUncheckedUnpacked)$/;"	f
TEST_F	test/message/payload.cpp	/^TEST_F(PayloadLogging, EnforcingUnpackPayload)$/;"	f
TEST_F	test/message/payload.cpp	/^TEST_F(PayloadLogging, TrailingOk)$/;"	f
TIMEOUT_IN_MSEC	elog-errors.hpp	/^    explicit constexpr TIMEOUT_IN_MSEC(uint64_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::_Timeout::TIMEOUT_IN_MSEC
TIMEOUT_IN_MSEC	elog-errors.hpp	/^    using TIMEOUT_IN_MSEC = _Timeout::TIMEOUT_IN_MSEC;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Timeout	typeref:typename:_Timeout::TIMEOUT_IN_MSEC
TIMEOUT_IN_MSEC	elog-errors.hpp	/^    using TIMEOUT_IN_MSEC =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::State::Host::SoftOffTimeout	typeref:typename:xyz::openbmc_project::Common::Timeout::TIMEOUT_IN_MSEC
TIMEOUT_IN_MSEC	elog-errors.hpp	/^struct TIMEOUT_IN_MSEC$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::_Timeout
TIME_INTERFACE	storagehandler.cpp	/^constexpr auto TIME_INTERFACE = "xyz.openbmc_project.Time.EpochTime";$/;"	v	namespace:__anon0af2b4490110	typeref:typename:auto
Temperature	dcmihandler.hpp	/^using Temperature = std::tuple<Value, Sign>;$/;"	t	namespace:dcmi::temp_readings	typeref:typename:std::tuple<Value,Sign>
TestCallout	elog-errors.hpp	/^struct TestCallout : public sdbusplus::exception_t$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog
TestErrorOne	elog-errors.hpp	/^struct TestErrorOne : public sdbusplus::exception_t$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog
TestErrorTwo	elog-errors.hpp	/^struct TestErrorTwo : public sdbusplus::exception_t$/;"	s	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog
The below two records have:	scripts/entity-example.md	/^# The below two records have:$/;"	c
This record has:	scripts/entity-example.md	/^# This record has:$/;"	c
ThresholdMask	include/ipmid/types.hpp	/^enum class ThresholdMask$/;"	g	namespace:ipmi::sensor
Timeout	elog-errors.hpp	/^struct Timeout$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common
TimerUse	app/watchdog_service.hpp	/^    using TimerUse =$/;"	t	class:WatchdogService	typeref:typename:sdbusplus::xyz::openbmc_project::State::server::Watchdog::TimerUse
Timestamp	selutility.hpp	/^using Timestamp = uint64_t;$/;"	t	namespace:ipmi::sel	typeref:typename:uint64_t
Type	include/ipmid/types.hpp	/^using Type = uint8_t;$/;"	t	namespace:ipmi::sensor	typeref:typename:uint8_t
Type12Record	include/dbus-sdr/storagecommands.hpp	/^struct Type12Record$/;"	s
UPDATE_FUNCTIONAL_ON_FAIL	configure.ac	/^        [UPDATE_FUNCTIONAL_ON_FAIL],$/;"	d
USING_ENTITY_MANAGER_DECORATORS	include/dbus-sdr/storagecommands.hpp	/^#define USING_ENTITY_MANAGER_DECORATORS$/;"	d
Unit	include/ipmid/types.hpp	/^using Unit = std::string;$/;"	t	namespace:ipmi::sensor	typeref:typename:std::string
Unknown	chassishandler.cpp	/^    Unknown = 0x0,$/;"	e	enum:IpmiRestartCause	file:
UnpackArgsType	include/ipmid/handler.hpp	/^        using UnpackArgsType = typename utility::StripFirstArgs<$/;"	t	function:ipmi::IpmiHandler::executeCallback
UnpackBytes	include/ipmid/message/unpack.hpp	/^void UnpackBytes(uint8_t* pointer, NumericType& i)$/;"	f	namespace:ipmi::message::details	typeref:typename:void
UnpackBytesUnaligned	include/ipmid/message/unpack.hpp	/^void UnpackBytesUnaligned(Payload& p, NumericType& i)$/;"	f	namespace:ipmi::message::details	typeref:typename:void
UnpackSingle	include/ipmid/message/unpack.hpp	/^struct UnpackSingle$/;"	s	namespace:ipmi::message::details
UnpackSingle	include/ipmid/message/unpack.hpp	/^struct UnpackSingle<Payload>$/;"	s	namespace:ipmi::message::details
UnpackSingle	include/ipmid/message/unpack.hpp	/^struct UnpackSingle<bool>$/;"	s	namespace:ipmi::message::details
UnpackSingle	include/ipmid/message/unpack.hpp	/^struct UnpackSingle<std::string>$/;"	s	namespace:ipmi::message::details
UnpackSingle_t	include/ipmid/message.hpp	/^using UnpackSingle_t = UnpackSingle<utility::TypeIdDowncast_t<T>>;$/;"	t	namespace:ipmi::message::details	typeref:typename:UnpackSingle<utility::TypeIdDowncast_t<T>>
Unspecified	transporthandler.hpp	/^    Unspecified = 0,$/;"	e	enum:ipmi::transport::IPSrc
User	include/ipmid/api-types.hpp	/^    User,$/;"	e	enum:ipmi::Privilege
UserAccess	user_channel/user_mgmt.cpp	/^UserAccess::UserAccess() : bus(ipmid_get_sd_bus_connection())$/;"	f	class:ipmi::UserAccess
UserAccess	user_channel/user_mgmt.hpp	/^class UserAccess$/;"	c	namespace:ipmi
UserInfo	user_channel/user_mgmt.hpp	/^struct UserInfo$/;"	s	namespace:ipmi
UserName	user_channel/passwd_mgr.hpp	/^    using UserName = std::string;$/;"	t	class:ipmi::PasswdMgr	typeref:typename:std::string
UserPrivAccess	user_channel/user_mgmt.hpp	/^struct UserPrivAccess$/;"	s	namespace:ipmi
UserUpdateEvent	user_channel/user_mgmt.hpp	/^enum class UserUpdateEvent$/;"	g	namespace:ipmi
UsersTbl	user_channel/user_mgmt.hpp	/^struct UsersTbl$/;"	s	namespace:ipmi
VLANId	transporthandler.hpp	/^    VLANId = 20,$/;"	e	enum:ipmi::transport::LanParam
VLAN_ENABLE_FLAG	transporthandler.hpp	/^constexpr uint16_t VLAN_ENABLE_FLAG = 0x8000;$/;"	v	namespace:ipmi::transport	typeref:typename:uint16_t
VLAN_VALUE_MASK	transporthandler.hpp	/^constexpr uint16_t VLAN_VALUE_MASK = 0x0fff;$/;"	v	namespace:ipmi::transport	typeref:typename:uint16_t
Value	dcmihandler.hpp	/^using Value = uint8_t;$/;"	t	namespace:dcmi::temp_readings	typeref:typename:uint8_t
Value	include/ipmid/types.hpp	/^using Value = std::variant<bool, uint8_t, int16_t, uint16_t, int32_t, uint32_t,$/;"	t	namespace:ipmi
Value	ipmi_fru_info_area.hpp	/^using Value = std::string;$/;"	t	namespace:ipmi::fru	typeref:typename:std::string
Values	include/ipmid/types.hpp	/^struct Values$/;"	s	namespace:ipmi::sensor
VariantToDoubleVisitor	include/ipmid/utils.hpp	/^struct VariantToDoubleVisitor$/;"	s	namespace:ipmi
Version	apphandler.cpp	/^using Version = sdbusplus::xyz::openbmc_project::Software::server::Version;$/;"	t	typeref:typename:sdbusplus::xyz::openbmc_project::Software::server::Version	file:
WHENCE	elog-errors.hpp	/^    explicit constexpr WHENCE(int32_t a) : _entry(entry(str, a)){};$/;"	f	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::WHENCE
WHENCE	elog-errors.hpp	/^    using WHENCE = _Seek::WHENCE;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Seek	typeref:typename:_Seek::WHENCE
WHENCE	elog-errors.hpp	/^struct WHENCE$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File::_Seek
WatchdogService	app/watchdog_service.cpp	/^WatchdogService::WatchdogService() : bus(ipmid_get_sd_bus_connection())$/;"	f	class:WatchdogService
WatchdogService	app/watchdog_service.hpp	/^class WatchdogService$/;"	c
WatchdogTimedOut	elog-errors.hpp	/^struct WatchdogTimedOut$/;"	s	namespace:phosphor::logging::org::open_power::Host
WatchdogTimer	chassishandler.cpp	/^    WatchdogTimer = 0x4,$/;"	e	enum:IpmiRestartCause	file:
What's in the box?	docs/oem-extension-numbering.md	/^### What's in the box?$/;"	S
WhitelistFilter	whitelist-filter.cpp	/^WhitelistFilter::WhitelistFilter()$/;"	f	class:ipmi::__anonc26dafe60110::WhitelistFilter
WhitelistFilter	whitelist-filter.cpp	/^class WhitelistFilter$/;"	c	namespace:ipmi::__anonc26dafe60110	file:
Write	elog-errors.hpp	/^struct Write$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Common::File
Write	include/ipmid/types.hpp	/^    Write = 1 << 1,$/;"	e	enum:ipmi::sensor::Mutability
Write Some Tests	docs/testing.md	/^## Write Some Tests$/;"	s
WriteCFAM	elog-errors.hpp	/^struct WriteCFAM$/;"	s	namespace:phosphor::logging::org::open_power::Host::Access
WriteFailure	elog-errors.hpp	/^struct WriteFailure$/;"	s	namespace:phosphor::logging::xyz::openbmc_project::Control::Device
Writing Tests	docs/testing.md	/^# Writing Tests$/;"	c
XFAIL_TESTS	Makefile.am	/^XFAIL_TESTS =$/;"	m
_AutoTestSimple	elog-errors.hpp	/^namespace _AutoTestSimple$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog
_Bar	elog-errors.hpp	/^namespace _Bar$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Bar
_Callout	elog-errors.hpp	/^namespace _Callout$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Device
_Checkstop	elog-errors.hpp	/^namespace _Checkstop$/;"	n	namespace:phosphor::logging::org::open_power::Host
_CommandNotSupported	elog-errors.hpp	/^namespace _CommandNotSupported$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Control::Host
_Device	elog-errors.hpp	/^namespace _Device$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
_Disabled	elog-errors.hpp	/^namespace _Disabled$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Dump::Create
_Event	elog-errors.hpp	/^namespace _Event$/;"	n	namespace:phosphor::logging::org::open_power::Host
_Foo	elog-errors.hpp	/^namespace _Foo$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Foo
_GPIO	elog-errors.hpp	/^namespace _GPIO$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
_IIC	elog-errors.hpp	/^namespace _IIC$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
_IPMISensor	elog-errors.hpp	/^namespace _IPMISensor$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
_InternalFailure	elog-errors.hpp	/^namespace _InternalFailure$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common
_InvalidArgument	elog-errors.hpp	/^namespace _InvalidArgument$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common
_Inventory	elog-errors.hpp	/^namespace _Inventory$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common::Callout
_MaintenanceProcedure	elog-errors.hpp	/^namespace _MaintenanceProcedure$/;"	n	namespace:phosphor::logging::org::open_power::Host
_Open	elog-errors.hpp	/^namespace _Open$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common::File
_Procedure	elog-errors.hpp	/^namespace _Procedure$/;"	n	namespace:phosphor::logging::org::open_power::Common::Callout
_QuotaExceeded	elog-errors.hpp	/^namespace _QuotaExceeded$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Dump::Create
_ReadCFAM	elog-errors.hpp	/^namespace _ReadCFAM$/;"	n	namespace:phosphor::logging::org::open_power::Host::Access
_ReadFailure	elog-errors.hpp	/^namespace _ReadFailure$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Sensor::Device
_Seek	elog-errors.hpp	/^namespace _Seek$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common::File
_SoftOffTimeout	elog-errors.hpp	/^namespace _SoftOffTimeout$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::State::Host
_TestCallout	elog-errors.hpp	/^namespace _TestCallout$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog
_TestErrorOne	elog-errors.hpp	/^namespace _TestErrorOne$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog
_TestErrorTwo	elog-errors.hpp	/^namespace _TestErrorTwo$/;"	n	namespace:phosphor::logging::example::xyz::openbmc_project::Example::Elog
_Timeout	elog-errors.hpp	/^namespace _Timeout$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common
_WatchdogTimedOut	elog-errors.hpp	/^namespace _WatchdogTimedOut$/;"	n	namespace:phosphor::logging::org::open_power::Host
_Write	elog-errors.hpp	/^namespace _Write$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Common::File
_WriteCFAM	elog-errors.hpp	/^namespace _WriteCFAM$/;"	n	namespace:phosphor::logging::org::open_power::Host::Access
_WriteFailure	elog-errors.hpp	/^namespace _WriteFailure$/;"	n	namespace:phosphor::logging::xyz::openbmc_project::Control::Device
__HOST_IPMID_IPMI_COMMON_H__	include/ipmid/api.h	/^#define __HOST_IPMID_IPMI_COMMON_H__$/;"	d
__anon0398efe70110	user_channel/channelcommands.cpp	/^{$/;"	n	namespace:ipmi	file:
__anon0af2b4490110	storagehandler.cpp	/^{$/;"	n	file:
__anon1526fb130110	systemintfcmds.cpp	/^{$/;"	n	file:
__anon1df7a8b50108	apphandler.cpp	/^{$/;"	s	file:
__anon1df7a8b50202	apphandler.cpp	/^                [&s](const auto& iter) {$/;"	f	function:ipmiSetAcpiPowerState	file:
__anon1df7a8b50302	apphandler.cpp	/^                [&s](const auto& iter) {$/;"	f	function:ipmiSetAcpiPowerState	file:
__anon1df7a8b50408	apphandler.cpp	/^{$/;"	s	file:
__anon1df7a8b50508	apphandler.cpp	/^    {$/;"	s	function:ipmiAppGetDeviceId	file:
__anon3247ad930110	libipmid/systemintf-sdbus.cpp	/^{$/;"	n	file:
__anon33090c600102	libipmid/utils.cpp	/^        objectTree.begin(), objectTree.end(), [&match](const auto& object) {$/;"	f	function:ipmi::getDbusObject	file:
__anon33090c600202	libipmid/utils.cpp	/^        objectTree.begin(), objectTree.end(), [&match](const auto& object) {$/;"	f	function:ipmi::getDbusObject	file:
__anon473112af0102	user_channel/user_mgmt.cpp	/^            [&](sdbusplus::message::message& msg) {$/;"	f	function:ipmi::UserAccess::cacheUserDataFile	file:
__anon473112af0202	user_channel/user_mgmt.cpp	/^            [&](sdbusplus::message::message& msg) {$/;"	f	function:ipmi::UserAccess::cacheUserDataFile	file:
__anon473112af0302	user_channel/user_mgmt.cpp	/^            [&](sdbusplus::message::message& msg) {$/;"	f	function:ipmi::UserAccess::cacheUserDataFile	file:
__anon5e03f1d20102	host-interface.cpp	/^    auto hostAckCallback = [hostCondition](IpmiCmdData cmd, bool status) {$/;"	f	function:phosphor::host::command::Host::currentFirmwareCondition	file:
__anon5e03f1d20202	host-interface.cpp	/^    phosphor::Timer hostAckTimer([hostCondition]() {$/;"	f	function:phosphor::host::command::Host::currentFirmwareCondition	file:
__anon6eab67cd0102	user_channel/usercommands.cpp	/^    post_work([]() { ipmiUserInit(); });$/;"	f	function:ipmi::registerUserIpmiFunctions	file:
__anon7ac520b50102	dbus-sdr/sensorcommands.cpp	/^    [](sdbusplus::message::message& m) {$/;"	f	namespace:ipmi	file:
__anon7ac520b50202	dbus-sdr/sensorcommands.cpp	/^    [](sdbusplus::message::message& m) {$/;"	f	namespace:ipmi	file:
__anon7ac520b50302	dbus-sdr/sensorcommands.cpp	/^    [](sdbusplus::message::message& m) {$/;"	f	namespace:ipmi	file:
__anon7ac520b50402	dbus-sdr/sensorcommands.cpp	/^            std::find_if(values.begin(), values.end(), [](const auto& pair) {$/;"	f	function:ipmi::__anon7ac520b50302	file:
__anon7add4f230102	include/ipmid/message/pack.hpp	/^        return std::apply([&p](const T&... args) { return p.pack(args...); },$/;"	f	namespace:ipmi::message::details	file:
__anon7add4f230202	include/ipmid/message/pack.hpp	/^            [&p](const auto& arg) {$/;"	f	namespace:ipmi::message::details	file:
__anon86449a6e0110	selutility.cpp	/^{$/;"	n	file:
__anon86449a6e0202	selutility.cpp	/^                  [](const std::string& a, const std::string& b) {$/;"	f	function:ipmi::sel::readLoggingObjectPaths	file:
__anon8b1a09f80110	test/entitymap_json_unittest.cpp	/^{$/;"	n	namespace:ipmi::sensor	file:
__anon8b5e56ea0103	include/ipmid/api.h	/^{$/;"	g
__anon8bc864700102	dbus-sdr/storagecommands.cpp	/^                            [](sdbusplus::message::message& message) {$/;"	f	function:ipmi::storage::startMatch	file:
__anon8bc864700202	dbus-sdr/storagecommands.cpp	/^                            [](sdbusplus::message::message& message) {$/;"	f	function:ipmi::storage::startMatch	file:
__anon8bc864700302	dbus-sdr/storagecommands.cpp	/^    boost::asio::spawn(*getIoContext(), [](boost::asio::yield_context yield) {$/;"	f	function:ipmi::storage::startMatch	file:
__anon8bc864700402	dbus-sdr/storagecommands.cpp	/^                     [bus, address, &fruData](ManagedEntry& entry) {$/;"	f	function:ipmi::storage::getFruSdrs	file:
__anon8bc864700502	dbus-sdr/storagecommands.cpp	/^        [bus, address, &entityData](ManagedEntry& entry) {$/;"	f	function:ipmi::storage::getFruSdrs	file:
__anona5fc91170102	read_fru_data.cpp	/^            [&path](const auto& iter) { return (iter.path == path); });$/;"	f	function:ipmi::fru::processFruPropChange	file:
__anonacbaad370110	user_channel/user_layer.cpp	/^{$/;"	n	file:
__anonb22bc8d50102	include/ipmid/message.hpp	/^            std::apply([this](Types&... args) { return unpack(args...); }, t);$/;"	f	function:ipmi::message::Payload::unpack	file:
__anonb22bc8d50202	include/ipmid/message.hpp	/^        return std::apply([this](Types&... args) { return unpack(args...); },$/;"	f	function:ipmi::message::Request::unpack	file:
__anonb64a91420102	chassishandler.cpp	/^                                [](int i) { return i == 0; }) == true)$/;"	f	function:setHostNetworkData	file:
__anonb81f82d00102	sys_info_param.cpp	/^    update(paramSelector, [s]() {$/;"	f	function:SysInfoParamStore::update	file:
__anonba15ac260110	test/oemrouter_unittest.cpp	/^{$/;"	n	namespace:oem	file:
__anonba15ac260202	test/oemrouter_unittest.cpp	/^                   size_t* dataLen) {$/;"	f	function:oem::__anonba15ac260110::RegisterTwoWays	file:
__anonba15ac260302	test/oemrouter_unittest.cpp	/^                          uint8_t* replyBuf, size_t* dataLen) {$/;"	f	function:oem::__anonba15ac260110::RegisterTwoWays	file:
__anonc26dafe60110	whitelist-filter.cpp	/^{$/;"	n	namespace:ipmi	file:
__anonc26dafe60202	whitelist-filter.cpp	/^                         [this](ipmi::message::Request::ptr request) {$/;"	f	function:ipmi::__anonc26dafe60110::WhitelistFilter::WhitelistFilter	file:
__anonc26dafe60302	whitelist-filter.cpp	/^    post_work([this]() { postInit(); });$/;"	f	function:ipmi::__anonc26dafe60110::WhitelistFilter::WhitelistFilter	file:
__anonc26dafe60402	whitelist-filter.cpp	/^        [this](boost::system::error_code ec, ipmi::Value v) {$/;"	f	function:ipmi::__anonc26dafe60110::WhitelistFilter::cacheRestrictedMode	file:
__anonc26dafe60502	whitelist-filter.cpp	/^        *bus, filterStr, [this](sdbusplus::message::message& m) {$/;"	f	function:ipmi::__anonc26dafe60110::WhitelistFilter::postInit	file:
__anonc42ed6c30102	dbus-sdr/sdrutils.cpp	/^        [](sdbusplus::message::message& m) { sensorTreePtr.reset(); });$/;"	f	function:details::getSensorSubtree	file:
__anonc42ed6c30202	dbus-sdr/sdrutils.cpp	/^        [](sdbusplus::message::message& m) { sensorTreePtr.reset(); });$/;"	f	function:details::getSensorSubtree	file:
__anonc42ed6c30302	dbus-sdr/sdrutils.cpp	/^                                       const auto& interfaces) {$/;"	f	function:details::getSensorSubtree	file:
__anondd379b290110	libipmid/sdbus-asio.cpp	/^{$/;"	n	file:
__anone60fcc800110	ipmid-new.cpp	/^{$/;"	n	namespace:ipmi	file:
__anone60fcc800202	ipmid-new.cpp	/^               const std::string& nameOwner) {$/;"	f	function:ipmi::__anone60fcc800110::updateOwners	file:
__anone60fcc800302	ipmid-new.cpp	/^                     std::vector<std::string> busNames) {$/;"	f	function:ipmi::__anone60fcc800110::doListNames	file:
__anone60fcc800402	ipmid-new.cpp	/^        [netFn, lun, cmd](Cc cc, const std::vector<uint8_t>& data = {}) {$/;"	f	function:ipmi::executionEntry	file:
__anone60fcc800502	ipmid-new.cpp	/^                                            boost::asio::yield_context yield) {$/;"	f	function:handleLegacyIpmiCommand	file:
__anone60fcc800602	ipmid-new.cpp	/^    phosphor::Timer t2([]() { ; });$/;"	f	function:main	file:
__anone60fcc800702	ipmid-new.cpp	/^        [&io, &exitCode](int signalNumber) {$/;"	f	function:main	file:
__anone8937c160103	user_channel/channel_layer.hpp	/^{$/;"	g	namespace:ipmi
__anonf3ac01090102	user_channel/channel_mgmt.cpp	/^            [&](sdbusplus::message::message& msg) {$/;"	f	function:ipmi::ChannelConfig::ChannelConfig	file:
__anonf9df85400110	libipmid/signals.cpp	/^{$/;"	n	file:
__anonf9df85400202	libipmid/signals.cpp	/^                                  int sigNum) { handleSignal(ec, sigNum); });$/;"	f	function:__anonf9df85400110::SignalHandler::asyncWait	file:
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::_Bar::BAR_DATA	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_DEVICE_PATH_TEST	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_ERRNO_TEST	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_AutoTestSimple::STRING	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestCallout::DEV_ADDR	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::ERRNUM	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_NAME	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_PATH	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ADDR	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ID	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_NAME	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::_Foo::FOO_DATA	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::org::open_power::Common::Callout::_Procedure::PROCEDURE	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::org::open_power::Host::Access::_ReadCFAM::ADDRESS	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::org::open_power::Host::Access::_WriteCFAM::ADDRESS	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::org::open_power::Host::_Event::ESEL	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::org::open_power::Host::_MaintenanceProcedure::ESEL	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_DEVICE_PATH	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_ERRNO	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_GPIO::CALLOUT_GPIO_NUM	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_ADDR	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_BUS	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IPMISensor::CALLOUT_IPMI_SENSOR_NUM	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Inventory::CALLOUT_INVENTORY_PATH	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::ERRNO	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::PATH	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::ERRNO	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::OFFSET	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::PATH	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::WHENCE	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::ERRNO	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::PATH	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_NAME	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_VALUE	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::_Timeout::TIMEOUT_IN_MSEC	typeref:typename:type
_entry	elog-errors.hpp	/^    type _entry;$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::_QuotaExceeded::REASON	typeref:typename:type
accessCallback	user_channel/user_layer.hpp	/^    uint8_t accessCallback : 1;$/;"	m	struct:ipmi::PrivAccess	typeref:typename:uint8_t:1
accessCallback	user_channel/user_mgmt.hpp	/^    bool accessCallback;$/;"	m	struct:ipmi::UserPrivAccess	typeref:typename:bool
accessLun	sensorhandler.hpp	/^    uint8_t accessLun;$/;"	m	struct:get_sdr::SensorDataFruRecordKey	typeref:typename:uint8_t
accessMode	user_channel/channel_layer.hpp	/^    uint8_t accessMode;$/;"	m	struct:ipmi::ChannelAccess	typeref:typename:uint8_t
accessModeList	user_channel/channel_mgmt.cpp	/^static std::array<std::string, 4> accessModeList = {$/;"	v	namespace:ipmi	typeref:typename:std::array<std::string,4>	file:
accessModeString	user_channel/channel_mgmt.cpp	/^static constexpr const char* accessModeString = "access_mode";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
accuracy_and_sensor_direction	sensorhandler.hpp	/^    uint8_t accuracy_and_sensor_direction;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
acpiInterface	apphandler.cpp	/^const static constexpr char* acpiInterface =$/;"	v	namespace:acpi_state	typeref:typename:const char *	file:
acpiObjPath	apphandler.cpp	/^const static constexpr char* acpiObjPath =$/;"	v	namespace:acpi_state	typeref:typename:const char *	file:
acpi_state	apphandler.cpp	/^namespace acpi_state$/;"	n	file:
activate	ipmid-new.cpp	/^    void activate() override$/;"	f	class:oem::LegacyRouter	typeref:typename:void	file:
activationIntf	apphandler.cpp	/^static constexpr auto activationIntf =$/;"	v	typeref:typename:auto	file:
active	include/ipmid/sessiondef.hpp	/^    active,             \/\/ Session is active$/;"	e	enum:session::State
activeData	user_channel/channel_layer.hpp	/^    activeData = 0x02,$/;"	e	enum:ipmi::__anone8937c160103
activeSessCount	user_channel/channel_mgmt.hpp	/^    uint8_t activeSessCount;$/;"	m	struct:ipmi::ChannelProperties	typeref:typename:uint8_t
activeSessionsString	user_channel/channel_mgmt.cpp	/^static constexpr const char* activeSessionsString = "active_sessions";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
addUserEntry	user_channel/user_mgmt.cpp	/^bool UserAccess::addUserEntry(const std::string& userName,$/;"	f	class:ipmi::UserAccess	typeref:typename:bool
additionalDataMap	selutility.cpp	/^using additionalDataMap = std::map<std::string, std::string>;$/;"	t	namespace:ipmi::sel::internal	typeref:typename:std::map<std::string,std::string>	file:
addnDevSupport	apphandler.cpp	/^        uint8_t addnDevSupport;$/;"	m	struct:ipmiAppGetDeviceId::__anon1df7a8b50508	typeref:typename:uint8_t	file:
addr	ipmid-new.cpp	/^    void* addr;$/;"	m	struct:ipmi::IpmiProvider	typeref:typename:void *	file:
addr	transporthandler.hpp	/^    using addr = in6_addr;$/;"	t	struct:ipmi::transport::AddrFamily	typeref:typename:in6_addr
addr	transporthandler.hpp	/^    using addr = in_addr;$/;"	t	struct:ipmi::transport::AddrFamily	typeref:typename:in_addr
addr4	chassishandler.cpp	/^            struct sockaddr_in addr4$/;"	s	function:getAddrStr	file:
addr6	chassishandler.cpp	/^            struct sockaddr_in6 addr6$/;"	s	function:getAddrStr	file:
addrSizeOffset	chassishandler.cpp	/^static constexpr size_t addrSizeOffset = 8;$/;"	v	typeref:typename:size_t	file:
addrToString	transporthandler.hpp	/^std::string addrToString(const typename AddrFamily<family>::addr& address)$/;"	f	namespace:ipmi::transport	typeref:typename:std::string
addrTypeOffset	chassishandler.cpp	/^static constexpr size_t addrTypeOffset = 16;$/;"	v	typeref:typename:size_t	file:
address	transporthandler.hpp	/^    typename AddrFamily<family>::addr address;$/;"	m	struct:ipmi::transport::IfAddr	typeref:typename:AddrFamily<family>::addr
alertingDisabled	user_channel/channel_layer.hpp	/^    bool alertingDisabled;$/;"	m	struct:ipmi::ChannelAccess	typeref:typename:bool
alertingDisabledString	user_channel/channel_mgmt.cpp	/^static constexpr const char* alertingDisabledString = "alerting_disabled";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
allEventMessagesEnabled	include/ipmid/types.hpp	/^    bool allEventMessagesEnabled;        \/\/ 0 = All Event Messages disabled$/;"	m	struct:ipmi::sensor::GetSensorResponse	typeref:typename:bool
allGrpProperty	user_channel/user_mgmt.cpp	/^static constexpr const char* allGrpProperty = "AllGroups";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
allPrivProperty	user_channel/user_mgmt.cpp	/^static constexpr const char* allPrivProperty = "AllPrivileges";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
allSupport	chassishandler.cpp	/^static constexpr uint8_t allSupport = 0x01 | 0x02 | 0x04;$/;"	v	namespace:power_policy	typeref:typename:uint8_t	file:
allocCommandSupported	include/dbus-sdr/storagecommands.hpp	/^    allocCommandSupported = 0x1,$/;"	e	enum:SdrRepositoryInfoOps
allocate	user_channel/user_mgmt.hpp	/^    pointer allocate(size_type n, const void* hint = 0)$/;"	f	class:ipmi::SecureAllocator	typeref:typename:pointer
alwaysAvail	user_channel/channel_layer.hpp	/^    alwaysAvail = 2,$/;"	e	enum:ipmi::EChannelAccessMode
amps	include/dbus-sdr/storagecommands.hpp	/^    amps = 0x5,$/;"	e	enum:SensorUnits
analogSensorInterfaces	sensorhandler.cpp	/^const std::set<std::string> analogSensorInterfaces = {$/;"	v	typeref:typename:const std::set<std::string>
analog_characteristic_flags	sensorhandler.hpp	/^    uint8_t analog_characteristic_flags; \/\/ no macro support$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
any	user_channel/channel_layer.hpp	/^    any = 3,$/;"	e	enum:ipmi::EChannelSessSupported
app	include/ipmid/api-types.hpp	/^namespace app$/;"	n	namespace:ipmi
append	include/ipmid/message.hpp	/^    void append(T* begin, T* end)$/;"	f	struct:ipmi::message::Payload	typeref:typename:void
appendBits	include/ipmid/message.hpp	/^    void appendBits(size_t count, uint8_t bits)$/;"	f	struct:ipmi::message::Payload	typeref:typename:void
appendChassisType	ipmi_fru_info_area.cpp	/^void appendChassisType(const PropertyMap& propMap, FruAreaData& data)$/;"	f	namespace:ipmi::fru	typeref:typename:void
appendData	ipmi_fru_info_area.cpp	/^void appendData(const Property& key, const PropertyMap& propMap,$/;"	f	namespace:ipmi::fru	typeref:typename:void
appendDataChecksum	ipmi_fru_info_area.cpp	/^void appendDataChecksum(FruAreaData& data)$/;"	f	namespace:ipmi::fru	typeref:typename:void
appendMfgDate	ipmi_fru_info_area.cpp	/^void appendMfgDate(const PropertyMap& propMap, FruAreaData& data)$/;"	f	namespace:ipmi::fru	typeref:typename:void
applyPowerLimit	dcmihandler.cpp	/^ipmi::RspType<> applyPowerLimit(uint8_t powerLimitAction, uint16_t reserved)$/;"	f	typeref:typename:ipmi::RspType<>
areaSizeOffset	ipmi_fru_info_area.cpp	/^static constexpr auto areaSizeOffset = 0x1;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
assert	include/ipmid/types.hpp	/^    Value assert;   \/\/ Value in case of assert.$/;"	m	struct:ipmi::sensor::PreReqValues	typeref:typename:Value
assert	include/ipmid/types.hpp	/^    Value assert;$/;"	m	struct:ipmi::sensor::Values	typeref:typename:Value
assertEvent	selutility.cpp	/^constexpr auto assertEvent = 0x00;$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
assertOffset0_7	include/ipmid/types.hpp	/^    uint8_t assertOffset0_7;  \/\/!< Discrete assertion states(0-7).$/;"	m	struct:ipmi::sensor::GetReadingResponse	typeref:typename:uint8_t
assertOffset0_7	include/ipmid/types.hpp	/^    uint8_t assertOffset0_7;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
assertOffset8_14	include/ipmid/types.hpp	/^    uint8_t assertOffset8_14; \/\/!< Discrete assertion states(8-14).$/;"	m	struct:ipmi::sensor::GetReadingResponse	typeref:typename:uint8_t
assertOffset8_14	include/ipmid/types.hpp	/^    uint8_t assertOffset8_14;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
assert_state14_8	ipmisensor.cpp	/^    uint8_t assert_state14_8;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
assert_state7_0	ipmisensor.cpp	/^    uint8_t assert_state7_0;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
assertion	ipmisensor.cpp	/^    char assertion[64];$/;"	m	struct:lookup_t	typeref:typename:char[64]	file:
assertion	sensordatahandler.cpp	/^GetSensorResponse assertion(const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::get	typeref:typename:GetSensorResponse
assertion	sensordatahandler.cpp	/^GetSensorResponse assertion(const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::inventory::get	typeref:typename:GetSensorResponse
assertion	sensordatahandler.cpp	/^ipmi_ret_t assertion(const SetSensorReadingReq& cmdData, const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::notify	typeref:typename:ipmi_ret_t
assertion	sensordatahandler.cpp	/^ipmi_ret_t assertion(const SetSensorReadingReq& cmdData, const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::set	typeref:typename:ipmi_ret_t
assetTagIntf	dcmihandler.hpp	/^static constexpr auto assetTagIntf =$/;"	v	namespace:dcmi	typeref:typename:auto
assetTagMaxOffset	dcmihandler.hpp	/^static constexpr auto assetTagMaxOffset = 62;$/;"	v	namespace:dcmi	typeref:typename:auto
assetTagMaxSize	dcmihandler.hpp	/^static constexpr auto assetTagMaxSize = 63;$/;"	v	namespace:dcmi	typeref:typename:auto
assetTagProp	dcmihandler.hpp	/^static constexpr auto assetTagProp = "AssetTag";$/;"	v	namespace:dcmi	typeref:typename:auto
assettag	dcmihandler.hpp	/^namespace assettag$/;"	n	namespace:dcmi
assoc_erase_if	ipmid-new.cpp	/^void assoc_erase_if(AssocContainer& c, UnaryPredicate p)$/;"	f	namespace:ipmi::utils	typeref:typename:void
asyncWait	libipmid/signals.cpp	/^    void asyncWait()$/;"	f	class:__anonf9df85400110::SignalHandler	typeref:typename:void	file:
auth	app/channel.hpp	/^static constexpr auto auth = "authentication";$/;"	v	namespace:cipher	typeref:typename:auto
authTypeEnabledString	user_channel/channel_mgmt.cpp	/^static constexpr const char* authTypeEnabledString = "auth_type_enabled";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
authTypeSupported	user_channel/channel_layer.hpp	/^    uint8_t authTypeSupported;$/;"	m	struct:ipmi::ChannelInfo	typeref:typename:uint8_t
authTypeSupportedString	user_channel/channel_mgmt.cpp	/^static constexpr const char* authTypeSupportedString = "auth_type_supported";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
aux	apphandler.cpp	/^        uint32_t aux;$/;"	m	struct:ipmiAppGetDeviceId::__anon1df7a8b50508	typeref:typename:uint32_t	file:
availableGroups	user_channel/user_mgmt.hpp	/^    std::vector<std::string> availableGroups;$/;"	m	class:ipmi::UserAccess	typeref:typename:std::vector<std::string>
availablePrivileges	user_channel/user_mgmt.hpp	/^    std::vector<std::string> availablePrivileges;$/;"	m	class:ipmi::UserAccess	typeref:typename:std::vector<std::string>
averagePower	dcmihandler.hpp	/^    uint16_t averagePower;     \/\/!< Average power over sampling duration$/;"	m	struct:dcmi::GetPowerReadingResponse	typeref:typename:uint16_t
b_lsb	sensorhandler.hpp	/^    uint8_t b_lsb;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
b_msb_and_accuracy_lsb	sensorhandler.hpp	/^    uint8_t b_msb_and_accuracy_lsb;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
baseInRange	dbus-sdr/sensorutils.cpp	/^static bool baseInRange(double base)$/;"	f	namespace:ipmi	typeref:typename:bool	file:
base_16	apphandler.cpp	/^static constexpr int base_16 = 16;$/;"	v	typeref:typename:int	file:
begin	transporthandler.hpp	/^    iterator begin() noexcept$/;"	f	class:ipmi::transport::ObjectLookupCache	typeref:typename:iterator
bin_PROGRAMS	Makefile.am	/^bin_PROGRAMS = \\$/;"	m
bin_PROGRAMS	softoff/Makefile.am	/^bin_PROGRAMS = phosphor-softpoweroff$/;"	m
bit	include/ipmid/message/types.hpp	/^using bit = bool;$/;"	t	typeref:typename:bool
bitCount	include/ipmid/message.hpp	/^    size_t bitCount = 0;$/;"	m	struct:ipmi::message::Payload	typeref:typename:size_t
bitStream	include/ipmid/message.hpp	/^    fixed_uint_t<details::bitStreamSize> bitStream;$/;"	m	struct:ipmi::message::Payload	typeref:typename:fixed_uint_t<details::bitStreamSize>
bitStreamSize	include/ipmid/message.hpp	/^static constexpr size_t bitStreamSize = ((sizeof(uint64_t) + 1) * CHAR_BIT);$/;"	v	namespace:ipmi::message::details	typeref:typename:size_t
blobTransferCmd	include/ipmid/oemopenbmc.hpp	/^    blobTransferCmd = 128,$/;"	e	enum:oem::Cmd
bmcI2CAddr	dbus-sdr/sensorcommands.cpp	/^static constexpr uint8_t bmcI2CAddr = 0x20;$/;"	v	namespace:ipmi	typeref:typename:uint8_t	file:
bmcStateIntf	globalhandler.cpp	/^static constexpr auto bmcStateIntf = "xyz.openbmc_project.State.BMC";$/;"	v	typeref:typename:auto	file:
bmcStateRoot	globalhandler.cpp	/^static constexpr auto bmcStateRoot = "\/xyz\/openbmc_project\/state";$/;"	v	typeref:typename:auto	file:
bmc_state_interface	apphandler.cpp	/^constexpr auto bmc_state_interface = "xyz.openbmc_project.State.BMC";$/;"	v	typeref:typename:auto
bmc_state_property	apphandler.cpp	/^constexpr auto bmc_state_property = "CurrentBMCState";$/;"	v	typeref:typename:auto
board	ipmi_fru_info_area.cpp	/^static constexpr auto board = "Board";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
boardOffset	include/dbus-sdr/storagecommands.hpp	/^    uint8_t boardOffset;$/;"	m	struct:FRUHeader	typeref:typename:uint8_t
body	sensorhandler.hpp	/^    SensorDataEntityRecordBody body;$/;"	m	struct:get_sdr::SensorDataEntityRecord	typeref:typename:SensorDataEntityRecordBody
body	sensorhandler.hpp	/^    SensorDataEventRecordBody body;$/;"	m	struct:get_sdr::SensorDataEventRecord	typeref:typename:SensorDataEventRecordBody
body	sensorhandler.hpp	/^    SensorDataFruRecordBody body;$/;"	m	struct:get_sdr::SensorDataFruRecord	typeref:typename:SensorDataFruRecordBody
body	sensorhandler.hpp	/^    SensorDataFullRecordBody body;$/;"	m	struct:get_sdr::SensorDataFullRecord	typeref:typename:SensorDataFullRecordBody
body	sensorhandler.hpp	/^namespace body$/;"	n	namespace:get_sdr
boot	settings.cpp	/^namespace boot$/;"	n	namespace:settings	file:
boot	settings.hpp	/^namespace boot$/;"	n	namespace:settings
boot-flag-safe-mode-support	configure.ac	/^AC_ARG_ENABLE([boot-flag-safe-mode-support],$/;"	e
bootFlagValidBitClr	chassishandler.cpp	/^static uint8_t bootFlagValidBitClr = 0;$/;"	v	typeref:typename:uint8_t	file:
bootFlagValidClr	chassishandler.hpp	/^    bootFlagValidClr = 0x3,$/;"	e	enum:BootOptionParameter
bootFlags	chassishandler.hpp	/^    bootFlags = 0x5,$/;"	e	enum:BootOptionParameter
bootFlags	chassishandler.hpp	/^    bootFlags = 5,$/;"	e	enum:BootOptionResponseSize
bootInfo	chassishandler.hpp	/^    bootInfo = 0x4,$/;"	e	enum:BootOptionParameter
bootModeIntf	chassishandler.cpp	/^constexpr auto bootModeIntf = "xyz.openbmc_project.Control.Boot.Mode";$/;"	v	namespace:chassis::internal	typeref:typename:auto
bootSourceIntf	chassishandler.cpp	/^constexpr auto bootSourceIntf = "xyz.openbmc_project.Control.Boot.Source";$/;"	v	namespace:chassis::internal	typeref:typename:auto
bootTypeIntf	chassishandler.cpp	/^constexpr auto bootTypeIntf = "xyz.openbmc_project.Control.Boot.Type";$/;"	v	namespace:chassis::internal	typeref:typename:auto
boot_options	chassishandler.cpp	/^namespace boot_options$/;"	n	file:
breakExecution	include/ipmid/api.hpp	/^    breakExecution,$/;"	e	enum:SignalResponse
bridge	include/ipmid/api-types.hpp	/^namespace bridge$/;"	n	namespace:ipmi
bt10	user_channel/channel_layer.hpp	/^    bt10 = 0x07,$/;"	e	enum:ipmi::EChannelProtocolType
bt15	user_channel/channel_layer.hpp	/^    bt15 = 0x08,$/;"	e	enum:ipmi::EChannelProtocolType
buildBoardInfoArea	ipmi_fru_info_area.cpp	/^FruAreaData buildBoardInfoArea(const PropertyMap& propMap)$/;"	f	namespace:ipmi::fru	typeref:typename:FruAreaData
buildChassisInfoArea	ipmi_fru_info_area.cpp	/^FruAreaData buildChassisInfoArea(const PropertyMap& propMap)$/;"	f	namespace:ipmi::fru	typeref:typename:FruAreaData
buildCommonHeaderSection	ipmi_fru_info_area.cpp	/^void buildCommonHeaderSection(const uint32_t& infoAreaSize, uint16_t& offset,$/;"	f	namespace:ipmi::fru	typeref:typename:void
buildDate	ipmi_fru_info_area.cpp	/^static constexpr auto buildDate = "Mfg Date";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
buildEntityMapFromFile	entity_map_json.cpp	/^EntityInfoMap buildEntityMapFromFile()$/;"	f	namespace:ipmi::sensor	typeref:typename:EntityInfoMap
buildFruAreaData	ipmi_fru_info_area.cpp	/^FruAreaData buildFruAreaData(const FruInventoryData& inventory)$/;"	f	namespace:ipmi::fru	typeref:typename:FruAreaData
buildJsonEntityMap	entity_map_json.cpp	/^EntityInfoMap buildJsonEntityMap(const nlohmann::json& data)$/;"	f	namespace:ipmi::sensor	typeref:typename:EntityInfoMap
buildProductInfoArea	ipmi_fru_info_area.cpp	/^FruAreaData buildProductInfoArea(const PropertyMap& propMap)$/;"	f	namespace:ipmi::fru	typeref:typename:FruAreaData
bus	app/watchdog_service.hpp	/^    sdbusplus::bus::bus bus;$/;"	m	class:WatchdogService	typeref:typename:sdbusplus::bus::bus
bus	host-cmd-manager.hpp	/^    sdbusplus::bus::bus& bus;$/;"	m	class:phosphor::host::command::Manager	typeref:typename:sdbusplus::bus::bus &
bus	host-interface.hpp	/^    sdbusplus::bus::bus& bus;$/;"	m	class:phosphor::host::command::Host	typeref:typename:sdbusplus::bus::bus &
bus	include/ipmid/message.hpp	/^    std::shared_ptr<sdbusplus::asio::connection> bus;$/;"	m	struct:ipmi::Context	typeref:typename:std::shared_ptr<sdbusplus::asio::connection>
bus	ipmid-new.cpp	/^sd_bus* bus;$/;"	v	typeref:typename:sd_bus *
bus	sensorhandler.hpp	/^    char bus[MAX_DBUS_PATH];$/;"	m	struct:dbus_interface_t	typeref:typename:char[]
bus	settings.hpp	/^    sdbusplus::bus::bus& bus;$/;"	m	struct:settings::Objects	typeref:typename:sdbusplus::bus::bus &
bus	softoff/softoff.hpp	/^    sdbusplus::bus::bus& bus;$/;"	m	class:phosphor::ipmi::SoftPowerOff	typeref:typename:sdbusplus::bus::bus &
bus	testaddsel.cpp	/^sd_bus* bus = NULL;$/;"	v	typeref:typename:sd_bus *
bus	transporthandler.hpp	/^    sdbusplus::bus::bus& bus;$/;"	m	class:ipmi::transport::ObjectLookupCache	typeref:typename:sdbusplus::bus::bus &
bus	user_channel/channel_mgmt.hpp	/^    sdbusplus::bus::bus bus;$/;"	m	class:ipmi::ChannelConfig	typeref:typename:sdbusplus::bus::bus
bus	user_channel/user_mgmt.hpp	/^    sdbusplus::bus::bus bus;$/;"	m	class:ipmi::UserAccess	typeref:typename:sdbusplus::bus::bus
bus	whitelist-filter.cpp	/^    std::shared_ptr<sdbusplus::asio::connection> bus;$/;"	m	class:ipmi::__anonc26dafe60110::WhitelistFilter	typeref:typename:std::shared_ptr<sdbusplus::asio::connection>	file:
busId	apphandler.cpp	/^    uint8_t busId;$/;"	m	struct:__anon1df7a8b50108	typeref:typename:uint8_t	file:
busIdStr	apphandler.cpp	/^static constexpr const char* busIdStr = "busId";$/;"	v	typeref:typename:const char *	file:
byte	include/dbus-sdr/storagecommands.hpp	/^    byte = 0x0,$/;"	e	enum:GetFRUAreaAccessType
byte2EnableMask	sensorhandler.hpp	/^static constexpr uint8_t byte2EnableMask = 0xC0;$/;"	v	typeref:typename:uint8_t
byte3EnableMask	sensorhandler.hpp	/^static constexpr uint8_t byte3EnableMask = 0x30;$/;"	v	typeref:typename:uint8_t
bytePosition	dcmihandler.hpp	/^    uint8_t bytePosition; \/\/!< Starting byte number from DCMI spec.$/;"	m	struct:dcmi::DCMICap	typeref:typename:uint8_t
bytes	dcmihandler.hpp	/^    uint8_t bytes;  \/\/!< Number of bytes to read.$/;"	m	struct:dcmi::GetAssetTagRequest	typeref:typename:uint8_t
bytes	dcmihandler.hpp	/^    uint8_t bytes;  \/\/!< Number of bytes to read.$/;"	m	struct:dcmi::GetMgmntCtrlIdStrRequest	typeref:typename:uint8_t
bytes	dcmihandler.hpp	/^    uint8_t bytes;  \/\/!< Number of bytes to read.$/;"	m	struct:dcmi::SetMgmntCtrlIdStrRequest	typeref:typename:uint8_t
bytes	dcmihandler.hpp	/^    uint8_t bytes;  \/\/!< Number of bytes to write.$/;"	m	struct:dcmi::SetAssetTagRequest	typeref:typename:uint8_t
bytes	storagehandler.cpp	/^    bytes, \/\/\/< Device is accessed by bytes$/;"	e	enum:AccessMode	file:
bytes_to_read	sensorhandler.hpp	/^    uint8_t bytes_to_read;$/;"	m	struct:get_sdr::GetSdrReq	typeref:typename:uint8_t
cache	chassishandler.cpp	/^namespace cache$/;"	n	namespace:chassis::internal	file:
cache	read_fru_data.cpp	/^namespace cache$/;"	n	namespace:ipmi::fru	file:
cache	storagehandler.cpp	/^namespace cache$/;"	n	file:
cache	transporthandler.hpp	/^    PropertiesCache cache;$/;"	m	class:ipmi::transport::ObjectLookupCache	typeref:typename:PropertiesCache
cacheAddr	dbus-sdr/storagecommands.cpp	/^static uint8_t cacheAddr = 0XFF;$/;"	v	namespace:ipmi::storage	typeref:typename:uint8_t	file:
cacheBus	dbus-sdr/storagecommands.cpp	/^static uint8_t cacheBus = 0xFF;$/;"	v	namespace:ipmi::storage	typeref:typename:uint8_t	file:
cacheRestrictedMode	whitelist-filter.cpp	/^void WhitelistFilter::cacheRestrictedMode()$/;"	f	class:ipmi::__anonc26dafe60110::WhitelistFilter	typeref:typename:void
cacheUserDataFile	user_channel/user_mgmt.cpp	/^void UserAccess::cacheUserDataFile()$/;"	f	class:ipmi::UserAccess	typeref:typename:void
cachedBusName	include/ipmid/utils.hpp	/^    std::optional<std::string> cachedBusName;$/;"	m	class:ipmi::ServiceCache	typeref:typename:std::optional<std::string>
cachedService	include/ipmid/utils.hpp	/^    std::optional<std::string> cachedService;$/;"	m	class:ipmi::ServiceCache	typeref:typename:std::optional<std::string>
calculateVRMode	dbus-sdr/sensorcommands.cpp	/^    calculateVRMode(uint15_t assertOffset,$/;"	f	namespace:ipmi::sensor	typeref:typename:std::optional<std::string>	file:
calculateValue	dbus-sdr/sensorcommands.cpp	/^    calculateValue(uint8_t reading, const ipmi::DbusInterfaceMap& sensorMap,$/;"	f	namespace:ipmi::sensor	typeref:typename:std::optional<double>	file:
call	include/ipmid/filter.hpp	/^    ipmi::Cc call(message::Request::ptr request) override$/;"	f	class:ipmi::IpmiFilter	typeref:typename:ipmi::Cc
call	include/ipmid/handler.hpp	/^    message::Response::ptr call(message::Request::ptr request)$/;"	f	class:ipmi::HandlerBase	typeref:typename:message::Response::ptr
callDbusMethod	libipmid/utils.cpp	/^void callDbusMethod(sdbusplus::bus::bus& bus, const std::string& service,$/;"	f	namespace:ipmi::method_no_args	typeref:typename:void
cancelSELReservation	ipmid-new.cpp	/^void cancelSELReservation(void)$/;"	f	typeref:typename:void
capList	dcmihandler.hpp	/^    DCMICapList capList; \/\/!< List of capabilities for a parameter.$/;"	m	struct:dcmi::DCMICapEntry	typeref:typename:DCMICapList
cc	include/ipmid/handler.hpp	/^    Cc cc;$/;"	m	class:ipmi::HandlerCompletion	typeref:typename:Cc
cc	include/ipmid/message.hpp	/^    Cc cc;$/;"	m	struct:ipmi::message::Response	typeref:typename:Cc
ccAccessModeNotSupportedForChannel	user_channel/channel_layer.hpp	/^static constexpr const uint8_t ccAccessModeNotSupportedForChannel = 0x83;$/;"	v	namespace:ipmi	typeref:typename:const uint8_t
ccActionNotSupportedForChannel	user_channel/channel_layer.hpp	/^static constexpr const uint8_t ccActionNotSupportedForChannel = 0x82;$/;"	v	namespace:ipmi	typeref:typename:const uint8_t
ccBusy	include/ipmid/api-types.hpp	/^constexpr Cc ccBusy = 0xC0;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccCmdFailFwUpdMode	include/ipmid/api-types.hpp	/^constexpr Cc ccCmdFailFwUpdMode = 0xD1;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccCmdFailInitAgent	include/ipmid/api-types.hpp	/^constexpr Cc ccCmdFailInitAgent = 0xD2;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccCmdFailSdrMode	include/ipmid/api-types.hpp	/^constexpr Cc ccCmdFailSdrMode = 0xD0;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccCommandDisabled	include/ipmid/api-types.hpp	/^constexpr Cc ccCommandDisabled = 0xD6;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccCommandNotAvailable	include/ipmid/api-types.hpp	/^constexpr Cc ccCommandNotAvailable = 0xD5;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccDestinationUnavailable	include/ipmid/api-types.hpp	/^constexpr Cc ccDestinationUnavailable = 0xD3;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccDuplicateRequest	include/ipmid/api-types.hpp	/^constexpr Cc ccDuplicateRequest = 0xCF;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccIllegalCommand	include/ipmid/api-types.hpp	/^constexpr Cc ccIllegalCommand = 0xCD;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccInsufficientPrivilege	include/ipmid/api-types.hpp	/^constexpr Cc ccInsufficientPrivilege = 0xD4;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccInvalidCommand	include/ipmid/api-types.hpp	/^constexpr Cc ccInvalidCommand = 0xC1;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccInvalidCommandOnLun	include/ipmid/api-types.hpp	/^constexpr Cc ccInvalidCommandOnLun = 0xC2;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccInvalidFieldRequest	include/ipmid/api-types.hpp	/^constexpr Cc ccInvalidFieldRequest = 0xCC;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccInvalidReservationId	include/ipmid/api-types.hpp	/^constexpr Cc ccInvalidReservationId = 0xC5;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccInvalidSessionHandle	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t ccInvalidSessionHandle = 0x88;$/;"	v	namespace:session	typeref:typename:uint8_t
ccInvalidSessionId	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t ccInvalidSessionId = 0x87;$/;"	v	namespace:session	typeref:typename:uint8_t
ccOutOfSpace	include/ipmid/api-types.hpp	/^constexpr Cc ccOutOfSpace = 0xC4;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccParamNotSupported	transporthandler.hpp	/^constexpr Cc ccParamNotSupported = 0x80;$/;"	v	namespace:ipmi::transport	typeref:typename:Cc
ccParamReadOnly	transporthandler.hpp	/^constexpr Cc ccParamReadOnly = 0x82;$/;"	v	namespace:ipmi::transport	typeref:typename:Cc
ccParamSetLocked	transporthandler.hpp	/^constexpr Cc ccParamSetLocked = 0x81;$/;"	v	namespace:ipmi::transport	typeref:typename:Cc
ccParmNotSupported	apphandler.cpp	/^constexpr Cc ccParmNotSupported = 0x80;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccParmNotSupported	chassishandler.cpp	/^constexpr Cc ccParmNotSupported = 0x80;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccParmOutOfRange	include/ipmid/api-types.hpp	/^constexpr Cc ccParmOutOfRange = 0xC9;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccReqDataLenExceeded	include/ipmid/api-types.hpp	/^constexpr Cc ccReqDataLenExceeded = 0xC8;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccReqDataLenInvalid	include/ipmid/api-types.hpp	/^constexpr Cc ccReqDataLenInvalid = 0xC7;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccReqDataTruncated	include/ipmid/api-types.hpp	/^constexpr Cc ccReqDataTruncated = 0xC6;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccResponseError	include/ipmid/api-types.hpp	/^constexpr Cc ccResponseError = 0xCE;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccRetBytesUnavailable	include/ipmid/api-types.hpp	/^constexpr Cc ccRetBytesUnavailable = 0xCA;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccSensorInvalid	include/ipmid/api-types.hpp	/^constexpr Cc ccSensorInvalid = 0xCB;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccSetInProgressActive	apphandler.cpp	/^constexpr Cc ccSetInProgressActive = 0x81;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccSuccess	include/ipmid/api-types.hpp	/^constexpr Cc ccSuccess = 0x00;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccSystemInfoParameterSetReadOnly	apphandler.cpp	/^constexpr Cc ccSystemInfoParameterSetReadOnly = 0x82;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccTimeout	include/ipmid/api-types.hpp	/^constexpr Cc ccTimeout = 0xC2;$/;"	v	namespace:ipmi	typeref:typename:Cc
ccUnspecifiedError	include/ipmid/api-types.hpp	/^constexpr Cc ccUnspecifiedError = 0xFF;$/;"	v	namespace:ipmi	typeref:typename:Cc
chAccess	user_channel/channel_mgmt.hpp	/^    ChannelAccessData chAccess;$/;"	m	struct:ipmi::ChannelProperties	typeref:typename:ChannelAccessData
chID	user_channel/channel_mgmt.hpp	/^    uint8_t chID;$/;"	m	struct:ipmi::ChannelProperties	typeref:typename:uint8_t
chInfo	user_channel/channel_mgmt.hpp	/^    ChannelInfo chInfo;$/;"	m	struct:ipmi::ChannelProperties	typeref:typename:ChannelInfo
chName	user_channel/channel_mgmt.hpp	/^    std::string chName;$/;"	m	struct:ipmi::ChannelProperties	typeref:typename:std::string
chNonVolatileData	user_channel/channel_mgmt.hpp	/^    ChannelAccess chNonVolatileData;$/;"	m	struct:ipmi::ChannelAccessData	typeref:typename:ChannelAccess
chPropertiesSignal	user_channel/channel_mgmt.cpp	/^std::unique_ptr<sdbusplus::bus::match_t> chPropertiesSignal$/;"	v	namespace:ipmi	typeref:typename:std::unique_ptr<sdbusplus::bus::match_t>
chVolatileData	user_channel/channel_mgmt.hpp	/^    ChannelAccess chVolatileData;$/;"	m	struct:ipmi::ChannelAccessData	typeref:typename:ChannelAccess
chanLan1	user_channel/user_layer.hpp	/^    chanLan1 = 0x01$/;"	e	enum:ipmi::EChannelID
channel	include/ipmid/message.hpp	/^    int channel;$/;"	m	struct:ipmi::Context	typeref:typename:int
channelAccessDefaultFilename	user_channel/channel_mgmt.cpp	/^static constexpr const char* channelAccessDefaultFilename =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
channelCall	transporthandler.hpp	/^auto channelCall(uint8_t channel, Args&&... args)$/;"	f	namespace:ipmi::transport	typeref:typename:auto
channelConfigDefaultFilename	user_channel/channel_mgmt.cpp	/^static constexpr const char* channelConfigDefaultFilename =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
channelCurrentIface	include/ipmid/api-types.hpp	/^constexpr int channelCurrentIface = 0x0E; \/\/ 'Present I\/F'$/;"	v	namespace:ipmi	typeref:typename:int
channelData	user_channel/channel_mgmt.hpp	/^    std::array<ChannelProperties, maxIpmiChannels> channelData;$/;"	m	class:ipmi::ChannelConfig	typeref:typename:std::array<ChannelProperties,maxIpmiChannels>
channelFromMessage	ipmid-new.cpp	/^uint8_t channelFromMessage(sdbusplus::message::message& msg)$/;"	f	namespace:ipmi	typeref:typename:uint8_t
channelInfoString	user_channel/channel_mgmt.cpp	/^static constexpr const char* channelInfoString = "channel_info";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
channelMutex	user_channel/channel_mgmt.hpp	/^    std::unique_ptr<boost::interprocess::named_recursive_mutex> channelMutex{$/;"	m	class:ipmi::ChannelConfig	typeref:typename:std::unique_ptr<boost::interprocess::named_recursive_mutex>
channelNumber	include/dbus-sdr/storagecommands.hpp	/^    uint8_t channelNumber;$/;"	m	struct:Type12Record	typeref:typename:uint8_t
channelNumber	sensorhandler.hpp	/^    uint8_t channelNumber;$/;"	m	struct:get_sdr::SensorDataFruRecordKey	typeref:typename:uint8_t
channelNvDataFilename	user_channel/channel_mgmt.cpp	/^static constexpr const char* channelNvDataFilename =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
channelPrimaryIpmb	include/ipmid/api-types.hpp	/^constexpr int channelPrimaryIpmb = 0x00;$/;"	v	namespace:ipmi	typeref:typename:int
channelSystemIface	include/ipmid/api-types.hpp	/^constexpr int channelSystemIface = 0x0F;$/;"	v	namespace:ipmi	typeref:typename:int
channelVolatileDataFilename	user_channel/channel_mgmt.cpp	/^static constexpr const char* channelVolatileDataFilename =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
chassis	chassishandler.cpp	/^namespace chassis$/;"	n	file:
chassis	include/ipmid/api-types.hpp	/^namespace chassis$/;"	n	namespace:ipmi
chassis	ipmi_fru_info_area.cpp	/^static constexpr auto chassis = "Chassis";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
chassisBridgeDevAddrProp	chassishandler.cpp	/^const static constexpr char chassisBridgeDevAddrProp[] = "BridgeDeviceAddress";$/;"	v	typeref:typename:const char[]	file:
chassisCapAddrMask	chassishandler.cpp	/^static constexpr uint8_t chassisCapAddrMask = 0xfe;$/;"	v	typeref:typename:uint8_t	file:
chassisCapFlagMask	chassishandler.cpp	/^static constexpr uint8_t chassisCapFlagMask = 0x0f;$/;"	v	typeref:typename:uint8_t	file:
chassisCapIntf	chassishandler.cpp	/^const static constexpr char chassisCapIntf[] =$/;"	v	typeref:typename:const char[]	file:
chassisFRUDevAddrProp	chassishandler.cpp	/^const static constexpr char chassisFRUDevAddrProp[] = "FRUDeviceAddress";$/;"	v	typeref:typename:const char[]	file:
chassisFrontPanelLockoutProp	chassishandler.cpp	/^const static constexpr char chassisFrontPanelLockoutProp[] =$/;"	v	typeref:typename:const char[]	file:
chassisIDState	chassishandler.cpp	/^static ChassisIDState chassisIDState = ChassisIDState::reserved;$/;"	v	typeref:typename:ChassisIDState	file:
chassisIdentifyReqLength	chassishandler.cpp	/^static constexpr size_t chassisIdentifyReqLength = 2;$/;"	v	typeref:typename:size_t	file:
chassisIntrusionProp	chassishandler.cpp	/^const static constexpr char chassisIntrusionProp[] = "ChassisIntrusionEnabled";$/;"	v	typeref:typename:const char[]	file:
chassisNMIProp	chassishandler.cpp	/^const static constexpr char chassisNMIProp[] = "ChassisNMIEnabled";$/;"	v	typeref:typename:const char[]	file:
chassisOffset	include/dbus-sdr/storagecommands.hpp	/^    uint8_t chassisOffset;$/;"	m	struct:FRUHeader	typeref:typename:uint8_t
chassisPOHStateIntf	chassishandler.cpp	/^static constexpr auto chassisPOHStateIntf =$/;"	v	typeref:typename:auto	file:
chassisPowerInterlockProp	chassishandler.cpp	/^const static constexpr char chassisPowerInterlockProp[] =$/;"	v	typeref:typename:const char[]	file:
chassisSDRDevAddrProp	chassishandler.cpp	/^const static constexpr char chassisSDRDevAddrProp[] = "SDRDeviceAddress";$/;"	v	typeref:typename:const char[]	file:
chassisSELDevAddrProp	chassishandler.cpp	/^const static constexpr char chassisSELDevAddrProp[] = "SELDeviceAddress";$/;"	v	typeref:typename:const char[]	file:
chassisSMDevAddrProp	chassishandler.cpp	/^const static constexpr char chassisSMDevAddrProp[] = "SMDeviceAddress";$/;"	v	typeref:typename:const char[]	file:
chassisStateRoot	chassishandler.cpp	/^static constexpr auto chassisStateRoot = "\/xyz\/openbmc_project\/state";$/;"	v	typeref:typename:auto	file:
chassisTypeRackMount	dbus-sdr/storagecommands.cpp	/^constexpr static const char* chassisTypeRackMount = "23";$/;"	v	namespace:ipmi::storage	typeref:typename:const char *	file:
checkAndReload	user_channel/passwd_mgr.cpp	/^void PasswdMgr::checkAndReload(void)$/;"	f	class:ipmi::PasswdMgr	typeref:typename:void
checkAndReloadNVData	user_channel/channel_mgmt.cpp	/^int ChannelConfig::checkAndReloadNVData()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
checkAndReloadUserData	user_channel/user_mgmt.cpp	/^void UserAccess::checkAndReloadUserData()$/;"	f	class:ipmi::UserAccess	typeref:typename:void
checkAndReloadVolatileData	user_channel/channel_mgmt.cpp	/^int ChannelConfig::checkAndReloadVolatileData()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
checkQueueAndAlertHost	host-cmd-manager.cpp	/^void Manager::checkQueueAndAlertHost()$/;"	f	class:phosphor::host::command::Manager	typeref:typename:void
checkSELReservation	ipmid-new.cpp	/^bool checkSELReservation(unsigned short id)$/;"	f	typeref:typename:bool
check_PROGRAMS	Makefile.am	/^check_PROGRAMS =$/;"	m
check_PROGRAMS	test/Makefile.am	/^check_PROGRAMS =$/;"	m
check_results	testit.cpp	/^int check_results(int rc, const char* method, const char* value)$/;"	f	typeref:typename:int
checksum	include/dbus-sdr/storagecommands.hpp	/^    uint8_t checksum;$/;"	m	struct:FRUHeader	typeref:typename:uint8_t
checksumSize	ipmi_fru_info_area.cpp	/^static constexpr auto checksumSize = 0x1;            \/\/ size in bytes$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
cipher	app/channel.cpp	/^namespace cipher$/;"	n	file:
cipher	app/channel.hpp	/^namespace cipher$/;"	n
cipher	app/channel.hpp	/^static constexpr auto cipher = "cipher";$/;"	v	namespace:cipher	typeref:typename:auto
cipher	transporthandler.cpp	/^namespace cipher$/;"	n	file:
cipherSuiteDefaultPrivFileName	user_channel/cipher_mgmt.hpp	/^    std::string cipherSuitePrivFileName, cipherSuiteDefaultPrivFileName;$/;"	m	class:ipmi::CipherConfig	typeref:typename:std::string
cipherSuitePrivFileName	user_channel/cipher_mgmt.hpp	/^    std::string cipherSuitePrivFileName, cipherSuiteDefaultPrivFileName;$/;"	m	class:ipmi::CipherConfig	typeref:typename:std::string
cipherSuitePrivilegeLevels	transporthandler.hpp	/^    cipherSuitePrivilegeLevels = 24,$/;"	e	enum:ipmi::transport::LanParam
clean-local	Makefile.am	/^clean-local: code-coverage-clean$/;"	t
clearQueue	host-cmd-manager.cpp	/^void Manager::clearQueue()$/;"	f	class:phosphor::host::command::Manager	typeref:typename:void
clearQueueOnPowerOn	host-cmd-manager.cpp	/^void Manager::clearQueueOnPowerOn(sdbusplus::message::message& msg)$/;"	f	class:phosphor::host::command::Manager	typeref:typename:void
clearSEL	storagehandler.cpp	/^    clearSEL(uint16_t reservationID, const std::array<char, 3>& clr,$/;"	f	typeref:typename:ipmi::RspType<uint8_t>
cmd	include/ipmid/message.hpp	/^    Cmd cmd;$/;"	m	struct:ipmi::Context	typeref:typename:Cmd
cmd	systemintfcmds.hpp	/^    uint8_t cmd;$/;"	m	struct:oem_sel_timestamped	typeref:typename:uint8_t
cmdActDeactivatePwrLimit	include/ipmid/api-types.hpp	/^constexpr Cmd cmdActDeactivatePwrLimit = 0x05;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdActivatePayload	include/ipmid/api-types.hpp	/^constexpr Cmd cmdActivatePayload = 0x48;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdActivateSession	include/ipmid/api-types.hpp	/^constexpr Cmd cmdActivateSession = 0x3A;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdAddSdr	include/ipmid/api-types.hpp	/^constexpr Cmd cmdAddSdr = 0x24;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdAddSelEntry	include/ipmid/api-types.hpp	/^constexpr Cmd cmdAddSelEntry = 0x44;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdAlertImmediate	include/ipmid/api-types.hpp	/^constexpr Cmd cmdAlertImmediate = 0x16;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdArmPefPostponeTimer	include/ipmid/api-types.hpp	/^constexpr Cmd cmdArmPefPostponeTimer = 0x11;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdBridgeMessage	include/ipmid/api-types.hpp	/^constexpr Cmd cmdBridgeMessage = 0x21;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdBridgeRequest	include/ipmid/api-types.hpp	/^constexpr Cmd cmdBridgeRequest = 0x20;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdCallback	include/ipmid/api-types.hpp	/^constexpr Cmd cmdCallback = 0x19;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdChassisControl	include/ipmid/api-types.hpp	/^constexpr Cmd cmdChassisControl = 0x02;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdChassisIdentify	include/ipmid/api-types.hpp	/^constexpr Cmd cmdChassisIdentify = 0x04;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdChassisReset	include/ipmid/api-types.hpp	/^constexpr Cmd cmdChassisReset = 0x03;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdClearBridgeStatistics	include/ipmid/api-types.hpp	/^constexpr Cmd cmdClearBridgeStatistics = 0x08;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdClearMessageFlags	include/ipmid/api-types.hpp	/^constexpr Cmd cmdClearMessageFlags = 0x30;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdClearSdrRepository	include/ipmid/api-types.hpp	/^constexpr Cmd cmdClearSdrRepository = 0x27;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdClearSel	include/ipmid/api-types.hpp	/^constexpr Cmd cmdClearSel = 0x47;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdCloseSession	include/ipmid/api-types.hpp	/^constexpr Cmd cmdCloseSession = 0x3C;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdColdReset	include/ipmid/api-types.hpp	/^constexpr Cmd cmdColdReset = 0x02;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdDeactivatePayload	include/ipmid/api-types.hpp	/^constexpr Cmd cmdDeactivatePayload = 0x49;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdDeleteSdr	include/ipmid/api-types.hpp	/^constexpr Cmd cmdDeleteSdr = 0x26;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdDeleteSelEntry	include/ipmid/api-types.hpp	/^constexpr Cmd cmdDeleteSelEntry = 0x46;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdEnableForwardedCommands	include/ipmid/api-types.hpp	/^constexpr Cmd cmdEnableForwardedCommands = 0x33;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdEnableMessageChannelRcv	include/ipmid/api-types.hpp	/^constexpr Cmd cmdEnableMessageChannelRcv = 0x32;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdEnterSdrRepoUpdateMode	include/ipmid/api-types.hpp	/^constexpr Cmd cmdEnterSdrRepoUpdateMode = 0x2A;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdErrorReport	include/ipmid/api-types.hpp	/^constexpr Cmd cmdErrorReport = 0xFF;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdExitSdrReposUpdateMode	include/ipmid/api-types.hpp	/^constexpr Cmd cmdExitSdrReposUpdateMode = 0x2B;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdForwardedCommand	include/ipmid/api-types.hpp	/^constexpr Cmd cmdForwardedCommand = 0x30;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetAcpiPowerState	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetAcpiPowerState = 0x07;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetAddresses	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetAddresses = 0x11;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetAssetTag	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetAssetTag = 0x06;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdGetAuthCode	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetAuthCode = 0x3F;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetAuxiliaryLogStatus	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetAuxiliaryLogStatus = 0x5A;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetBmcGlobalEnables	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetBmcGlobalEnables = 0x2F;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetBridgeProxyAddress	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetBridgeProxyAddress = 0x09;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetBridgeState	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetBridgeState = 0x00;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetBridgeStatistics	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetBridgeStatistics = 0x05;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetBtIfaceCapabilities	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetBtIfaceCapabilities = 0x36;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetChannelAccess	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChannelAccess = 0x41;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetChannelAuthCapabilities	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChannelAuthCapabilities = 0x38;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetChannelCipherSuites	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChannelCipherSuites = 0x54;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetChannelInfoCommand	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChannelInfoCommand = 0x42;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetChannelOemPayloadInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChannelOemPayloadInfo = 0x50;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetChannelPayloadSupport	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChannelPayloadSupport = 0x4E;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetChannelPayloadVersion	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChannelPayloadVersion = 0x4F;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetChassisCapabilities	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChassisCapabilities = 0x00;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdGetChassisDeviceId	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChassisDeviceId = 0x13;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetChassisStatus	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetChassisStatus = 0x01;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdGetCmdSubFnSupport	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetCmdSubFnSupport = 0x0B;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetCmdSupport	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetCmdSupport = 0x0A;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetCommandEnables	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetCommandEnables = 0x61;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetCommandSubFnEnables	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetCommandSubFnEnables = 0x63;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetConfigurableCmdSubFns	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetConfigurableCmdSubFns = 0x0D;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetConfigurableCmds	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetConfigurableCmds = 0x0C;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetDcmiCapabilitiesInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetDcmiCapabilitiesInfo = 0x01;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdGetDcmiConfigParameters	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetDcmiConfigParameters = 0x13;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdGetDcmiSensorInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetDcmiSensorInfo = 0x07;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdGetDeviceGuid	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetDeviceGuid = 0x08;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetDeviceId	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetDeviceId = 0x01;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetDeviceSdr	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetDeviceSdr = 0x21;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetDeviceSdrInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetDeviceSdrInfo = 0x20;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetEventCount	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetEventCount = 0x30;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetEventDestination	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetEventDestination = 0x34;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetEventReceiver	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetEventReceiver = 0x01;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetEventReceptionState	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetEventReceptionState = 0x35;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetForwardedCommands	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetForwardedCommands = 0x32;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetFruInventoryAreaInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetFruInventoryAreaInfo = 0x10;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetIcmbAddress	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetIcmbAddress = 0x02;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetIcmbCapabilities	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetIcmbCapabilities = 0x06;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetIcmbConnectionId	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetIcmbConnectionId = 0x0B;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetIcmbConnectorInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetIcmbConnectorInfo = 0x0A;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdGetIpUdpRmcpStatistics	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetIpUdpRmcpStatistics = 0x04;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetLanConfigParameters	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetLanConfigParameters = 0x02;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetLastProcessedEventId	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetLastProcessedEventId = 0x15;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetMessage	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetMessage = 0x33;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetMessageFlags	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetMessageFlags = 0x31;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetMgmtCntlrIdString	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetMgmtCntlrIdString = 0x09;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdGetNetFnSupport	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetNetFnSupport = 0x09;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetOemNetFnIanaSupport	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetOemNetFnIanaSupport = 0x64;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetPayloadActivationStatus	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetPayloadActivationStatus = 0x4A;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetPayloadInstanceInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetPayloadInstanceInfo = 0x4B;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetPefCapabilities	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetPefCapabilities = 0x10;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetPefConfigurationParams	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetPefConfigurationParams = 0x13;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetPohCounter	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetPohCounter = 0x0F;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdGetPowerLimit	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetPowerLimit = 0x03;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdGetPowerReading	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetPowerReading = 0x02;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdGetPppUdpProxyReceiveData	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetPppUdpProxyReceiveData = 0x17;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetPppUdpProxyTransmitData	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetPppUdpProxyTransmitData = 0x15;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetSdr	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSdr = 0x23;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetSdrRepositoryAllocInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSdrRepositoryAllocInfo = 0x21;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetSdrRepositoryInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSdrRepositoryInfo = 0x20;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetSdrRepositoryTime	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSdrRepositoryTime = 0x28;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetSelAllocationInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSelAllocationInfo = 0x41;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetSelEntry	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSelEntry = 0x43;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetSelInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSelInfo = 0x40;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetSelTime	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSelTime = 0x48;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetSelTimeUtcOffset	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSelTimeUtcOffset = 0x5C;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdGetSelfTestResults	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSelfTestResults = 0x04;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetSensorEventEnable	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSensorEventEnable = 0x29;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetSensorEventStatus	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSensorEventStatus = 0x2B;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetSensorHysteresis	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSensorHysteresis = 0x25;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetSensorReading	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSensorReading = 0x2D;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetSensorReadingFactors	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSensorReadingFactors = 0x23;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetSensorThreshold	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSensorThreshold = 0x27;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetSensorType	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSensorType = 0x2F;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdGetSerialModemConfig	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSerialModemConfig = 0x11;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetSessionChallenge	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSessionChallenge = 0x39;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetSessionInfo	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSessionInfo = 0x3D;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetSolConfigParameters	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSolConfigParameters = 0x22;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetSystemBootOptions	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSystemBootOptions = 0x09;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdGetSystemGuid	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSystemGuid = 0x37;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetSystemIfCapabilities	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSystemIfCapabilities = 0x57;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetSystemInfoParameters	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSystemInfoParameters = 0x59;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetSystemRestartCause	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetSystemRestartCause = 0x07;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdGetTapResponseCodes	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetTapResponseCodes = 0x13;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetTemperatureReadings	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetTemperatureReadings = 0x10;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdGetThermalLimit	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetThermalLimit = 0x0C;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdGetUserAccessCommand	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetUserAccessCommand = 0x44;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetUserCallbackOptions	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetUserCallbackOptions = 0x1B;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdGetUserNameCommand	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetUserNameCommand = 0x46;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetUserPayloadAccess	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetUserPayloadAccess = 0x4D;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdGetWatchdogTimer	include/ipmid/api-types.hpp	/^constexpr Cmd cmdGetWatchdogTimer = 0x25;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdManager	ipmid-new.cpp	/^std::unique_ptr<phosphor::host::command::Manager> cmdManager;$/;"	v	typeref:typename:std::unique_ptr<phosphor::host::command::Manager>
cmdManagerPtr	systemintfcmds.cpp	/^using cmdManagerPtr = std::unique_ptr<phosphor::host::command::Manager>;$/;"	t	typeref:typename:std::unique_ptr<phosphor::host::command::Manager>	file:
cmdManufacturingTestOn	include/ipmid/api-types.hpp	/^constexpr Cmd cmdManufacturingTestOn = 0x05;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdMaskStr	apphandler.cpp	/^static constexpr const char* cmdMaskStr = "commandMask";$/;"	v	typeref:typename:const char *	file:
cmdMasterWriteRead	include/ipmid/api-types.hpp	/^constexpr Cmd cmdMasterWriteRead = 0x52;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdPartialAddSdr	include/ipmid/api-types.hpp	/^constexpr Cmd cmdPartialAddSdr = 0x25;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdPartialAddSelEntry	include/ipmid/api-types.hpp	/^constexpr Cmd cmdPartialAddSelEntry = 0x45;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdPetAcknowledge	include/ipmid/api-types.hpp	/^constexpr Cmd cmdPetAcknowledge = 0x17;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdPlatformEvent	include/ipmid/api-types.hpp	/^constexpr Cmd cmdPlatformEvent = 0x02;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdPrepareForDiscovery	include/ipmid/api-types.hpp	/^constexpr Cmd cmdPrepareForDiscovery = 0x10;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdReadEventMessageBuffer	include/ipmid/api-types.hpp	/^constexpr Cmd cmdReadEventMessageBuffer = 0x35;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdReadFruData	include/ipmid/api-types.hpp	/^constexpr Cmd cmdReadFruData = 0x11;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdRearmSensorEvents	include/ipmid/api-types.hpp	/^constexpr Cmd cmdRearmSensorEvents = 0x2A;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdReserveDeviceSdrRepository	include/ipmid/api-types.hpp	/^constexpr Cmd cmdReserveDeviceSdrRepository = 0x22;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdReserveSdrRepository	include/ipmid/api-types.hpp	/^constexpr Cmd cmdReserveSdrRepository = 0x22;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdReserveSel	include/ipmid/api-types.hpp	/^constexpr Cmd cmdReserveSel = 0x42;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdResetWatchdogTimer	include/ipmid/api-types.hpp	/^constexpr Cmd cmdResetWatchdogTimer = 0x22;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdRunInitializationAgent	include/ipmid/api-types.hpp	/^constexpr Cmd cmdRunInitializationAgent = 0x2C;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdSendIcmbConnectionId	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSendIcmbConnectionId = 0x0C;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdSendIcmbEventMessage	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSendIcmbEventMessage = 0x33;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdSendMessage	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSendMessage = 0x34;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSendPppUdpProxyPacket	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSendPppUdpProxyPacket = 0x16;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSerialModemConnActive	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSerialModemConnActive = 0x18;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSetAcpiPowerState	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetAcpiPowerState = 0x06;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetAssetTag	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetAssetTag = 0x08;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdSetAuxiliaryLogStatus	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetAuxiliaryLogStatus = 0x5B;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdSetBmcGlobalEnables	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetBmcGlobalEnables = 0x2E;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetBridgeProxyAddress	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetBridgeProxyAddress = 0x04;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdSetBridgeState	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetBridgeState = 0x01;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdSetChannelAccess	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetChannelAccess = 0x40;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetChannelSecurityKeys	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetChannelSecurityKeys = 0x56;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetChassisCapabilities	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetChassisCapabilities = 0x05;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdSetChassisDeviceId	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetChassisDeviceId = 0x14;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdSetCommandEnables	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetCommandEnables = 0x60;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetCommandSubFnEnables	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetCommandSubFnEnables = 0x62;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetDcmiConfigParameters	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetDcmiConfigParameters = 0x12;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdSetDiscovered	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetDiscovered = 0x12;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdSetEventDestination	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetEventDestination = 0x31;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdSetEventReceiver	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetEventReceiver = 0x00;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdSetEventReceptionState	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetEventReceptionState = 0x32;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdSetForwardedCommands	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetForwardedCommands = 0x31;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSetFrontPanelButtonEnables	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetFrontPanelButtonEnables = 0x0A;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdSetIcmbAddress	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetIcmbAddress = 0x03;$/;"	v	namespace:ipmi::bridge	typeref:typename:Cmd
cmdSetLanConfigParameters	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetLanConfigParameters = 0x01;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSetLastProcessedEventId	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetLastProcessedEventId = 0x14;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdSetMgmtCntlrIdString	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetMgmtCntlrIdString = 0x0A;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdSetPefConfigurationParams	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetPefConfigurationParams = 0x12;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdSetPowerCycleInterval	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetPowerCycleInterval = 0x0B;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdSetPowerLimit	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetPowerLimit = 0x04;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdSetPowerRestorePolicy	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetPowerRestorePolicy = 0x06;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdSetPppUdpProxyTransmitData	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetPppUdpProxyTransmitData = 0x14;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSetSdrRepositoryTime	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSdrRepositoryTime = 0x29;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdSetSelTime	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSelTime = 0x49;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdSetSelTimeUtcOffset	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSelTimeUtcOffset = 0x5D;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
cmdSetSensorEventEnable	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSensorEventEnable = 0x28;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdSetSensorHysteresis	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSensorHysteresis = 0x24;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdSetSensorReadingAndEvtSts	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSensorReadingAndEvtSts = 0x30;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdSetSensorThreshold	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSensorThreshold = 0x26;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdSetSensorType	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSensorType = 0x2E;$/;"	v	namespace:ipmi::sensor_event	typeref:typename:Cmd
cmdSetSerialModemConfig	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSerialModemConfig = 0x10;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSetSerialModemMux	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSerialModemMux = 0x12;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSetSerialRoutingMux	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSerialRoutingMux = 0x1C;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSetSessionPrivilegeLevel	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSessionPrivilegeLevel = 0x3B;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetSolConfigParameters	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSolConfigParameters = 0x21;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSetSystemBootOptions	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSystemBootOptions = 0x08;$/;"	v	namespace:ipmi::chassis	typeref:typename:Cmd
cmdSetSystemInfoParameters	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetSystemInfoParameters = 0x58;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetThermalLimit	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetThermalLimit = 0x0B;$/;"	v	namespace:ipmi::dcmi	typeref:typename:Cmd
cmdSetUserAccessCommand	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetUserAccessCommand = 0x43;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetUserCallbackOptions	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetUserCallbackOptions = 0x1A;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSetUserName	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetUserName = 0x45;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetUserPasswordCommand	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetUserPasswordCommand = 0x47;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetUserPayloadAccess	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetUserPayloadAccess = 0x4C;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSetWatchdogTimer	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSetWatchdogTimer = 0x24;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdSolActivating	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSolActivating = 0x20;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdStr	apphandler.cpp	/^static constexpr const char* cmdStr = "command";$/;"	v	typeref:typename:const char *	file:
cmdSuspendBmcArps	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSuspendBmcArps = 0x03;$/;"	v	namespace:ipmi::transport	typeref:typename:Cmd
cmdSuspendResumePayloadEnc	include/ipmid/api-types.hpp	/^constexpr Cmd cmdSuspendResumePayloadEnc = 0x55;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdWarmReset	include/ipmid/api-types.hpp	/^constexpr Cmd cmdWarmReset = 0x03;$/;"	v	namespace:ipmi::app	typeref:typename:Cmd
cmdWildcard	include/ipmid/api-types.hpp	/^constexpr Cmd cmdWildcard = 0xFF;$/;"	v	namespace:ipmi	typeref:typename:Cmd
cmdWriteFruData	include/ipmid/api-types.hpp	/^constexpr Cmd cmdWriteFruData = 0x12;$/;"	v	namespace:ipmi::storage	typeref:typename:Cmd
code	include/ipmid/handler.hpp	/^    Cc code() const noexcept$/;"	f	class:ipmi::HandlerCompletion	typeref:typename:Cc
coefficientB	include/ipmid/types.hpp	/^    OffsetB coefficientB;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:OffsetB
coefficientM	include/ipmid/types.hpp	/^    Multiplier coefficientM;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:Multiplier
command	host-cmd-manager.cpp	/^namespace command$/;"	n	namespace:phosphor::host	file:
command	host-cmd-manager.hpp	/^namespace command$/;"	n	namespace:phosphor::host
command	host-interface.cpp	/^namespace command$/;"	n	namespace:phosphor::host	file:
command	host-interface.hpp	/^namespace command$/;"	n	namespace:phosphor::host
command	include/ipmid-host/cmd-utils.hpp	/^namespace command$/;"	n	namespace:phosphor::host
commandStatusHandler	host-interface.cpp	/^void Host::commandStatusHandler(IpmiCmdData cmd, bool status)$/;"	f	class:phosphor::host::command::Host	typeref:typename:void
commitWrite	apphandler.cpp	/^static constexpr uint8_t commitWrite = 0x2;$/;"	v	typeref:typename:uint8_t	file:
commonHeaderFormat	include/dbus-sdr/storagecommands.hpp	/^    uint8_t commonHeaderFormat;$/;"	m	struct:FRUHeader	typeref:typename:uint8_t
commonHeaderFormatSize	ipmi_fru_info_area.cpp	/^static constexpr auto commonHeaderFormatSize = 0x8; \/\/ size in bytes$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
completed	softoff/softoff.hpp	/^    bool completed = false;$/;"	m	class:phosphor::ipmi::SoftPowerOff	typeref:typename:bool
conf	app/channel.hpp	/^static constexpr auto conf = "confidentiality";$/;"	v	namespace:cipher	typeref:typename:auto
confTag	app/channel.hpp	/^static constexpr auto confTag = 0x80;$/;"	v	namespace:cipher	typeref:typename:auto
configDataOverhead	apphandler.cpp	/^static constexpr uint8_t configDataOverhead = 2;$/;"	v	typeref:typename:uint8_t	file:
configFile	app/channel.hpp	/^static constexpr auto configFile = "\/usr\/share\/ipmi-providers\/cipher_list.json";$/;"	v	namespace:cipher	typeref:typename:auto
configParameterLength	apphandler.cpp	/^static constexpr size_t configParameterLength = 16;$/;"	v	typeref:typename:size_t	file:
const_pointer	user_channel/user_mgmt.hpp	/^    typedef const T* const_pointer;$/;"	t	class:ipmi::SecureAllocator	typeref:typename:const T *
constructEventSdrHeaderKey	dbus-sdr/sensorcommands.cpp	/^void constructEventSdrHeaderKey(uint16_t sensorNum, uint16_t recordID,$/;"	f	namespace:ipmi	typeref:typename:void
constructJsonPayloadEnables	user_channel/user_mgmt.cpp	/^static const Json constructJsonPayloadEnables($/;"	f	namespace:ipmi	typeref:typename:const Json	file:
constructOEMSEL	selutility.cpp	/^void constructOEMSEL(uint8_t recordType, std::chrono::milliseconds timestamp,$/;"	f	namespace:ipmi::sel::internal	typeref:typename:void
constructSEL	selutility.cpp	/^void constructSEL(uint8_t recordType, std::chrono::milliseconds timestamp,$/;"	f	namespace:ipmi::sel::internal	typeref:typename:void
constructSensorSdr	dbus-sdr/sensorcommands.cpp	/^bool constructSensorSdr(ipmi::Context::ptr ctx, uint16_t sensorNum,$/;"	f	namespace:ipmi	typeref:typename:bool
constructSensorSdrHeaderKey	dbus-sdr/sensorcommands.cpp	/^void constructSensorSdrHeaderKey(uint16_t sensorNum, uint16_t recordID,$/;"	f	namespace:ipmi	typeref:typename:void
constructVrSdr	dbus-sdr/sensorcommands.cpp	/^bool constructVrSdr(ipmi::Context::ptr ctx, uint16_t sensorNum,$/;"	f	namespace:ipmi	typeref:typename:bool
containedEntities	include/ipmid/types.hpp	/^    ContainedEntitiesArray containedEntities;$/;"	m	struct:ipmi::sensor::EntityInfo	typeref:typename:ContainedEntitiesArray
container	transporthandler.hpp	/^        ObjectLookupCache& container;$/;"	m	class:ipmi::transport::ObjectLookupCache::iterator	typeref:typename:ObjectLookupCache &
containerEntityId	include/ipmid/types.hpp	/^    uint8_t containerEntityId;$/;"	m	struct:ipmi::sensor::EntityInfo	typeref:typename:uint8_t
containerEntityId	sensorhandler.hpp	/^    uint8_t containerEntityId;$/;"	m	struct:get_sdr::SensorDataEntityRecordKey	typeref:typename:uint8_t
containerEntityInstance	include/ipmid/types.hpp	/^    uint8_t containerEntityInstance;$/;"	m	struct:ipmi::sensor::EntityInfo	typeref:typename:uint8_t
containerEntityInstance	sensorhandler.hpp	/^    uint8_t containerEntityInstance;$/;"	m	struct:get_sdr::SensorDataEntityRecordKey	typeref:typename:uint8_t
continueExecution	include/ipmid/api.hpp	/^    continueExecution,$/;"	e	enum:SignalResponse
convert	selutility.cpp	/^int convert(const std::string_view& str, int base = 10)$/;"	f	namespace:ipmi::sel::internal	typeref:typename:int
convertCurrentChannelNum	user_channel/channel_layer.hpp	/^static inline uint8_t convertCurrentChannelNum(const uint8_t chNum,$/;"	f	namespace:ipmi	typeref:typename:uint8_t
convertLogEntrytoSEL	selutility.cpp	/^GetSELEntryResponse convertLogEntrytoSEL(const std::string& objPath)$/;"	f	namespace:ipmi::sel	typeref:typename:GetSELEntryResponse
convertStringToData	apphandler.cpp	/^inline std::vector<uint8_t> convertStringToData(const std::string& command)$/;"	f	typeref:typename:std::vector<uint8_t>
convertToAccessModeIndex	user_channel/channel_mgmt.cpp	/^    ChannelConfig::convertToAccessModeIndex(const std::string& mode)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:EChannelAccessMode
convertToAccessModeString	user_channel/channel_mgmt.cpp	/^std::string ChannelConfig::convertToAccessModeString(const uint8_t value)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:std::string
convertToChannelNumberFromChannelName	user_channel/channel_mgmt.cpp	/^int ChannelConfig::convertToChannelNumberFromChannelName($/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
convertToIPMIPrivilege	user_channel/user_mgmt.cpp	/^CommandPrivilege UserAccess::convertToIPMIPrivilege(const std::string& value)$/;"	f	class:ipmi::UserAccess	typeref:typename:CommandPrivilege
convertToMediumTypeIndex	user_channel/channel_mgmt.cpp	/^    ChannelConfig::convertToMediumTypeIndex(const std::string& value)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:EChannelMediumType
convertToPrivLimitIndex	user_channel/channel_mgmt.cpp	/^    ChannelConfig::convertToPrivLimitIndex(const std::string& value)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:CommandPrivilege
convertToPrivLimitIndex	user_channel/cipher_mgmt.cpp	/^uint4_t CipherConfig::convertToPrivLimitIndex(const std::string& value)$/;"	f	class:ipmi::CipherConfig	typeref:typename:uint4_t
convertToPrivLimitString	user_channel/channel_mgmt.cpp	/^std::string ChannelConfig::convertToPrivLimitString(const uint8_t value)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:std::string
convertToPrivLimitString	user_channel/cipher_mgmt.cpp	/^std::string CipherConfig::convertToPrivLimitString(const uint4_t& value)$/;"	f	class:ipmi::CipherConfig	typeref:typename:std::string
convertToProtocolTypeIndex	user_channel/channel_mgmt.cpp	/^    ChannelConfig::convertToProtocolTypeIndex(const std::string& value)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:EChannelProtocolType
convertToSessionSupportIndex	user_channel/channel_mgmt.cpp	/^    ChannelConfig::convertToSessionSupportIndex(const std::string& value)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:EChannelSessSupported
convertToString	libipmid/utils.cpp	/^static inline std::string convertToString(const InterfaceList& interfaces)$/;"	f	namespace:ipmi	typeref:typename:std::string	file:
convertToSystemPrivilege	user_channel/user_mgmt.cpp	/^std::string UserAccess::convertToSystemPrivilege(const CommandPrivilege& value)$/;"	f	class:ipmi::UserAccess	typeref:typename:std::string
convertVec	selutility.cpp	/^std::vector<uint8_t> convertVec(const std::string_view& str)$/;"	f	namespace:ipmi::sel::internal	typeref:typename:std::vector<uint8_t>
convertVersion	apphandler.cpp	/^int convertVersion(std::string s, Revision& rev)$/;"	f	typeref:typename:int
cookieOffset	chassishandler.cpp	/^static constexpr size_t cookieOffset = 1;$/;"	v	typeref:typename:size_t	file:
copyInto	transporthandler.hpp	/^void copyInto(T& t, const std::array<uint8_t, N>& bytes)$/;"	f	namespace:ipmi::transport	typeref:typename:void
correctionTime	dcmihandler.hpp	/^    uint32_t correctionTime; \/\/!< Correction time limit in milliseconds.$/;"	m	struct:dcmi::GetPowerLimitResponse	typeref:typename:uint32_t
correctionTime	dcmihandler.hpp	/^    uint32_t correctionTime; \/\/!< Correction time limit in milliseconds.$/;"	m	struct:dcmi::SetPowerLimitRequest	typeref:typename:uint32_t
countSELEntries	dbus-sdr/storagecommands.cpp	/^static int countSELEntries()$/;"	f	namespace:ipmi::storage	typeref:typename:int	file:
createFromJson	dcmihandler.cpp	/^Response createFromJson(const Json& config)$/;"	f	namespace:dcmi::sensor_info	typeref:typename:Response
createIdentifyTimer	chassishandler.cpp	/^void createIdentifyTimer()$/;"	f	typeref:typename:void
createIfAddr	transporthandler.cpp	/^void createIfAddr(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
createNeighbor	transporthandler.hpp	/^void createNeighbor(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
createProcedureLogEntry	storageaddsel.cpp	/^void createProcedureLogEntry(uint8_t procedureNum)$/;"	f	typeref:typename:void
createTimers	dbus-sdr/storagecommands.cpp	/^void createTimers()$/;"	f	namespace:ipmi::storage	typeref:typename:void
createUserMethod	user_channel/user_mgmt.cpp	/^static constexpr const char* createUserMethod = "CreateUser";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
createVLAN	transporthandler.cpp	/^void createVLAN(sdbusplus::bus::bus& bus, ChannelParams& params, uint16_t vlan)$/;"	f	namespace:ipmi::transport	typeref:typename:void
criticalHigh	include/dbus-sdr/sensorcommands.hpp	/^    std::optional<uint8_t> criticalHigh;$/;"	m	struct:ipmi::IPMIThresholds	typeref:typename:std::optional<uint8_t>
criticalLow	include/dbus-sdr/sensorcommands.hpp	/^    std::optional<uint8_t> criticalLow;$/;"	m	struct:ipmi::IPMIThresholds	typeref:typename:std::optional<uint8_t>
criticalThreshold	include/dbus-sdr/sensorcommands.hpp	/^    criticalThreshold = (1 << 5),$/;"	e	enum:IPMISensorEventEnableThresholds
csPrivDefaultFileName	user_channel/cipher_mgmt.hpp	/^static const std::string csPrivDefaultFileName =$/;"	v	namespace:ipmi	typeref:typename:const std::string
csPrivFileName	user_channel/cipher_mgmt.hpp	/^static const std::string csPrivFileName =$/;"	v	namespace:ipmi	typeref:typename:const std::string
csPrivilegeMap	user_channel/cipher_mgmt.hpp	/^    privMap csPrivilegeMap;$/;"	m	class:ipmi::CipherConfig	typeref:typename:privMap
ctx	include/ipmid/message.hpp	/^    Context::ptr ctx;$/;"	m	struct:ipmi::message::Request	typeref:typename:Context::ptr
ctx	include/ipmid/message.hpp	/^    Context::ptr ctx;$/;"	m	struct:ipmi::message::Response	typeref:typename:Context::ptr
current	include/dbus-sdr/sdrutils.hpp	/^    current = 0x3,$/;"	e	enum:SensorTypeCodes
currentChNum	user_channel/channel_layer.hpp	/^static constexpr uint8_t currentChNum = 0xE;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
currentFirmwareCondition	host-interface.cpp	/^Host::FirmwareCondition Host::currentFirmwareCondition() const$/;"	f	class:phosphor::host::command::Host	typeref:typename:Host::FirmwareCondition
currentPower	dcmihandler.hpp	/^    uint16_t currentPower;     \/\/!< Current power in watts$/;"	m	struct:dcmi::GetPowerReadingResponse	typeref:typename:uint16_t
d	apphandler.cpp	/^    uint16_t d[2];$/;"	m	struct:__anon1df7a8b50408	typeref:typename:uint16_t[2]	file:
dBusObjManager	user_channel/user_mgmt.cpp	/^static constexpr const char* dBusObjManager =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
dBusPropertiesInterface	user_channel/channel_mgmt.cpp	/^static constexpr const char* dBusPropertiesInterface =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
dBusPropertiesInterface	user_channel/user_mgmt.cpp	/^static constexpr const char* dBusPropertiesInterface =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
data	apphandler.cpp	/^    std::vector<uint8_t> data;$/;"	m	struct:__anon1df7a8b50108	typeref:typename:std::vector<uint8_t>	file:
data	dcmihandler.hpp	/^    char data[];    \/\/!< ID string$/;"	m	struct:dcmi::GetMgmntCtrlIdStrResponse	typeref:typename:char[]
data	dcmihandler.hpp	/^    char data[];    \/\/!< ID string$/;"	m	struct:dcmi::SetMgmntCtrlIdStrRequest	typeref:typename:char[]
data	dcmihandler.hpp	/^    uint8_t data[];        \/\/!< Capability array$/;"	m	struct:dcmi::GetDCMICapResponse	typeref:typename:uint8_t[]
data	dcmihandler.hpp	/^    uint8_t data[];        \/\/!< Parameter data.$/;"	m	struct:dcmi::GetConfParamsResponse	typeref:typename:uint8_t[]
data	dcmihandler.hpp	/^    uint8_t data[];      \/\/!< Configuration parameter data.$/;"	m	struct:dcmi::SetConfParamsRequest	typeref:typename:uint8_t[]
data	include/ipmid/message.hpp	/^    const uint8_t* data() const$/;"	f	struct:ipmi::message::Payload	typeref:typename:const uint8_t *
data	include/ipmid/message.hpp	/^    uint8_t* data()$/;"	f	struct:ipmi::message::Payload	typeref:typename:uint8_t *
data	ipmisensor.cpp	/^    uint8_t data;$/;"	m	struct:event_data_t	typeref:typename:uint8_t	file:
data	sensorhandler.hpp	/^    uint8_t data[3];$/;"	m	struct:PlatformEventRequest	typeref:typename:uint8_t[3]
data	systemintfcmds.hpp	/^    uint8_t data[4];$/;"	m	struct:oem_sel_timestamped	typeref:typename:uint8_t[4]
dataMask	apphandler.cpp	/^    std::vector<uint8_t> dataMask;$/;"	m	struct:__anon1df7a8b50108	typeref:typename:std::vector<uint8_t>	file:
dataRef	transporthandler.hpp	/^std::string_view dataRef(const T& t)$/;"	f	namespace:ipmi::transport	typeref:typename:std::string_view
dataSize	user_channel/passwd_mgr.cpp	/^    size_t dataSize;$/;"	m	struct:ipmi::MetaPassStruct	typeref:typename:size_t	file:
dbusToIPMI	apphandler.cpp	/^std::map<ACPIPowerState::ACPI, PowerState> dbusToIPMI = {$/;"	v	namespace:acpi_state	typeref:typename:std::map<ACPIPowerState::ACPI,PowerState>
dbusToIpmi	chassishandler.cpp	/^const std::map<DbusValue, IpmiValue> dbusToIpmi = {$/;"	v	namespace:power_policy	typeref:typename:const std::map<DbusValue,IpmiValue>
dbus_interface_t	sensorhandler.hpp	/^struct dbus_interface_t$/;"	s
dbus_to_sensor_type	sensorhandler.cpp	/^uint8_t dbus_to_sensor_type(char* p)$/;"	f	typeref:typename:uint8_t
dbusname	sensorhandler.cpp	/^    char dbusname[32];$/;"	m	struct:sensorTypemap_t	typeref:typename:char[32]	file:
dcmi	dcmihandler.cpp	/^namespace dcmi$/;"	n	file:
dcmi	dcmihandler.hpp	/^namespace dcmi$/;"	n
dcmi	include/ipmid/api-types.hpp	/^namespace dcmi$/;"	n	namespace:ipmi
dcmiCaps	dcmihandler.cpp	/^dcmi::DCMICaps dcmiCaps = {$/;"	v	typeref:typename:dcmi::DCMICaps
deallocate	user_channel/user_mgmt.hpp	/^    void deallocate(pointer p, size_type n)$/;"	f	class:ipmi::SecureAllocator	typeref:typename:void
deassert	include/ipmid/types.hpp	/^    Value deassert; \/\/ Value in case of deassert.$/;"	m	struct:ipmi::sensor::PreReqValues	typeref:typename:Value
deassert	include/ipmid/types.hpp	/^    Value deassert;$/;"	m	struct:ipmi::sensor::Values	typeref:typename:Value
deassertEvent	selutility.cpp	/^constexpr auto deassertEvent = 0x80;$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
deassertOffset0_7	include/ipmid/types.hpp	/^    uint8_t deassertOffset0_7;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
deassertOffset8_14	include/ipmid/types.hpp	/^    uint8_t deassertOffset8_14;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
deassert_state14_8	ipmisensor.cpp	/^    uint8_t deassert_state14_8;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
deassert_state7_0	ipmisensor.cpp	/^    uint8_t deassert_state7_0;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
deassertion	ipmisensor.cpp	/^    char deassertion[64];$/;"	m	struct:lookup_t	typeref:typename:char[64]	file:
deassertionEvent	dbus-sdr/storagecommands.cpp	/^constexpr static const uint8_t deassertionEvent = 0x80;$/;"	v	namespace:ipmi::storage	typeref:typename:const uint8_t	file:
debug	include/dbus-sdr/sdrutils.hpp	/^static constexpr bool debug = false;$/;"	v	typeref:typename:bool
deconfigureChannel	transporthandler.cpp	/^void deconfigureChannel(sdbusplus::bus::bus& bus, ChannelParams& params)$/;"	f	namespace:ipmi::transport	typeref:typename:void
deconfigureIfAddr6	transporthandler.cpp	/^void deconfigureIfAddr6(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
defaultAuthType	user_channel/channel_mgmt.cpp	/^static constexpr const uint8_t defaultAuthType =$/;"	v	namespace:ipmi	typeref:typename:const uint8_t	file:
defaultChannelName	user_channel/channel_mgmt.cpp	/^static constexpr const char* defaultChannelName = "RESERVED";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
defaultIsIpmiState	user_channel/channel_mgmt.cpp	/^static constexpr const bool defaultIsIpmiState = false;$/;"	v	namespace:ipmi	typeref:typename:const bool	file:
defaultMediumType	user_channel/channel_mgmt.cpp	/^static constexpr const uint8_t defaultMediumType =$/;"	v	namespace:ipmi	typeref:typename:const uint8_t	file:
defaultPrefix	transporthandler.hpp	/^    static constexpr uint8_t defaultPrefix = 128;$/;"	m	struct:ipmi::transport::AddrFamily	typeref:typename:uint8_t
defaultPrefix	transporthandler.hpp	/^    static constexpr uint8_t defaultPrefix = 32;$/;"	m	struct:ipmi::transport::AddrFamily	typeref:typename:uint8_t
defaultProtocolType	user_channel/channel_mgmt.cpp	/^static constexpr const uint8_t defaultProtocolType =$/;"	v	namespace:ipmi	typeref:typename:const uint8_t	file:
defaultSessionHandle	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t defaultSessionHandle = 0xFF;$/;"	v	namespace:session	typeref:typename:uint8_t
defaultSessionSupported	user_channel/channel_mgmt.cpp	/^static constexpr const uint8_t defaultSessionSupported =$/;"	v	namespace:ipmi	typeref:typename:const uint8_t	file:
degreesC	include/dbus-sdr/storagecommands.hpp	/^    degreesC = 0x1,$/;"	e	enum:SensorUnits
deleteAllDbusObjects	libipmid/utils.cpp	/^boost::system::error_code deleteAllDbusObjects(Context::ptr ctx,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
deleteAllDbusObjects	libipmid/utils.cpp	/^void deleteAllDbusObjects(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi	typeref:typename:void
deleteObjectIfExists	transporthandler.cpp	/^void deleteObjectIfExists(sdbusplus::bus::bus& bus, const std::string& service,$/;"	f	namespace:ipmi::transport	typeref:typename:void
deleteSDRSupported	include/dbus-sdr/storagecommands.hpp	/^    deleteSDRSupported = 0x8,$/;"	e	enum:SdrRepositoryInfoOps
deleteSELEntry	storagehandler.cpp	/^    deleteSELEntry(uint16_t reservationID, uint16_t selRecordID)$/;"	f	typeref:typename:ipmi::RspType<uint16_t>
deleteSel	selutility.hpp	/^static constexpr bool deleteSel = true;$/;"	v	namespace:ipmi::sel::operationSupport	typeref:typename:bool
deleteUserIndex	user_channel/user_mgmt.cpp	/^void UserAccess::deleteUserIndex(const size_t& usrIdx)$/;"	f	class:ipmi::UserAccess	typeref:typename:void
deleteUserInterface	user_channel/user_mgmt.cpp	/^static constexpr const char* deleteUserInterface =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
deleteUserMethod	user_channel/user_mgmt.cpp	/^static constexpr const char* deleteUserMethod = "Delete";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
delimiter	fruread.hpp	/^    std::string delimiter;$/;"	m	struct:IPMIFruData	typeref:typename:std::string
description	elog-errors.hpp	/^    const char* description() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:const char *
description	elog-errors.hpp	/^    const char* description() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::Callout	typeref:typename:const char *
description	elog-errors.hpp	/^    const char* description() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::AutoTestSimple	typeref:typename:const char *
description	elog-errors.hpp	/^    const char* description() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:const char *
description	elog-errors.hpp	/^    const char* description() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:const char *
description	elog-errors.hpp	/^    const char* description() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:const char *
description	elog-errors.hpp	/^    const char* description() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:const char *
details	dbus-sdr/sdrutils.cpp	/^namespace details$/;"	n	file:
details	elog-errors.hpp	/^namespace details$/;"	n	namespace:phosphor::logging
details	include/dbus-sdr/sdrutils.hpp	/^namespace details$/;"	n
details	include/ipmid/message.hpp	/^namespace details$/;"	n	namespace:ipmi::message
details	include/ipmid/message/pack.hpp	/^namespace details$/;"	n	namespace:ipmi::message
details	include/ipmid/message/types.hpp	/^namespace details$/;"	n	namespace:types
details	include/ipmid/message/unpack.hpp	/^namespace details$/;"	n	namespace:ipmi::message
devACPIProp	apphandler.cpp	/^const static constexpr char* devACPIProp = "DevACPIStatus";$/;"	v	namespace:acpi_state	typeref:typename:const char *	file:
devPowerState	apphandler.cpp	/^    devPowerState = 0x01,$/;"	e	enum:acpi_state::PowerStateType	file:
deviceAddress	sensorhandler.hpp	/^    uint8_t deviceAddress;$/;"	m	struct:get_sdr::SensorDataFruRecordKey	typeref:typename:uint8_t
deviceCapabilities	include/dbus-sdr/storagecommands.hpp	/^    uint8_t deviceCapabilities;$/;"	m	struct:Type12Record	typeref:typename:uint8_t
deviceHashes	dbus-sdr/storagecommands.cpp	/^boost::container::flat_map<uint8_t, std::pair<uint8_t, uint8_t>> deviceHashes;$/;"	v	namespace:ipmi::storage	typeref:typename:boost::container::flat_map<uint8_t,std::pair<uint8_t,uint8_t>>
deviceID	sensorhandler.hpp	/^    char deviceID[FRU_RECORD_DEVICE_ID_MAX_LENGTH];$/;"	m	struct:get_sdr::SensorDataFruRecordBody	typeref:typename:char[]
deviceIDLen	sensorhandler.hpp	/^    uint8_t deviceIDLen;$/;"	m	struct:get_sdr::SensorDataFruRecordBody	typeref:typename:uint8_t
deviceType	sensorhandler.hpp	/^    uint8_t deviceType;$/;"	m	struct:get_sdr::SensorDataFruRecordBody	typeref:typename:uint8_t
deviceTypeModifier	sensorhandler.hpp	/^    uint8_t deviceTypeModifier;$/;"	m	struct:get_sdr::SensorDataFruRecordBody	typeref:typename:uint8_t
device_type	sensorhandler.hpp	/^enum device_type$/;"	g
dhcpIntf	dcmihandler.hpp	/^static constexpr auto dhcpIntf =$/;"	v	namespace:dcmi	typeref:typename:auto
dhcpObj	dcmihandler.hpp	/^static constexpr auto dhcpObj = "\/xyz\/openbmc_project\/network\/config\/dhcp";$/;"	v	namespace:dcmi	typeref:typename:auto
directionMask	sensorhandler.hpp	/^static constexpr uint8_t directionMask = 0x80;$/;"	v	typeref:typename:uint8_t
disableNetworkIPMI	app/channel.cpp	/^void disableNetworkIPMI(const std::string& intf)$/;"	f	typeref:typename:void
disableOperation	user_channel/usercommands.cpp	/^static constexpr uint8_t disableOperation = 0x01;$/;"	v	namespace:ipmi	typeref:typename:uint8_t	file:
disableUser	user_channel/usercommands.cpp	/^static constexpr uint8_t disableUser = 0x00;$/;"	v	namespace:ipmi	typeref:typename:uint8_t	file:
disabled	user_channel/channel_layer.hpp	/^    disabled = 0,$/;"	e	enum:ipmi::EChannelAccessMode
discardBits	include/ipmid/message.hpp	/^    void discardBits()$/;"	f	struct:ipmi::message::Payload	typeref:typename:void
discreteReadingSensorStates	include/ipmid/types.hpp	/^    uint8_t discreteReadingSensorStates; \/\/ discrete-only, optional states$/;"	m	struct:ipmi::sensor::GetSensorResponse	typeref:typename:uint8_t
discrete_reading_setting_mask	sensorhandler.hpp	/^    uint8_t discrete_reading_setting_mask[2]; \/\/ no macro support$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t[2]
distclean-local	Makefile.am	/^distclean-local: code-coverage-dist-clean$/;"	t
doListNames	ipmid-new.cpp	/^void doListNames(boost::asio::io_context& io, sdbusplus::asio::connection& conn)$/;"	f	namespace:ipmi::__anone60fcc800110	typeref:typename:void
doNotSet	user_channel/channel_layer.hpp	/^    doNotSet = 0x00,$/;"	e	enum:ipmi::__anone8937c160103
doesDeviceExist	user_channel/channel_layer.cpp	/^bool doesDeviceExist(const uint8_t chNum)$/;"	f	namespace:ipmi	typeref:typename:bool
drain	include/ipmid/message.hpp	/^    void drain(bool wholeBytesOnly = false)$/;"	f	struct:ipmi::message::Payload	typeref:typename:void
dynamic_sensors	configure.ac	/^AC_ARG_ENABLE([dynamic_sensors],$/;"	e
dynamic_sensors	dbus-sdr/storagecommands.cpp	/^namespace dynamic_sensors::ipmi::sel$/;"	n	file:
dynamic_sensors	include/dbus-sdr/storagecommands.hpp	/^namespace dynamic_sensors::ipmi::sel$/;"	n
dynamic_sensors_write	configure.ac	/^AC_ARG_ENABLE([dynamic_sensors_write],$/;"	e
enableInstrumentation	include/dbus-sdr/sdrutils.hpp	/^static constexpr bool enableInstrumentation = false;$/;"	v	namespace:details	typeref:typename:bool
enableNetworkIPMI	app/channel.cpp	/^void enableNetworkIPMI(const std::string& intf)$/;"	f	typeref:typename:void
enableOperation	user_channel/usercommands.cpp	/^static constexpr uint8_t enableOperation = 0x00;$/;"	v	namespace:ipmi	typeref:typename:uint8_t	file:
enableScanning	sensorhandler.hpp	/^inline void enableScanning(ipmi::sensor::GetSensorResponse* resp)$/;"	f	namespace:ipmi::sensor	typeref:typename:void
enableUser	user_channel/usercommands.cpp	/^static constexpr uint8_t enableUser = 0x01;$/;"	v	namespace:ipmi	typeref:typename:uint8_t	file:
enabled	app/watchdog_service.hpp	/^        bool enabled;$/;"	m	struct:WatchdogService::Properties	typeref:typename:bool
encIdentifyObjectsSize	chassishandler.cpp	/^static constexpr size_t encIdentifyObjectsSize = 1;$/;"	v	typeref:typename:size_t	file:
enclosureIdentifyLed	chassishandler.cpp	/^void enclosureIdentifyLed(bool flag)$/;"	f	typeref:typename:void
enclosureIdentifyLedOff	chassishandler.cpp	/^void enclosureIdentifyLedOff()$/;"	f	typeref:typename:void
encryptDecryptData	user_channel/passwd_mgr.cpp	/^int PasswdMgr::encryptDecryptData(bool doEncrypt, const EVP_CIPHER* cipher,$/;"	f	class:ipmi::PasswdMgr	typeref:typename:int
encryptKeyFileName	user_channel/passwd_mgr.cpp	/^static const char* encryptKeyFileName = "\/etc\/key_file";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
end	transporthandler.hpp	/^    iterator end() noexcept$/;"	f	class:ipmi::transport::ObjectLookupCache	typeref:typename:iterator
endOfCustomFields	ipmi_fru_info_area.cpp	/^static constexpr auto endOfCustomFields = 0xC1;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
englishLanguageCode	ipmi_fru_info_area.cpp	/^static constexpr auto englishLanguageCode = 0x0;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
entireRecord	selutility.hpp	/^static constexpr auto entireRecord = 0xFF;$/;"	v	namespace:ipmi::sel	typeref:typename:auto
entityID	fruread.hpp	/^    uint8_t entityID;$/;"	m	struct:FruInstance	typeref:typename:uint8_t
entityID	include/dbus-sdr/storagecommands.hpp	/^    uint8_t entityID;$/;"	m	struct:Type12Record	typeref:typename:uint8_t
entityID	sensorhandler.hpp	/^    uint8_t entityID;$/;"	m	struct:get_sdr::SensorDataFruRecordBody	typeref:typename:uint8_t
entityId	dcmihandler.hpp	/^    uint8_t entityId;       \/\/!< Entity ID$/;"	m	struct:dcmi::GetSensorInfoRequest	typeref:typename:uint8_t
entityId	dcmihandler.hpp	/^    uint8_t entityId;       \/\/!< Entity ID$/;"	m	struct:dcmi::GetTempReadingsRequest	typeref:typename:uint8_t
entityId1	sensorhandler.hpp	/^    uint8_t entityId1;$/;"	m	struct:get_sdr::SensorDataEntityRecordKey	typeref:typename:uint8_t
entityId2	sensorhandler.hpp	/^    uint8_t entityId2;$/;"	m	struct:get_sdr::SensorDataEntityRecordBody	typeref:typename:uint8_t
entityId3	sensorhandler.hpp	/^    uint8_t entityId3;$/;"	m	struct:get_sdr::SensorDataEntityRecordBody	typeref:typename:uint8_t
entityId4	sensorhandler.hpp	/^    uint8_t entityId4;$/;"	m	struct:get_sdr::SensorDataEntityRecordBody	typeref:typename:uint8_t
entityIdToName	dcmihandler.cpp	/^static const std::map<uint8_t, std::string> entityIdToName{$/;"	v	namespace:dcmi	typeref:typename:const std::map<uint8_t,std::string>	file:
entityInstance	dcmihandler.hpp	/^    uint8_t entityInstance; \/\/!< Entity Instance (0 means all instances)$/;"	m	struct:dcmi::GetSensorInfoRequest	typeref:typename:uint8_t
entityInstance	dcmihandler.hpp	/^    uint8_t entityInstance; \/\/!< Entity Instance (0 means all instances)$/;"	m	struct:dcmi::GetTempReadingsRequest	typeref:typename:uint8_t
entityInstance	fruread.hpp	/^    uint8_t entityInstance;$/;"	m	struct:FruInstance	typeref:typename:uint8_t
entityInstance	include/dbus-sdr/storagecommands.hpp	/^    uint8_t entityInstance;$/;"	m	struct:Type12Record	typeref:typename:uint8_t
entityInstance	sensorhandler.hpp	/^    uint8_t entityInstance;$/;"	m	struct:get_sdr::SensorDataFruRecordBody	typeref:typename:uint8_t
entityInstance1	sensorhandler.hpp	/^    uint8_t entityInstance1;$/;"	m	struct:get_sdr::SensorDataEntityRecordKey	typeref:typename:uint8_t
entityInstance2	sensorhandler.hpp	/^    uint8_t entityInstance2;$/;"	m	struct:get_sdr::SensorDataEntityRecordBody	typeref:typename:uint8_t
entityInstance3	sensorhandler.hpp	/^    uint8_t entityInstance3;$/;"	m	struct:get_sdr::SensorDataEntityRecordBody	typeref:typename:uint8_t
entityInstance4	sensorhandler.hpp	/^    uint8_t entityInstance4;$/;"	m	struct:get_sdr::SensorDataEntityRecordBody	typeref:typename:uint8_t
entityManagerServiceName	dbus-sdr/storagecommands.cpp	/^constexpr static const char* entityManagerServiceName =$/;"	v	namespace:ipmi::storage	typeref:typename:const char *	file:
entityRecords	entity_map_json.hpp	/^    EntityInfoMap entityRecords;$/;"	m	class:ipmi::sensor::EntityInfoMapContainer	typeref:typename:EntityInfoMap
entityType	include/ipmid/types.hpp	/^    EntityType entityType;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:EntityType
entity_id	sensorhandler.hpp	/^    uint8_t entity_id;$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:uint8_t
entity_id	sensorhandler.hpp	/^    uint8_t entity_id;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
entity_instance	sensorhandler.hpp	/^    uint8_t entity_instance;$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:uint8_t
entity_instance	sensorhandler.hpp	/^    uint8_t entity_instance;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
entitymap_json_unittest_LDADD	test/Makefile.am	/^entitymap_json_unittest_LDADD = $(top_builddir)\/entity_map_json.o -lgmock$/;"	m
entitymap_json_unittest_SOURCES	test/Makefile.am	/^entitymap_json_unittest_SOURCES = entitymap_json_unittest.cpp$/;"	m
entries	include/dbus-sdr/sdrutils.hpp	/^    std::vector<IPMIStatsEntry> entries;$/;"	m	class:details::IPMIStatsTable	typeref:typename:std::vector<IPMIStatsEntry>
entryDataMap	selutility.cpp	/^using entryDataMap = std::map<PropertyName, PropertyType>;$/;"	t	namespace:ipmi::sel::internal	typeref:typename:std::map<PropertyName,PropertyType>	file:
enum_cast	include/ipmid/message/types.hpp	/^inline R enum_cast(T t)$/;"	f	namespace:types	typeref:typename:R
equal	transporthandler.hpp	/^bool equal(const T& a, const T& b)$/;"	f	namespace:ipmi::transport	typeref:typename:bool
eraseComplete	selutility.hpp	/^static constexpr auto eraseComplete = 0x01;$/;"	v	namespace:ipmi::sel	typeref:typename:auto
erase_time	dbus-sdr/storagecommands.cpp	/^namespace erase_time$/;"	n	namespace:dynamic_sensors::ipmi::sel	file:
errDesc	elog-errors.hpp	/^    static constexpr auto errDesc = "Generic device callout";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::Callout	typeref:typename:auto
errDesc	elog-errors.hpp	/^    static constexpr auto errDesc = "This is a simple test error.";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::AutoTestSimple	typeref:typename:auto
errDesc	elog-errors.hpp	/^    static constexpr auto errDesc = "This is test error TestCallout";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:auto
errDesc	elog-errors.hpp	/^    static constexpr auto errDesc = "This is test error two";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:auto
errDesc	elog-errors.hpp	/^    static constexpr auto errDesc = "this is test error Bar";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:auto
errDesc	elog-errors.hpp	/^    static constexpr auto errDesc = "this is test error Foo";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:auto
errDesc	elog-errors.hpp	/^    static constexpr auto errDesc = "this is test error one";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:auto
errDesc	error-HostEvent.hpp	/^    static constexpr auto errDesc = "A host system event was received";$/;"	m	struct:sdbusplus::org::open_power::Host::Error::Event	typeref:typename:auto
errDesc	error-HostEvent.hpp	/^    static constexpr auto errDesc =$/;"	m	struct:sdbusplus::org::open_power::Host::Error::MaintenanceProcedure	typeref:typename:auto
errName	elog-errors.hpp	/^    static constexpr auto errName =$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:auto
errName	elog-errors.hpp	/^    static constexpr auto errName =$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::Callout	typeref:typename:auto
errName	elog-errors.hpp	/^    static constexpr auto errName =$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::AutoTestSimple	typeref:typename:auto
errName	elog-errors.hpp	/^    static constexpr auto errName =$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:auto
errName	elog-errors.hpp	/^    static constexpr auto errName =$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:auto
errName	elog-errors.hpp	/^    static constexpr auto errName =$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:auto
errName	elog-errors.hpp	/^    static constexpr auto errName =$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:auto
errName	error-HostEvent.hpp	/^    static constexpr auto errName = "org.open_power.Host.Error.Event";$/;"	m	struct:sdbusplus::org::open_power::Host::Error::Event	typeref:typename:auto
errName	error-HostEvent.hpp	/^    static constexpr auto errName =$/;"	m	struct:sdbusplus::org::open_power::Host::Error::MaintenanceProcedure	typeref:typename:auto
errWhat	error-HostEvent.hpp	/^    static constexpr auto errWhat =$/;"	m	struct:sdbusplus::org::open_power::Host::Error::Event	typeref:typename:auto
errWhat	error-HostEvent.hpp	/^    static constexpr auto errWhat =$/;"	m	struct:sdbusplus::org::open_power::Host::Error::MaintenanceProcedure	typeref:typename:auto
error	softoff/mainapp.cpp	/^        using error =$/;"	t	function:main	typeref:typename:sdbusplus::xyz::openbmc_project::State::Host::Error::SoftOffTimeout	file:
error	storageaddsel.cpp	/^    using error = sdbusplus::org::open_power::Host::Error::MaintenanceProcedure;$/;"	t	function:createProcedureLogEntry	typeref:typename:sdbusplus::org::open_power::Host::Error::MaintenanceProcedure	file:
errorMetadata	softoff/mainapp.cpp	/^        using errorMetadata = xyz::openbmc_project::State::Host::SoftOffTimeout;$/;"	t	function:main	typeref:typename:xyz::openbmc_project::State::Host::SoftOffTimeout	file:
errorResponse	include/ipmid/handler.hpp	/^    errorResponse(message::Request::ptr request, ipmi::Cc cc)$/;"	f	namespace:ipmi	typeref:typename:message::Response::ptr
errorResponse	include/ipmid/handler.hpp	/^    errorResponse(message::Request::ptr request, ipmi::Cc cc, Args&&... args)$/;"	f	namespace:ipmi	typeref:typename:message::Response::ptr
ethStatsCmd	include/ipmid/oemopenbmc.hpp	/^    ethStatsCmd = 48,$/;"	e	enum:oem::Cmd
ethernetDefaultChannelNum	dcmihandler.hpp	/^static constexpr auto ethernetDefaultChannelNum = 0x1;$/;"	v	namespace:dcmi	typeref:typename:auto
ethernetIntf	dcmihandler.hpp	/^static constexpr auto ethernetIntf =$/;"	v	namespace:dcmi	typeref:typename:auto
event	selutility.hpp	/^    SELEventRecordFormat event; \/\/ !< The Event Record.$/;"	m	struct:ipmi::sel::GetSELEntryResponse	typeref:typename:SELEventRecordFormat
eventData1	include/ipmid/types.hpp	/^    uint8_t eventData1;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
eventData1	selutility.hpp	/^    uint8_t eventData1;       \/\/!< Event Data 1.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint8_t
eventData2	include/ipmid/types.hpp	/^    uint8_t eventData2;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
eventData2	selutility.hpp	/^    uint8_t eventData2;       \/\/!< Event Data 2.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint8_t
eventData3	include/ipmid/types.hpp	/^    uint8_t eventData3;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
eventData3	selutility.hpp	/^    uint8_t eventData3;       \/\/!< Event Data 3.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint8_t
eventDataSize	storagehandler.cpp	/^constexpr uint8_t eventDataSize = 3;$/;"	v	typeref:typename:uint8_t
eventDirectionType	sensorhandler.hpp	/^    uint8_t eventDirectionType;$/;"	m	struct:PlatformEventRequest	typeref:typename:uint8_t
eventMessageRevision	sensorhandler.hpp	/^    uint8_t eventMessageRevision;$/;"	m	struct:PlatformEventRequest	typeref:typename:uint8_t
eventMessagesEnable	include/dbus-sdr/sensorcommands.hpp	/^    eventMessagesEnable = (1 << 7),$/;"	e	enum:IPMISensorEventEnableByte2
eventMessagesEnable	include/dbus-sdr/sensorcommands.hpp	/^    eventMessagesEnable = (1 << 7),$/;"	e	enum:IPMISensorReadingByte2
eventMsgRev	include/dbus-sdr/storagecommands.hpp	/^static constexpr uint8_t eventMsgRev = 0x04;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:uint8_t
eventMsgRevision	selutility.cpp	/^constexpr auto eventMsgRevision = 0x04;$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
eventMsgRevision	selutility.hpp	/^    uint8_t eventMsgRevision; \/\/!< Event Message Revision.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint8_t
eventOffset	include/ipmid/types.hpp	/^    Offset eventOffset;$/;"	m	struct:ipmi::sensor::SelData	typeref:typename:Offset
eventReadingType	include/ipmid/types.hpp	/^    ReadingType eventReadingType;$/;"	m	struct:ipmi::sensor::SelData	typeref:typename:ReadingType
eventRecord	selutility.hpp	/^    SELEventRecord eventRecord;$/;"	m	union:ipmi::sel::SELEventRecordFormat	typeref:typename:SELEventRecord
eventType	selutility.hpp	/^    uint8_t eventType;        \/\/!< Event Dir | Event Type.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint8_t
event_data1	ipmisensor.cpp	/^    uint8_t event_data1;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
event_data2	ipmisensor.cpp	/^    uint8_t event_data2;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
event_data3	ipmisensor.cpp	/^    uint8_t event_data3;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
event_data_lookup	ipmisensor.cpp	/^char* event_data_lookup(event_data_t* p, uint8_t b)$/;"	f	typeref:typename:char *
event_data_t	ipmisensor.cpp	/^struct event_data_t$/;"	s	file:
event_generation_state	sensorhandler.hpp	/^inline void event_generation_state(bool enabled, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
event_reading_type	sensorhandler.hpp	/^    uint8_t event_reading_type;$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:uint8_t
event_reading_type	sensorhandler.hpp	/^    uint8_t event_reading_type;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
eventdata	sensordatahandler.cpp	/^ipmi_ret_t eventdata(const SetSensorReadingReq& cmdData, const Info& sensorInfo,$/;"	f	namespace:ipmi::sensor::set	typeref:typename:ipmi_ret_t
eventdata1	sensordatahandler.hpp	/^inline ipmi_ret_t eventdata1(const SetSensorReadingReq& cmdData,$/;"	f	namespace:ipmi::sensor::set	typeref:typename:ipmi_ret_t
eventdata2	sensordatahandler.cpp	/^GetSensorResponse eventdata2(const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::get	typeref:typename:GetSensorResponse
eventdata2	sensordatahandler.hpp	/^inline ipmi_ret_t eventdata2(const SetSensorReadingReq& cmdData,$/;"	f	namespace:ipmi::sensor::set	typeref:typename:ipmi_ret_t
eventdata3	sensordatahandler.hpp	/^inline ipmi_ret_t eventdata3(const SetSensorReadingReq& cmdData,$/;"	f	namespace:ipmi::sensor::set	typeref:typename:ipmi_ret_t
events	ipmid-new.cpp	/^sd_event* events = nullptr;$/;"	v	typeref:typename:sd_event *
example	elog-errors.hpp	/^namespace example$/;"	n	namespace:phosphor::logging
exceptionAction	dcmihandler.hpp	/^    uint8_t exceptionAction; \/\/!< Exception action.$/;"	m	struct:dcmi::GetPowerLimitResponse	typeref:typename:uint8_t
exceptionAction	dcmihandler.hpp	/^    uint8_t exceptionAction; \/\/!< Exception action.$/;"	m	struct:dcmi::SetPowerLimitRequest	typeref:typename:uint8_t
execute	host-cmd-manager.cpp	/^void Manager::execute(CommandHandler command)$/;"	f	class:phosphor::host::command::Manager	typeref:typename:void
execute	host-interface.cpp	/^void Host::execute(Base::Host::Command command)$/;"	f	class:phosphor::host::command::Host	typeref:typename:void
executeCallback	include/ipmid/handler.hpp	/^        executeCallback(message::Request::ptr request) override$/;"	f	class:ipmi::IpmiHandler	typeref:typename:message::Response::ptr
executeCmd	app/channel.cpp	/^static int executeCmd(const char* path, ArgTypes&&... tArgs)$/;"	f	typeref:typename:int	file:
executeIpmiCommand	ipmid-new.cpp	/^message::Response::ptr executeIpmiCommand(message::Request::ptr request)$/;"	f	namespace:ipmi	typeref:typename:message::Response::ptr
executeIpmiCommandCommon	ipmid-new.cpp	/^message::Response::ptr executeIpmiCommandCommon($/;"	f	namespace:ipmi	typeref:typename:message::Response::ptr
executeIpmiGroupCommand	ipmid-new.cpp	/^message::Response::ptr executeIpmiGroupCommand(message::Request::ptr request)$/;"	f	namespace:ipmi	typeref:typename:message::Response::ptr
executeIpmiOemCommand	ipmid-new.cpp	/^message::Response::ptr executeIpmiOemCommand(message::Request::ptr request)$/;"	f	namespace:ipmi	typeref:typename:message::Response::ptr
executionEntry	ipmid-new.cpp	/^auto executionEntry(boost::asio::yield_context yield,$/;"	f	namespace:ipmi	typeref:typename:auto
expectedSlopX	test/dbus-sdr/sensorcommands_unittest.cpp	/^static constexpr int8_t expectedSlopX = 2;$/;"	v	typeref:typename:int8_t	file:
expectedSlopY	test/dbus-sdr/sensorcommands_unittest.cpp	/^static constexpr double expectedSlopY = 0.01;$/;"	v	typeref:typename:double	file:
expireAction	app/watchdog_service.hpp	/^        Action expireAction;$/;"	m	struct:WatchdogService::Properties	typeref:typename:Action
expiredTimerUse	app/watchdog_service.hpp	/^        TimerUse expiredTimerUse;$/;"	m	struct:WatchdogService::Properties	typeref:typename:TimerUse
exponentB	include/ipmid/types.hpp	/^    Exponent exponentB;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:Exponent
exponentR	include/ipmid/types.hpp	/^    Exponent exponentR;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:Exponent
fan	include/dbus-sdr/sdrutils.hpp	/^    fan = 0x4,$/;"	e	enum:SensorTypeCodes
fanManualCmd	include/ipmid/oemopenbmc.hpp	/^    fanManualCmd = 4,$/;"	e	enum:oem::Cmd
fileLastUpdatedTime	user_channel/passwd_mgr.hpp	/^    std::time_t fileLastUpdatedTime;$/;"	m	class:ipmi::PasswdMgr	typeref:typename:std::time_t
fileLastUpdatedTime	user_channel/user_mgmt.hpp	/^    std::time_t fileLastUpdatedTime;$/;"	m	class:ipmi::UserAccess	typeref:typename:std::time_t
fillBits	include/ipmid/message.hpp	/^    bool fillBits(size_t count)$/;"	f	struct:ipmi::message::Payload	typeref:typename:bool
filterIpmiCommand	ipmid-new.cpp	/^message::Response::ptr filterIpmiCommand(message::Request::ptr request)$/;"	f	namespace:ipmi	typeref:typename:message::Response::ptr
filterList	ipmid-new.cpp	/^static std::forward_list<FilterTuple> filterList;$/;"	v	namespace:ipmi	typeref:typename:std::forward_list<FilterTuple>	file:
filterMessage	whitelist-filter.cpp	/^ipmi::Cc WhitelistFilter::filterMessage(ipmi::message::Request::ptr request)$/;"	f	class:ipmi::__anonc26dafe60110::WhitelistFilter	typeref:typename:ipmi::Cc
filter_	include/ipmid/filter.hpp	/^    Filter filter_;$/;"	m	class:ipmi::IpmiFilter	typeref:typename:Filter
filtersStr	apphandler.cpp	/^static constexpr const char* filtersStr = "filters";$/;"	v	typeref:typename:const char *	file:
findGatewayNeighbor	transporthandler.cpp	/^std::optional<IfNeigh<family>> findGatewayNeighbor(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi::transport	typeref:typename:std::optional<IfNeigh<family>>
findIfAddr	transporthandler.hpp	/^std::optional<IfAddr<family>> findIfAddr($/;"	f	namespace:ipmi::transport	typeref:typename:std::optional<IfAddr<family>>
findSELEntry	dbus-sdr/storagecommands.cpp	/^static bool findSELEntry(const int recordID,$/;"	f	namespace:ipmi::storage	typeref:typename:bool	file:
findStaticNeighbor	transporthandler.hpp	/^    findStaticNeighbor(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:std::optional<IfNeigh<family>>
find_openbmc_path	sensorhandler.cpp	/^int find_openbmc_path(uint8_t num, dbus_interface_t* interface)$/;"	f	typeref:typename:int
find_openbmc_path	testaddsel.cpp	/^int find_openbmc_path(const uint8_t num, dbus_interface_t* interface)$/;"	f	typeref:typename:int
find_type_for_sensor_number	sensorhandler.cpp	/^uint8_t find_type_for_sensor_number(uint8_t num)$/;"	f	typeref:typename:uint8_t
find_type_for_sensor_number	testit.cpp	/^uint8_t find_type_for_sensor_number(uint8_t sensor_number)$/;"	f	typeref:typename:uint8_t
findindex	ipmisensor.cpp	/^int findindex(const uint8_t sensor_type, int offset, int* index)$/;"	f	typeref:typename:int
firstEntry	selutility.hpp	/^static constexpr auto firstEntry = 0x0000;$/;"	v	namespace:ipmi::sel	typeref:typename:auto
fixedUserName	user_channel/user_mgmt.hpp	/^    bool fixedUserName;$/;"	m	struct:ipmi::UserInfo	typeref:typename:bool
fixed_int_t	include/ipmid/message/types.hpp	/^using fixed_int_t =$/;"	t
fixed_uint_t	include/ipmid/message/types.hpp	/^using fixed_uint_t =$/;"	t
flags	sensorhandler.hpp	/^    uint8_t flags;$/;"	m	struct:get_sdr::SensorDataEntityRecordKey	typeref:typename:uint8_t
flashCmd	include/ipmid/oemopenbmc.hpp	/^    flashCmd = 3,$/;"	e	enum:oem::Cmd
forceIdentifyPos	chassishandler.cpp	/^static constexpr size_t forceIdentifyPos = 1;$/;"	v	typeref:typename:size_t	file:
fp	user_channel/file.hpp	/^    FILE* fp = NULL;$/;"	m	class:phosphor::user::File	typeref:typename:FILE *
fromHexStr	dbus-sdr/storagecommands.cpp	/^static int fromHexStr(const std::string& hexStr, std::vector<uint8_t>& data)$/;"	f	namespace:ipmi::storage	typeref:typename:int	file:
fru	ipmi_fru_info_area.cpp	/^namespace fru$/;"	n	namespace:ipmi	file:
fru	ipmi_fru_info_area.hpp	/^namespace fru$/;"	n	namespace:ipmi
fru	read_fru_data.cpp	/^namespace fru$/;"	n	namespace:ipmi	file:
fru	read_fru_data.hpp	/^namespace fru$/;"	n	namespace:ipmi
fru-read-gen.cpp	Makefile.am	/^fru-read-gen.cpp: scripts\/readfru.mako.cpp scripts\/fru_gen.py @FRU_YAML_GEN@$/;"	t
fruCache	dbus-sdr/storagecommands.cpp	/^static std::vector<uint8_t> fruCache;$/;"	v	namespace:ipmi::storage	typeref:typename:std::vector<uint8_t>	file:
fruDeviceServiceName	dbus-sdr/storagecommands.cpp	/^constexpr static const char* fruDeviceServiceName =$/;"	v	namespace:ipmi::storage	typeref:typename:const char *	file:
fruID	sensorhandler.hpp	/^    uint8_t fruID;$/;"	m	struct:get_sdr::SensorDataFruRecordKey	typeref:typename:uint8_t
fruInventoryDevice	sensorhandler.cpp	/^static constexpr uint8_t fruInventoryDevice = 0x10;$/;"	v	typeref:typename:uint8_t	file:
fruMap	read_fru_data.cpp	/^FRUAreaMap fruMap;$/;"	v	namespace:ipmi::fru::cache	typeref:typename:FRUAreaMap
fruMatches	dbus-sdr/storagecommands.cpp	/^static std::vector<sdbusplus::bus::match::match> fruMatches;$/;"	v	namespace:ipmi::storage	typeref:typename:std::vector<sdbusplus::bus::match::match>	file:
fruMinSize	ipmi_fru_info_area.cpp	/^static constexpr auto fruMinSize = 0x27E0;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
fruPadValue	ipmi_fru_info_area.cpp	/^static constexpr auto fruPadValue = 0xff;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
frus	dbus-sdr/storagecommands.cpp	/^ManagedObjectType frus;$/;"	v	namespace:ipmi::storage	typeref:typename:ManagedObjectType
fullChunkSize	apphandler.cpp	/^static constexpr size_t fullChunkSize = 16;$/;"	v	typeref:typename:size_t	file:
fullyUnpacked	include/ipmid/message.hpp	/^    bool fullyUnpacked()$/;"	f	struct:ipmi::message::Payload	typeref:typename:bool
func	ipmisensor.cpp	/^    int (*func)(const sensorRES_t*, const lookup_t*, const char*);$/;"	m	struct:lookup_t	typeref:typename:int (*)(const sensorRES_t *,const lookup_t *,const char *)	file:
fw	apphandler.cpp	/^        uint8_t fw[2];$/;"	m	struct:ipmiAppGetDeviceId::__anon1df7a8b50508	typeref:typename:uint8_t[2]	file:
g1Sleep	apphandler.cpp	/^    g1Sleep = 0x09,$/;"	e	enum:acpi_state::PowerState	file:
g3	apphandler.cpp	/^    g3 = 0x07,$/;"	e	enum:acpi_state::PowerState	file:
gByteBitSize	dcmihandler.hpp	/^static constexpr auto gByteBitSize = 8;$/;"	v	namespace:dcmi	typeref:typename:auto
gDCMICapabilitiesConfig	dcmihandler.hpp	/^static constexpr auto gDCMICapabilitiesConfig =$/;"	v	namespace:dcmi	typeref:typename:auto
gDCMIPowerMgmtCapability	dcmihandler.hpp	/^static constexpr auto gDCMIPowerMgmtCapability = "PowerManagement";$/;"	v	namespace:dcmi	typeref:typename:auto
gDCMIPowerMgmtSupported	dcmihandler.hpp	/^static constexpr auto gDCMIPowerMgmtSupported = 0x1;$/;"	v	namespace:dcmi	typeref:typename:auto
gDCMISensorsConfig	dcmihandler.hpp	/^static constexpr auto gDCMISensorsConfig =$/;"	v	namespace:dcmi	typeref:typename:auto
gMaxSELEntriesMask	dcmihandler.hpp	/^static constexpr auto gMaxSELEntriesMask = 0xFFF;$/;"	v	namespace:dcmi	typeref:typename:auto
g_SensorTypeMap	sensorhandler.cpp	/^sensorTypemap_t g_SensorTypeMap[] = {$/;"	v	typeref:typename:sensorTypemap_t[]
g_fwprogress00h	ipmisensor.cpp	/^event_data_t g_fwprogress00h[] = {$/;"	v	typeref:typename:event_data_t[]
g_fwprogress02h	ipmisensor.cpp	/^event_data_t g_fwprogress02h[] = {{0x00, "Unspecified"},$/;"	v	typeref:typename:event_data_t[]
g_ipmidbuslookup	ipmisensor.cpp	/^lookup_t g_ipmidbuslookup[] = {$/;"	v	typeref:typename:lookup_t[]
g_results_method	testit.cpp	/^char g_results_method[64];$/;"	v	typeref:typename:char[64]
g_results_value	testit.cpp	/^char g_results_value[64];$/;"	v	typeref:typename:char[64]
g_sel_time	storagehandler.cpp	/^unsigned int g_sel_time = 0xFFFFFFFF;$/;"	v	typeref:typename:unsigned int
g_sensortype	testit.cpp	/^unsigned char g_sensortype[][2] = {$/;"	v	typeref:typename:unsigned char[][2]
generate_cpp	scripts/fru_gen.py	/^def generate_cpp(inventory_yaml, output_dir):$/;"	f
generate_cpp	scripts/inventory-sensor.py	/^def generate_cpp(sensor_yaml, output_dir):$/;"	f
generate_cpp	scripts/sensor_gen.py	/^def generate_cpp(sensor_yaml, output_dir):$/;"	f
generatorID	selutility.cpp	/^constexpr auto generatorID = 0x2000;$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
generatorID	selutility.hpp	/^    uint16_t generatorID;     \/\/!< Generator ID.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint16_t
get	dbus-sdr/storagecommands.cpp	/^int get()$/;"	f	namespace:dynamic_sensors::ipmi::sel::erase_time	typeref:typename:int
get	sensordatahandler.cpp	/^namespace get$/;"	n	namespace:ipmi::sensor	file:
get	sensordatahandler.cpp	/^namespace get$/;"	n	namespace:ipmi::sensor::inventory	file:
get	sensordatahandler.hpp	/^namespace get$/;"	n	namespace:ipmi::sensor
get	sensordatahandler.hpp	/^namespace get$/;"	n	namespace:ipmi::sensor::inventory
get	transporthandler.hpp	/^    PropertiesCache::iterator get(const std::string& path)$/;"	f	class:ipmi::transport::ObjectLookupCache	typeref:typename:PropertiesCache::iterator
getACFailStatus	chassishandler.cpp	/^bool getACFailStatus()$/;"	f	namespace:power_policy	typeref:typename:bool
getActiveSoftwareVersionInfo	apphandler.cpp	/^std::string getActiveSoftwareVersionInfo(ipmi::Context::ptr ctx)$/;"	f	typeref:typename:std::string
getAddrStr	chassishandler.cpp	/^std::string getAddrStr(uint8_t family, uint8_t* data, uint8_t offset,$/;"	f	typeref:typename:std::string
getAllAncestors	libipmid/utils.cpp	/^ObjectTree getAllAncestors(sdbusplus::bus::bus& bus, const std::string& path,$/;"	f	namespace:ipmi	typeref:typename:ObjectTree
getAllAncestors	libipmid/utils.cpp	/^boost::system::error_code getAllAncestors(Context::ptr ctx,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
getAllDbusObjects	include/ipmid/utils.hpp	/^    getAllDbusObjects(Context::ptr ctx, const std::string& serviceRoot,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
getAllDbusObjects	libipmid/utils.cpp	/^boost::system::error_code getAllDbusObjects(Context::ptr ctx,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
getAllDbusObjects	libipmid/utils.cpp	/^ipmi::ObjectTree getAllDbusObjects(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi	typeref:typename:ipmi::ObjectTree
getAllDbusProperties	libipmid/utils.cpp	/^PropertyMap getAllDbusProperties(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi	typeref:typename:PropertyMap
getAllDbusProperties	libipmid/utils.cpp	/^boost::system::error_code getAllDbusProperties(Context::ptr ctx,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
getAllPropertiesMethod	user_channel/user_mgmt.cpp	/^static constexpr const char* getAllPropertiesMethod = "GetAll";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
getAssertionSet	sensordatahandler.cpp	/^AssertionSet getAssertionSet(const SetSensorReadingReq& cmdData)$/;"	f	namespace:ipmi::sensor	typeref:typename:AssertionSet
getAssetTag	dcmihandler.cpp	/^ipmi_ret_t getAssetTag(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
getButtonEnabled	chassishandler.cpp	/^static std::optional<bool> getButtonEnabled(const std::string& buttonPath,$/;"	f	typeref:typename:std::optional<bool>	file:
getCSPrivilegeLevels	user_channel/cipher_mgmt.cpp	/^ipmi::Cc CipherConfig::getCSPrivilegeLevels($/;"	f	class:ipmi::CipherConfig	typeref:typename:ipmi::Cc
getChannelAccessData	user_channel/channel_layer.cpp	/^Cc getChannelAccessData(const uint8_t chNum, ChannelAccess& chAccessData)$/;"	f	namespace:ipmi	typeref:typename:Cc
getChannelAccessData	user_channel/channel_mgmt.cpp	/^Cc ChannelConfig::getChannelAccessData(const uint8_t chNum,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:Cc
getChannelAccessPersistData	user_channel/channel_layer.cpp	/^Cc getChannelAccessPersistData(const uint8_t chNum, ChannelAccess& chAccessData)$/;"	f	namespace:ipmi	typeref:typename:Cc
getChannelAccessPersistData	user_channel/channel_mgmt.cpp	/^Cc ChannelConfig::getChannelAccessPersistData(const uint8_t chNum,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:Cc
getChannelActiveSessions	user_channel/channel_layer.cpp	/^int getChannelActiveSessions(const uint8_t chNum)$/;"	f	namespace:ipmi	typeref:typename:int
getChannelActiveSessions	user_channel/channel_mgmt.cpp	/^int ChannelConfig::getChannelActiveSessions(const uint8_t chNum)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
getChannelAuthTypeSupported	user_channel/channel_layer.cpp	/^Cc getChannelAuthTypeSupported(const uint8_t chNum, uint8_t& authTypeSupported)$/;"	f	namespace:ipmi	typeref:typename:Cc
getChannelAuthTypeSupported	user_channel/channel_mgmt.cpp	/^Cc ChannelConfig::getChannelAuthTypeSupported(const uint8_t chNum,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:Cc
getChannelByName	user_channel/channel_layer.cpp	/^uint8_t getChannelByName(const std::string& chName)$/;"	f	namespace:ipmi	typeref:typename:uint8_t
getChannelByName	user_channel/channel_mgmt.hpp	/^    uint8_t getChannelByName(const std::string& chName)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:uint8_t
getChannelCipherSuites	app/channel.cpp	/^    getChannelCipherSuites(ipmi::Context::ptr ctx, uint4_t channelNumber,$/;"	f	typeref:typename:ipmi::RspType<uint8_t,std::vector<uint8_t>>
getChannelConfigObject	user_channel/channel_mgmt.cpp	/^ChannelConfig& getChannelConfigObject()$/;"	f	namespace:ipmi	typeref:typename:ChannelConfig &
getChannelEnabledAuthType	user_channel/channel_layer.cpp	/^Cc getChannelEnabledAuthType(const uint8_t chNum, const uint8_t priv,$/;"	f	namespace:ipmi	typeref:typename:Cc
getChannelEnabledAuthType	user_channel/channel_mgmt.cpp	/^Cc ChannelConfig::getChannelEnabledAuthType(const uint8_t chNum,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:Cc
getChannelInfo	user_channel/channel_layer.cpp	/^Cc getChannelInfo(const uint8_t chNum, ChannelInfo& chInfo)$/;"	f	namespace:ipmi	typeref:typename:Cc
getChannelInfo	user_channel/channel_mgmt.cpp	/^Cc ChannelConfig::getChannelInfo(const uint8_t chNum, ChannelInfo& chInfo)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:Cc
getChannelMaxTransferSize	user_channel/channel_layer.cpp	/^size_t getChannelMaxTransferSize(uint8_t chNum)$/;"	f	namespace:ipmi	typeref:typename:size_t
getChannelMaxTransferSize	user_channel/channel_mgmt.cpp	/^size_t ChannelConfig::getChannelMaxTransferSize(uint8_t chNum)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:size_t
getChannelName	user_channel/channel_layer.cpp	/^std::string getChannelName(const uint8_t chNum)$/;"	f	namespace:ipmi	typeref:typename:std::string
getChannelName	user_channel/channel_mgmt.cpp	/^std::string ChannelConfig::getChannelName(const uint8_t chNum)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:std::string
getChannelNameFromPath	user_channel/channel_mgmt.cpp	/^std::string ChannelConfig::getChannelNameFromPath(const std::string& path)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:std::string
getChannelParams	transporthandler.cpp	/^ChannelParams getChannelParams(sdbusplus::bus::bus& bus, uint8_t channel)$/;"	f	namespace:ipmi::transport	typeref:typename:ChannelParams
getChannelSessionSupport	user_channel/channel_layer.cpp	/^EChannelSessSupported getChannelSessionSupport(const uint8_t chNum)$/;"	f	namespace:ipmi	typeref:typename:EChannelSessSupported
getChannelSessionSupport	user_channel/channel_mgmt.cpp	/^    ChannelConfig::getChannelSessionSupport(const uint8_t chNum)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:EChannelSessSupported
getCipherConfigObject	user_channel/cipher_mgmt.cpp	/^CipherConfig& getCipherConfigObject(const std::string& csFileName,$/;"	f	namespace:ipmi	typeref:typename:CipherConfig &
getCipherList	transporthandler.cpp	/^std::vector<uint8_t> getCipherList()$/;"	f	namespace:cipher	typeref:typename:std::vector<uint8_t>
getCipherRecords	app/channel.cpp	/^std::pair<std::vector<uint8_t>, std::vector<uint8_t>> getCipherRecords()$/;"	f	namespace:cipher	typeref:typename:std::pair<std::vector<uint8_t>,std::vector<uint8_t>>
getContainer	entity_map_json.cpp	/^EntityInfoMapContainer* EntityInfoMapContainer::getContainer()$/;"	f	class:ipmi::sensor::EntityInfoMapContainer	typeref:typename:EntityInfoMapContainer *
getCurrentBmcState	apphandler.cpp	/^bool getCurrentBmcState()$/;"	f	typeref:typename:bool
getCurrentBmcStateWithFallback	apphandler.cpp	/^bool getCurrentBmcStateWithFallback(const bool fallbackAvailability)$/;"	f	typeref:typename:bool
getDCMICapabilities	dcmihandler.cpp	/^ipmi_ret_t getDCMICapabilities(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
getDCMIConfParams	dcmihandler.cpp	/^ipmi_ret_t getDCMIConfParams(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
getDHCPEnabled	dcmihandler.cpp	/^bool getDHCPEnabled()$/;"	f	namespace:dcmi	typeref:typename:bool
getDHCPOption	dcmihandler.cpp	/^bool getDHCPOption(std::string prop)$/;"	f	namespace:dcmi	typeref:typename:bool
getDHCPProperty	transporthandler.cpp	/^EthernetInterface::DHCPConf getDHCPProperty(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi::transport	typeref:typename:EthernetInterface::DHCPConf
getDbusObject	include/ipmid/utils.hpp	/^    getDbusObject(Context::ptr ctx, const std::string& interface,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
getDbusObject	libipmid/utils.cpp	/^DbusObjectInfo getDbusObject(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi	typeref:typename:DbusObjectInfo
getDbusObject	libipmid/utils.cpp	/^boost::system::error_code getDbusObject(Context::ptr ctx,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
getDbusProperty	include/ipmid/utils.hpp	/^    getDbusProperty(Context::ptr ctx, const std::string& service,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
getDbusProperty	libipmid/utils.cpp	/^Value getDbusProperty(sdbusplus::bus::bus& bus, const std::string& service,$/;"	f	namespace:ipmi	typeref:typename:Value
getDbusProperty	user_channel/channel_mgmt.cpp	/^int ChannelConfig::getDbusProperty(const std::string& service,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
getEnclosureIdentifyConnection	chassishandler.cpp	/^std::string getEnclosureIdentifyConnection()$/;"	f	typeref:typename:std::string
getEntityManagerProperties	dbus-sdr/sdrutils.cpp	/^std::map<std::string, Value> getEntityManagerProperties(const char* path,$/;"	f	namespace:ipmi	typeref:typename:std::map<std::string,Value>
getEntryTimeStamp	selutility.cpp	/^std::chrono::seconds getEntryTimeStamp(const std::string& objPath)$/;"	f	namespace:ipmi::sel	typeref:typename:std::chrono::seconds
getEraseStatus	selutility.hpp	/^static constexpr auto getEraseStatus = 0x00;$/;"	v	namespace:ipmi::sel	typeref:typename:auto
getFileTimestamp	dbus-sdr/storagecommands.cpp	/^static int getFileTimestamp(const std::filesystem::path& file)$/;"	f	namespace:dynamic_sensors::ipmi::sel	typeref:typename:int	file:
getFru	dbus-sdr/storagecommands.cpp	/^ipmi::Cc getFru(ipmi::Context::ptr ctx, uint8_t devId)$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::Cc
getFruAreaData	read_fru_data.cpp	/^const FruAreaData& getFruAreaData(const FRUId& fruNum)$/;"	f	namespace:ipmi::fru	typeref:typename:const FruAreaData &
getFruSdrCount	dbus-sdr/storagecommands.cpp	/^ipmi_ret_t getFruSdrCount(ipmi::Context::ptr ctx, size_t& count)$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi_ret_t
getFruSdrs	dbus-sdr/storagecommands.cpp	/^ipmi_ret_t getFruSdrs(ipmi::Context::ptr ctx, size_t index,$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi_ret_t
getFunc	include/ipmid/types.hpp	/^    std::function<GetSensorResponse(const Info&)> getFunc;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:std::function<GetSensorResponse (const Info &)>
getGatewayNeighbor	transporthandler.cpp	/^std::optional<IfNeigh<family>> getGatewayNeighbor(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi::transport	typeref:typename:std::optional<IfNeigh<family>>
getGatewayProperty	transporthandler.hpp	/^    getGatewayProperty(sdbusplus::bus::bus& bus, const ChannelParams& params)$/;"	f	namespace:ipmi::transport	typeref:typename:std::optional<typename AddrFamily<family>::addr>
getHostName	dcmihandler.cpp	/^std::string getHostName(void)$/;"	f	namespace:dcmi	typeref:typename:std::string
getHostNetworkData	chassishandler.cpp	/^int getHostNetworkData(ipmi::message::Payload& payload)$/;"	f	typeref:typename:int
getIPMIThresholds	dbus-sdr/sensorcommands.cpp	/^IPMIThresholds getIPMIThresholds(const DbusInterfaceMap& sensorMap)$/;"	f	namespace:ipmi	typeref:typename:IPMIThresholds
getIPv6AcceptRA	transporthandler.cpp	/^static bool getIPv6AcceptRA(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi::transport	typeref:typename:bool	file:
getIfAddr	transporthandler.hpp	/^auto getIfAddr($/;"	f	namespace:ipmi::transport	typeref:typename:auto
getIfAddr4	transporthandler.cpp	/^auto getIfAddr4(sdbusplus::bus::bus& bus, const ChannelParams& params)$/;"	f	namespace:ipmi::transport	typeref:typename:auto
getInitialized	app/watchdog_service.cpp	/^bool WatchdogService::getInitialized()$/;"	f	class:WatchdogService	typeref:typename:bool
getInterfaceIndex	ipmid-new.cpp	/^EInterfaceIndex getInterfaceIndex(void)$/;"	f	typeref:typename:EInterfaceIndex
getIoContext	libipmid/sdbus-asio.cpp	/^std::shared_ptr<boost::asio::io_context> getIoContext()$/;"	f	typeref:typename:std::shared_ptr<boost::asio::io_context>
getIpmiEntityRecords	entity_map_json.cpp	/^const EntityInfoMap& EntityInfoMapContainer::getIpmiEntityRecords()$/;"	f	class:ipmi::sensor::EntityInfoMapContainer	typeref:typename:const EntityInfoMap &
getLan	transporthandler.cpp	/^RspType<message::Payload> getLan(Context::ptr ctx, uint4_t channelBits,$/;"	f	namespace:ipmi::transport	typeref:typename:RspType<message::Payload>
getLanIPv6Address	transporthandler.cpp	/^void getLanIPv6Address(message::Payload& ret, uint8_t channel, uint8_t set,$/;"	f	namespace:ipmi::transport	typeref:typename:void
getLanOem	transporthandler.cpp	/^RspType<message::Payload> getLanOem(uint8_t channel, uint8_t parameter,$/;"	f	namespace:ipmi::transport	typeref:typename:RspType<message::Payload>
getMACProperty	transporthandler.cpp	/^ether_addr getMACProperty(sdbusplus::bus::bus& bus, const ChannelParams& params)$/;"	f	namespace:ipmi::transport	typeref:typename:ether_addr
getManagedObjects	libipmid/utils.cpp	/^ObjectValueTree getManagedObjects(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi	typeref:typename:ObjectValueTree
getManagedObjects	libipmid/utils.cpp	/^boost::system::error_code getManagedObjects(Context::ptr ctx,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
getManagedObjectsMethod	user_channel/user_mgmt.cpp	/^static constexpr const char* getManagedObjectsMethod = "GetManagedObjects";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
getManagementNICID	user_channel/channel_mgmt.cpp	/^uint8_t ChannelConfig::getManagementNICID()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:uint8_t
getMgmntCtrlIdStr	dcmihandler.cpp	/^ipmi_ret_t getMgmntCtrlIdStr(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
getName	include/dbus-sdr/sdrutils.hpp	/^    const std::string& getName(size_t index)$/;"	f	class:details::IPMIStatsTable	typeref:typename:const std::string &
getName	include/dbus-sdr/sdrutils.hpp	/^    const std::string& getName(void) const$/;"	f	class:details::IPMIStatsEntry	typeref:typename:const std::string &
getNextCommand	host-cmd-manager.cpp	/^IpmiCmdData Manager::getNextCommand()$/;"	f	class:phosphor::host::command::Manager	typeref:typename:IpmiCmdData
getNextRecordID	dbus-sdr/storagecommands.cpp	/^    getNextRecordID(const uint16_t recordID,$/;"	f	namespace:ipmi::storage	typeref:typename:uint16_t	file:
getObjectInterfaces	dbus-sdr/sdrutils.cpp	/^    getObjectInterfaces(const char* path)$/;"	f	namespace:ipmi	typeref:typename:std::map<std::string,std::vector<std::string>>
getObjectMethod	user_channel/user_mgmt.cpp	/^static constexpr const char* getObjectMethod = "GetObject";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
getObjects	chassishandler.cpp	/^settings::Objects& getObjects()$/;"	f	namespace:chassis::internal::cache	typeref:typename:settings::Objects &
getPOHCounter	chassishandler.cpp	/^uint32_t getPOHCounter()$/;"	f	typeref:typename:uint32_t
getPasswdByUserName	user_channel/passwd_mgr.cpp	/^std::string PasswdMgr::getPasswdByUserName(const std::string& userName)$/;"	f	class:ipmi::PasswdMgr	typeref:typename:std::string
getPathFromSensorNumber	dbus-sdr/sdrutils.cpp	/^std::string getPathFromSensorNumber(uint16_t sensorNum)$/;"	f	typeref:typename:std::string
getPcap	dcmihandler.cpp	/^uint32_t getPcap(sdbusplus::bus::bus& bus)$/;"	f	namespace:dcmi	typeref:typename:uint32_t
getPcapEnabled	dcmihandler.cpp	/^bool getPcapEnabled(sdbusplus::bus::bus& bus)$/;"	f	namespace:dcmi	typeref:typename:bool
getPowerLimit	dcmihandler.cpp	/^ipmi_ret_t getPowerLimit(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
getPowerReading	dcmihandler.cpp	/^int64_t getPowerReading(sdbusplus::bus::bus& bus)$/;"	f	typeref:typename:int64_t
getPowerReading	dcmihandler.cpp	/^ipmi_ret_t getPowerReading(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
getPowerRestorePolicy	chassishandler.cpp	/^std::optional<uint2_t> getPowerRestorePolicy()$/;"	f	namespace:power_policy	typeref:typename:std::optional<uint2_t>
getPowerStatus	chassishandler.cpp	/^std::optional<bool> getPowerStatus()$/;"	f	namespace:power_policy	typeref:typename:std::optional<bool>
getProperties	app/watchdog_service.cpp	/^WatchdogService::Properties WatchdogService::getProperties()$/;"	f	class:WatchdogService	typeref:typename:WatchdogService::Properties
getProperty	app/watchdog_service.cpp	/^T WatchdogService::getProperty(const std::string& key)$/;"	f	class:WatchdogService	typeref:typename:T
getRestartCause	chassishandler.cpp	/^static std::optional<uint4_t> getRestartCause(ipmi::Context::ptr ctx)$/;"	f	typeref:typename:std::optional<uint4_t>	file:
getSELEntry	storagehandler.cpp	/^ipmi_ret_t getSELEntry(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
getSELLogFiles	dbus-sdr/storagecommands.cpp	/^static bool getSELLogFiles(std::vector<std::filesystem::path>& selLogFiles)$/;"	f	namespace:ipmi::storage	typeref:typename:bool	file:
getScaledIPMIValue	dbus-sdr/sensorutils.cpp	/^uint8_t getScaledIPMIValue(const double value, const double max,$/;"	f	namespace:ipmi	typeref:typename:uint8_t
getSdBus	libipmid/sdbus-asio.cpp	/^std::shared_ptr<sdbusplus::asio::connection> getSdBus()$/;"	f	typeref:typename:std::shared_ptr<sdbusplus::asio::connection>
getSelAllocationInfo	selutility.hpp	/^static constexpr bool getSelAllocationInfo = false;$/;"	v	namespace:ipmi::sel::operationSupport	typeref:typename:bool
getSensorAttributes	dbus-sdr/sensorutils.cpp	/^bool getSensorAttributes(const double max, const double min, int16_t& mValue,$/;"	f	namespace:ipmi	typeref:typename:bool
getSensorConfigurationInterface	dbus-sdr/sdrutils.cpp	/^const std::string* getSensorConfigurationInterface($/;"	f	namespace:ipmi	typeref:typename:const std::string *
getSensorConnection	include/dbus-sdr/sensorcommands.hpp	/^    getSensorConnection(ipmi::Context::ptr ctx, uint16_t sensnum,$/;"	f	namespace:ipmi	typeref:typename:ipmi_ret_t
getSensorDataRecord	dbus-sdr/sensorcommands.cpp	/^    getSensorDataRecord(ipmi::Context::ptr ctx,$/;"	f	namespace:ipmi	typeref:typename:int	file:
getSensorEventTypeFromPath	dbus-sdr/sdrutils.cpp	/^uint8_t getSensorEventTypeFromPath(const std::string& path)$/;"	f	typeref:typename:uint8_t
getSensorInfo	dcmihandler.cpp	/^ipmi_ret_t getSensorInfo(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
getSensorMap	dbus-sdr/sensorcommands.cpp	/^static bool getSensorMap(ipmi::Context::ptr ctx, std::string sensorConnection,$/;"	f	namespace:ipmi	typeref:typename:bool	file:
getSensorMaxMin	dbus-sdr/sensorcommands.cpp	/^static void getSensorMaxMin(const DbusInterfaceMap& sensorMap, double& max,$/;"	f	namespace:ipmi	typeref:typename:void	file:
getSensorNumMap	dbus-sdr/sdrutils.cpp	/^bool getSensorNumMap(std::shared_ptr<SensorNumMap>& sensorNumMap)$/;"	f	namespace:details	typeref:typename:bool
getSensorNumberFromPath	dbus-sdr/sdrutils.cpp	/^uint16_t getSensorNumberFromPath(const std::string& path)$/;"	f	typeref:typename:uint16_t
getSensorSubtree	dbus-sdr/sdrutils.cpp	/^bool getSensorSubtree(SensorSubTree& subtree)$/;"	f	typeref:typename:bool
getSensorSubtree	dbus-sdr/sdrutils.cpp	/^uint16_t getSensorSubtree(std::shared_ptr<SensorSubTree>& subtree)$/;"	f	namespace:details	typeref:typename:uint16_t
getSensorThresholds	sensorhandler.cpp	/^get_sdr::GetSensorThresholdsResponse getSensorThresholds(uint8_t sensorNum)$/;"	f	typeref:typename:get_sdr::GetSensorThresholdsResponse
getSensorTree	include/dbus-sdr/sensorcommands.hpp	/^SensorSubTree& getSensorTree()$/;"	f	namespace:ipmi	typeref:typename:SensorSubTree &
getSensorTypeFromPath	dbus-sdr/sdrutils.cpp	/^uint8_t getSensorTypeFromPath(const std::string& path)$/;"	f	typeref:typename:uint8_t
getSensorTypeStringFromPath	dbus-sdr/sdrutils.cpp	/^std::string getSensorTypeStringFromPath(const std::string& path)$/;"	f	typeref:typename:std::string
getService	libipmid/utils.cpp	/^boost::system::error_code getService(Context::ptr ctx, const std::string& intf,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
getService	libipmid/utils.cpp	/^const std::string& ServiceCache::getService(sdbusplus::bus::bus& bus)$/;"	f	class:ipmi::ServiceCache	typeref:typename:const std::string &
getService	libipmid/utils.cpp	/^std::string getService(sdbusplus::bus::bus& bus, const std::string& intf,$/;"	f	namespace:ipmi	typeref:typename:std::string
getServiceAndPath	sensordatahandler.cpp	/^ServicePath getServiceAndPath(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi::sensor	typeref:typename:ServicePath
getSessionDetails	apphandler.cpp	/^ipmi::Cc getSessionDetails(ipmi::Context::ptr ctx, const std::string& service,$/;"	f	typeref:typename:ipmi::Cc
getSessionInfoRequestData	apphandler.cpp	/^uint8_t getSessionInfoRequestData(const ipmi::Context::ptr ctx,$/;"	f	typeref:typename:uint8_t
getSessionState	apphandler.cpp	/^uint8_t getSessionState(ipmi::Context::ptr ctx, const std::string& service,$/;"	f	typeref:typename:uint8_t
getSetStatus	transporthandler.cpp	/^SetStatus& getSetStatus(uint8_t channel)$/;"	f	namespace:ipmi::transport	typeref:typename:SetStatus &
getSubTreeMethod	user_channel/user_mgmt.cpp	/^static constexpr const char* getSubTreeMethod = "GetSubTree";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
getSupportedVrProfiles	dbus-sdr/sensorcommands.cpp	/^    getSupportedVrProfiles(const ipmi::DbusInterfaceMap::mapped_type& object)$/;"	f	namespace:ipmi::sensor	typeref:typename:std::optional<std::vector<std::string>>	file:
getSystemPrivAndGroups	user_channel/user_mgmt.cpp	/^void UserAccess::getSystemPrivAndGroups()$/;"	f	class:ipmi::UserAccess	typeref:typename:void
getTempReadings	dcmihandler.cpp	/^ipmi_ret_t getTempReadings(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
getTotalSessionCount	apphandler.cpp	/^uint8_t getTotalSessionCount()$/;"	f	typeref:typename:uint8_t
getType12SDRs	dbus-sdr/storagecommands.cpp	/^std::vector<uint8_t> getType12SDRs(uint16_t index, uint16_t recordId)$/;"	f	namespace:ipmi::storage	typeref:typename:std::vector<uint8_t>
getUpdatedFileTime	user_channel/channel_mgmt.cpp	/^std::time_t ChannelConfig::getUpdatedFileTime(const std::string& fileName)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:std::time_t
getUpdatedFileTime	user_channel/passwd_mgr.cpp	/^std::time_t PasswdMgr::getUpdatedFileTime()$/;"	f	class:ipmi::PasswdMgr	typeref:typename:std::time_t
getUpdatedFileTime	user_channel/user_mgmt.cpp	/^std::time_t UserAccess::getUpdatedFileTime()$/;"	f	class:ipmi::UserAccess	typeref:typename:std::time_t
getUserAccessObject	user_channel/user_mgmt.cpp	/^UserAccess& getUserAccessObject()$/;"	f	namespace:ipmi	typeref:typename:UserAccess &
getUserId	user_channel/user_mgmt.cpp	/^uint8_t UserAccess::getUserId(const std::string& userName)$/;"	f	class:ipmi::UserAccess	typeref:typename:uint8_t
getUserInfo	user_channel/user_mgmt.cpp	/^UserInfo* UserAccess::getUserInfo(const uint8_t userId)$/;"	f	class:ipmi::UserAccess	typeref:typename:UserInfo *
getUserName	user_channel/user_mgmt.cpp	/^Cc UserAccess::getUserName(const uint8_t userId, std::string& userName)$/;"	f	class:ipmi::UserAccess	typeref:typename:Cc
getUserNameFromPath	user_channel/user_mgmt.cpp	/^int getUserNameFromPath(const std::string& path, std::string& userName)$/;"	f	namespace:ipmi	typeref:typename:int
getUserObjProperties	user_channel/user_mgmt.cpp	/^int UserAccess::getUserObjProperties(const DbusUserObjValue& userObjs,$/;"	f	class:ipmi::UserAccess	typeref:typename:int
getUserProperties	user_channel/user_mgmt.cpp	/^void UserAccess::getUserProperties(const DbusUserObjProperties& properties,$/;"	f	class:ipmi::UserAccess	typeref:typename:void
getUserService	user_channel/user_mgmt.cpp	/^std::string getUserService(sdbusplus::bus::bus& bus, const std::string& intf,$/;"	f	namespace:ipmi	typeref:typename:std::string
getUserServiceName	user_channel/user_mgmt.cpp	/^static std::string getUserServiceName()$/;"	f	namespace:ipmi	typeref:typename:std::string	file:
getUsersTblPtr	user_channel/user_mgmt.cpp	/^UsersTbl* UserAccess::getUsersTblPtr()$/;"	f	class:ipmi::UserAccess	typeref:typename:UsersTbl *
getUsrMgmtSyncIndex	user_channel/user_mgmt.cpp	/^uint8_t UserAccess::getUsrMgmtSyncIndex()$/;"	f	class:ipmi::UserAccess	typeref:typename:uint8_t
getVLANProperty	transporthandler.cpp	/^uint16_t getVLANProperty(sdbusplus::bus::bus& bus, const ChannelParams& params)$/;"	f	namespace:ipmi::transport	typeref:typename:uint16_t
getVrEventStatus	dbus-sdr/sensorcommands.cpp	/^bool getVrEventStatus(ipmi::Context::ptr ctx, const std::string& connection,$/;"	f	namespace:ipmi::sensor	typeref:typename:bool
getWRWhitelist	apphandler.cpp	/^static std::vector<i2cMasterWRWhitelist>& getWRWhitelist()$/;"	f	typeref:typename:std::vector<i2cMasterWRWhitelist> &	file:
get_bus_for_path	sensorhandler.cpp	/^int get_bus_for_path(const char* path, char** busname)$/;"	f	typeref:typename:int
get_count	sensorhandler.hpp	/^inline bool get_count(void* req)$/;"	f	namespace:get_sdr_info::request	typeref:typename:bool
get_device_id_strlen	sensorhandler.hpp	/^inline uint8_t get_device_id_strlen(SensorDataFruRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:uint8_t
get_id_strlen	sensorhandler.hpp	/^inline uint8_t get_id_strlen(SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:uint8_t
get_record_id	sensorhandler.hpp	/^inline uint16_t get_record_id(GetSdrReq* req)$/;"	f	namespace:get_sdr::request	typeref:typename:uint16_t
get_reservation_id	sensorhandler.hpp	/^inline uint16_t get_reservation_id(GetSdrReq* req)$/;"	f	namespace:get_sdr::request	typeref:typename:uint16_t
get_sdr	sensorhandler.hpp	/^namespace get_sdr$/;"	n
get_sdr_info	sensorhandler.hpp	/^namespace get_sdr_info$/;"	n
get_type_from_interface	sensorhandler.cpp	/^uint8_t get_type_from_interface(dbus_interface_t dbus_if)$/;"	f	typeref:typename:uint8_t
googOemNumber	include/ipmid/iana.hpp	/^constexpr Number googOemNumber = 11129;$/;"	v	namespace:oem	typeref:typename:Number
gpioCmd	include/ipmid/oemopenbmc.hpp	/^    gpioCmd = 1,$/;"	e	enum:oem::Cmd
groupDCMI	include/ipmid/api-types.hpp	/^constexpr Group groupDCMI = 0xDC;$/;"	v	namespace:ipmi	typeref:typename:Group
groupDMTG	include/ipmid/api-types.hpp	/^constexpr Group groupDMTG = 0x01;$/;"	v	namespace:ipmi	typeref:typename:Group
groupExtId	dcmihandler.hpp	/^static constexpr auto groupExtId = 0xDC;$/;"	v	namespace:dcmi	typeref:typename:auto
groupHandlerMap	ipmid-new.cpp	/^    groupHandlerMap;$/;"	v	namespace:ipmi	typeref:typename:std::unordered_map<unsigned int,HandlerTuple>	file:
groupMagicSize	include/ipmid/oemrouter.hpp	/^constexpr std::size_t groupMagicSize = 3;$/;"	v	namespace:oem	typeref:typename:std::size_t
groupPICMG	include/ipmid/api-types.hpp	/^constexpr Group groupPICMG = 0x00;$/;"	v	namespace:ipmi	typeref:typename:Group
groupSSI	include/ipmid/api-types.hpp	/^constexpr Group groupSSI = 0x02;$/;"	v	namespace:ipmi	typeref:typename:Group
groupVSO	include/ipmid/api-types.hpp	/^constexpr Group groupVSO = 0x03;$/;"	v	namespace:ipmi	typeref:typename:Group
handleLegacyIpmiCommand	ipmid-new.cpp	/^void handleLegacyIpmiCommand(sdbusplus::message::message& m)$/;"	f	typeref:typename:void
handleRestrictedModeChange	whitelist-filter.cpp	/^void WhitelistFilter::handleRestrictedModeChange(sdbusplus::message::message& m)$/;"	f	class:ipmi::__anonc26dafe60110::WhitelistFilter	typeref:typename:void
handleSignal	libipmid/signals.cpp	/^    void handleSignal(const boost::system::error_code& ec, int sigNum)$/;"	f	class:__anonf9df85400110::SignalHandler	typeref:typename:void	file:
handlerCtx	include/ipmid/handler.hpp	/^    void* handlerCtx;$/;"	m	class:ipmi::IpmiHandler	typeref:typename:void *
handlerMap	ipmid-new.cpp	/^    handlerMap;$/;"	v	namespace:ipmi	typeref:typename:std::unordered_map<unsigned int,HandlerTuple>	file:
handler_	include/ipmid/handler.hpp	/^    Handler handler_;$/;"	m	class:ipmi::IpmiHandler	typeref:typename:Handler
handler_	include/ipmid/handler.hpp	/^    ipmid_callback_t handler_;$/;"	m	class:ipmi::IpmiHandler	typeref:typename:ipmid_callback_t
handler_	include/ipmid/handler.hpp	/^    oem::Handler handler_;$/;"	m	class:ipmi::IpmiHandler	typeref:typename:oem::Handler
handlers	libipmid/signals.cpp	/^        handlers;$/;"	m	class:__anonf9df85400110::SignalHandler	typeref:typename:std::forward_list<std::tuple<int,std::function<SignalResponse (int)>>>	file:
hasScale	include/ipmid/types.hpp	/^    bool hasScale;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:bool
hashSize	user_channel/passwd_mgr.cpp	/^    size_t hashSize;$/;"	m	struct:ipmi::MetaPassStruct	typeref:typename:size_t	file:
header	include/dbus-sdr/storagecommands.hpp	/^    get_sdr::SensorDataRecordHeader header;$/;"	m	struct:Type12Record	typeref:typename:get_sdr::SensorDataRecordHeader
header	sensorhandler.hpp	/^    SensorDataRecordHeader header;$/;"	m	struct:get_sdr::SensorDataEntityRecord	typeref:typename:SensorDataRecordHeader
header	sensorhandler.hpp	/^    SensorDataRecordHeader header;$/;"	m	struct:get_sdr::SensorDataEventRecord	typeref:typename:SensorDataRecordHeader
header	sensorhandler.hpp	/^    SensorDataRecordHeader header;$/;"	m	struct:get_sdr::SensorDataFruRecord	typeref:typename:SensorDataRecordHeader
header	sensorhandler.hpp	/^    SensorDataRecordHeader header;$/;"	m	struct:get_sdr::SensorDataFullRecord	typeref:typename:SensorDataRecordHeader
header	sensorhandler.hpp	/^namespace header$/;"	n	namespace:get_sdr
host	host-cmd-manager.cpp	/^namespace host$/;"	n	namespace:phosphor	file:
host	host-cmd-manager.hpp	/^namespace host$/;"	n	namespace:phosphor
host	host-interface.cpp	/^namespace host$/;"	n	namespace:phosphor	file:
host	host-interface.hpp	/^namespace host$/;"	n	namespace:phosphor
host	include/ipmid-host/cmd-utils.hpp	/^namespace host$/;"	n	namespace:phosphor
host	systemintfcmds.cpp	/^std::unique_ptr<phosphor::host::command::Host> host$/;"	v	namespace:__anon1526fb130110	typeref:typename:std::unique_ptr<phosphor::host::command::Host>
hostControlEvent	softoff/softoff.cpp	/^void SoftPowerOff::hostControlEvent(sdbusplus::message::message& msg)$/;"	f	class:phosphor::ipmi::SoftPowerOff	typeref:typename:void
hostControlSignal	softoff/softoff.hpp	/^    sdbusplus::bus::match_t hostControlSignal;$/;"	m	class:phosphor::ipmi::SoftPowerOff	typeref:typename:sdbusplus::bus::match_t
hostIdx	include/ipmid/message.hpp	/^    int hostIdx;$/;"	m	struct:ipmi::Context	typeref:typename:int
hostNameProp	dcmihandler.hpp	/^static constexpr auto hostNameProp = "HostName";$/;"	v	namespace:dcmi	typeref:typename:auto
hostTimeout	host-cmd-manager.cpp	/^void Manager::hostTimeout()$/;"	f	class:phosphor::host::command::Manager	typeref:typename:void
hostTransitionMatch	host-cmd-manager.hpp	/^    sdbusplus::bus::match_t hostTransitionMatch;$/;"	m	class:phosphor::host::command::Manager	typeref:typename:sdbusplus::bus::match_t
i2c-whitelist-check	configure.ac	/^AC_ARG_ENABLE([i2c-whitelist-check],$/;"	e
i2cCmd	include/ipmid/oemopenbmc.hpp	/^    i2cCmd = 2,$/;"	e	enum:oem::Cmd
i2cMasterWRWhitelist	apphandler.cpp	/^} i2cMasterWRWhitelist;$/;"	t	typeref:struct:__anon1df7a8b50108	file:
i2cMasterWRWhitelistFile	apphandler.cpp	/^static constexpr const char* i2cMasterWRWhitelistFile =$/;"	v	typeref:typename:const char *	file:
i2cWriteRead	libipmid/utils.cpp	/^ipmi::Cc i2cWriteRead(std::string i2cBus, const uint8_t slaveAddr,$/;"	f	namespace:ipmi	typeref:typename:ipmi::Cc
icmbV09	user_channel/channel_layer.hpp	/^    icmbV09 = 0x03,$/;"	e	enum:ipmi::EChannelMediumType
icmbV10	user_channel/channel_layer.hpp	/^    icmbV10 = 0x02,$/;"	e	enum:ipmi::EChannelMediumType
icmbV11	user_channel/channel_layer.hpp	/^    icmbV11 = 0x02,$/;"	e	enum:ipmi::EChannelProtocolType
id	apphandler.cpp	/^        uint8_t id;$/;"	m	struct:ipmiAppGetDeviceId::__anon1df7a8b50508	typeref:typename:uint8_t	file:
id	systemintfcmds.hpp	/^    uint8_t id[2];$/;"	m	struct:oem_sel_timestamped	typeref:typename:uint8_t[2]
id	transporthandler.hpp	/^    int id;$/;"	m	struct:ipmi::transport::ChannelParams	typeref:typename:int
id_string	sensorhandler.hpp	/^    char id_string[FULL_RECORD_ID_STR_MAX_LENGTH];$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:char[]
id_string	sensorhandler.hpp	/^    char id_string[FULL_RECORD_ID_STR_MAX_LENGTH];$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:char[]
id_string_info	sensorhandler.hpp	/^    uint8_t id_string_info;$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:uint8_t
id_string_info	sensorhandler.hpp	/^    uint8_t id_string_info;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
identifyIntervalPos	chassishandler.cpp	/^static constexpr size_t identifyIntervalPos = 0;$/;"	v	typeref:typename:size_t	file:
identifyTimer	chassishandler.cpp	/^std::unique_ptr<phosphor::Timer> identifyTimer$/;"	v	typeref:typename:std::unique_ptr<phosphor::Timer>
identify_led_object_name	chassishandler.cpp	/^const char* identify_led_object_name =$/;"	v	typeref:typename:const char *
ifPath	transporthandler.hpp	/^    std::string ifPath;$/;"	m	struct:ipmi::transport::ChannelParams	typeref:typename:std::string
ifname	transporthandler.hpp	/^    std::string ifname;$/;"	m	struct:ipmi::transport::ChannelParams	typeref:typename:std::string
impl	include/ipmid/filter.hpp	/^namespace impl$/;"	n	namespace:ipmi
impl	include/ipmid/handler.hpp	/^namespace impl$/;"	n	namespace:ipmi
impl	ipmid-new.cpp	/^namespace impl$/;"	n	namespace:ipmi	file:
inactive	include/ipmid/sessiondef.hpp	/^    inactive,           \/\/ Session is not in use$/;"	e	enum:session::State
indefiniteOn	chassishandler.hpp	/^    indefiniteOn = 0x2,$/;"	e	enum:ChassisIDState
indicate_no_softoff_needed	chassishandler.cpp	/^void indicate_no_softoff_needed()$/;"	f	typeref:typename:void
initChannelPersistData	user_channel/channel_mgmt.cpp	/^void ChannelConfig::initChannelPersistData()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:void
initPasswordMap	user_channel/passwd_mgr.cpp	/^void PasswdMgr::initPasswordMap(void)$/;"	f	class:ipmi::PasswdMgr	typeref:typename:void
init_events_state	sensorhandler.hpp	/^inline void init_events_state(bool enabled, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
init_hyst_state	sensorhandler.hpp	/^inline void init_hyst_state(bool enabled, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
init_scanning_state	sensorhandler.hpp	/^inline void init_scanning_state(bool enabled, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
init_settable_state	sensorhandler.hpp	/^inline void init_settable_state(bool enabled, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
init_thresh_state	sensorhandler.hpp	/^inline void init_thresh_state(bool enabled, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
init_types_state	sensorhandler.hpp	/^inline void init_types_state(bool enabled, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
initialized	app/watchdog_service.hpp	/^        bool initialized;$/;"	m	struct:WatchdogService::Properties	typeref:typename:bool
initiateErase	selutility.hpp	/^static constexpr auto initiateErase = 0xAA;$/;"	v	namespace:ipmi::sel	typeref:typename:auto
initiate_state_transition	chassishandler.cpp	/^int initiate_state_transition(State::Host::Transition transition)$/;"	f	typeref:typename:int
install-data-local	include/Makefile.am	/^install-data-local:$/;"	t
instance	dcmihandler.hpp	/^    uint8_t instance; \/\/!< Entity instance number$/;"	m	struct:dcmi::temp_readings::Response	typeref:typename:uint8_t
instance	include/ipmid/types.hpp	/^    EntityInst instance;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:EntityInst
instanceStart	dcmihandler.hpp	/^    uint8_t instanceStart;  \/\/!< Instance start (used if instance is 0)$/;"	m	struct:dcmi::GetSensorInfoRequest	typeref:typename:uint8_t
instanceStart	dcmihandler.hpp	/^    uint8_t instanceStart;  \/\/!< Instance start (used if instance is 0)$/;"	m	struct:dcmi::GetTempReadingsRequest	typeref:typename:uint8_t
int10_t	include/ipmid/message/types.hpp	/^using int10_t = fixed_int_t<10>;$/;"	t	typeref:typename:fixed_int_t<10>
int11_t	include/ipmid/message/types.hpp	/^using int11_t = fixed_int_t<11>;$/;"	t	typeref:typename:fixed_int_t<11>
int12_t	include/ipmid/message/types.hpp	/^using int12_t = fixed_int_t<12>;$/;"	t	typeref:typename:fixed_int_t<12>
int13_t	include/ipmid/message/types.hpp	/^using int13_t = fixed_int_t<13>;$/;"	t	typeref:typename:fixed_int_t<13>
int14_t	include/ipmid/message/types.hpp	/^using int14_t = fixed_int_t<14>;$/;"	t	typeref:typename:fixed_int_t<14>
int15_t	include/ipmid/message/types.hpp	/^using int15_t = fixed_int_t<15>;$/;"	t	typeref:typename:fixed_int_t<15>
int24_t	include/ipmid/message/types.hpp	/^using int24_t = fixed_int_t<24>;$/;"	t	typeref:typename:fixed_int_t<24>
int2_t	include/ipmid/message/types.hpp	/^using int2_t = fixed_int_t<2>;$/;"	t	typeref:typename:fixed_int_t<2>
int3_t	include/ipmid/message/types.hpp	/^using int3_t = fixed_int_t<3>;$/;"	t	typeref:typename:fixed_int_t<3>
int4_t	include/ipmid/message/types.hpp	/^using int4_t = fixed_int_t<4>;$/;"	t	typeref:typename:fixed_int_t<4>
int5_t	include/ipmid/message/types.hpp	/^using int5_t = fixed_int_t<5>;$/;"	t	typeref:typename:fixed_int_t<5>
int6_t	include/ipmid/message/types.hpp	/^using int6_t = fixed_int_t<6>;$/;"	t	typeref:typename:fixed_int_t<6>
int7_t	include/ipmid/message/types.hpp	/^using int7_t = fixed_int_t<7>;$/;"	t	typeref:typename:fixed_int_t<7>
int9_t	include/ipmid/message/types.hpp	/^using int9_t = fixed_int_t<9>;$/;"	t	typeref:typename:fixed_int_t<9>
integrity	app/channel.hpp	/^static constexpr auto integrity = "integrity";$/;"	v	namespace:cipher	typeref:typename:auto
integrityTag	app/channel.hpp	/^static constexpr auto integrityTag = 0x40;$/;"	v	namespace:cipher	typeref:typename:auto
interface	sensorhandler.hpp	/^    char interface[MAX_DBUS_PATH];$/;"	m	struct:dbus_interface_t	typeref:typename:char[]
interfaceKCS	include/ipmid/api.h	/^    interfaceKCS = 0,$/;"	e	enum:__anon8b5e56ea0103
interfaceLAN1	include/ipmid/api.h	/^    interfaceLAN1 = 1,$/;"	e	enum:__anon8b5e56ea0103
interfaceMap	user_channel/channel_mgmt.cpp	/^static std::unordered_map<EInterfaceIndex, std::string> interfaceMap = {$/;"	v	namespace:ipmi	typeref:typename:std::unordered_map<EInterfaceIndex,std::string>	file:
interfaceUnknown	include/ipmid/api.h	/^    interfaceUnknown = 0xFF$/;"	e	enum:__anon8b5e56ea0103
interfaces	fruread.hpp	/^    DbusInterfaceVec interfaces;$/;"	m	struct:FruInstance	typeref:typename:DbusInterfaceVec
internal	chassishandler.cpp	/^namespace internal$/;"	n	namespace:chassis	file:
internal	selutility.cpp	/^namespace internal$/;"	n	namespace:ipmi::sel	file:
internal	selutility.hpp	/^namespace internal$/;"	n	namespace:ipmi::sel
internalOffset	include/dbus-sdr/storagecommands.hpp	/^    uint8_t internalOffset;$/;"	m	struct:FRUHeader	typeref:typename:uint8_t
interval	app/watchdog_service.hpp	/^        uint64_t interval;$/;"	m	struct:WatchdogService::Properties	typeref:typename:uint64_t
intf	include/ipmid/utils.hpp	/^    const std::string intf;$/;"	m	class:ipmi::ServiceCache	typeref:typename:const std::string
intf	transporthandler.hpp	/^    const char* const intf;$/;"	m	class:ipmi::transport::ObjectLookupCache	typeref:typename:const char * const
intfAddedSignal	user_channel/user_mgmt.cpp	/^static constexpr const char* intfAddedSignal = "InterfacesAdded";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
intfCommand	host-interface.cpp	/^static const std::map<OEMCmd, Host::Command> intfCommand = {$/;"	v	namespace:phosphor::host::command	typeref:typename:const std::map<OEMCmd,Host::Command>	file:
intfRemovedSignal	user_channel/user_mgmt.cpp	/^static constexpr const char* intfRemovedSignal = "InterfacesRemoved";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
intraBmcName	ipmid-new.cpp	/^static constexpr const char intraBmcName[] = "INTRABMC";$/;"	v	namespace:ipmi	typeref:typename:const char[]	file:
invItemInterface	read_fru_data.hpp	/^static constexpr auto invItemInterface = "xyz.openbmc_project.Inventory.Item";$/;"	v	namespace:ipmi::fru	typeref:typename:auto
invMgrInterface	read_fru_data.hpp	/^static constexpr auto invMgrInterface = "xyz.openbmc_project.Inventory.Manager";$/;"	v	namespace:ipmi::fru	typeref:typename:auto
invObjPath	read_fru_data.hpp	/^static constexpr auto invObjPath = "\/xyz\/openbmc_project\/inventory";$/;"	v	namespace:ipmi::fru	typeref:typename:auto
invalidChannel	user_channel/channel_layer.hpp	/^static constexpr uint8_t invalidChannel = 0xff;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
invalidParamSelectorEnd	apphandler.cpp	/^static constexpr uint8_t invalidParamSelectorEnd = 191;$/;"	v	typeref:typename:uint8_t	file:
invalidParamSelectorStart	apphandler.cpp	/^static constexpr uint8_t invalidParamSelectorStart = 8;$/;"	v	typeref:typename:uint8_t	file:
invalidSensorNumber	include/dbus-sdr/sdrutils.hpp	/^static constexpr uint16_t invalidSensorNumber = 0xFFFF;$/;"	v	typeref:typename:uint16_t
invalidSessionHandle	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t invalidSessionHandle = 0;$/;"	v	namespace:session	typeref:typename:uint8_t
invalidSessionID	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t invalidSessionID = 0;$/;"	v	namespace:session	typeref:typename:uint8_t
invalidTimeStamp	selutility.hpp	/^static constexpr auto invalidTimeStamp = 0xFFFFFFFF;$/;"	v	namespace:ipmi::sel	typeref:typename:auto
invalidUserId	user_channel/user_layer.hpp	/^static constexpr uint8_t invalidUserId = 0xFF;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
invalidate	libipmid/utils.cpp	/^void ServiceCache::invalidate()$/;"	f	class:ipmi::ServiceCache	typeref:typename:void
inventory	sensordatahandler.cpp	/^namespace inventory$/;"	n	namespace:ipmi::sensor	file:
inventory	sensordatahandler.hpp	/^namespace inventory$/;"	n	namespace:ipmi::sensor
inventory-sensor-gen.cpp	Makefile.am	/^inventory-sensor-gen.cpp: scripts\/inventorysensor.mako.cpp scripts\/inventory-sensor.py @INVSEN/;"	t
inventoryRoot	include/ipmid/types.hpp	/^constexpr auto inventoryRoot = "\/xyz\/openbmc_project\/inventory";$/;"	v	namespace:ipmi::sensor	typeref:typename:auto
ioCtx	libipmid/sdbus-asio.cpp	/^std::shared_ptr<boost::asio::io_context> ioCtx;$/;"	v	namespace:__anondd379b290110	typeref:typename:std::shared_ptr<boost::asio::io_context>
ip	transporthandler.hpp	/^    typename AddrFamily<family>::addr ip;$/;"	m	struct:ipmi::transport::IfNeigh	typeref:typename:AddrFamily<family>::addr
ipAddrOffset	chassishandler.cpp	/^static constexpr size_t ipAddrOffset = 17;$/;"	v	typeref:typename:size_t	file:
ipmb	user_channel/channel_layer.hpp	/^    ipmb = 0x01,$/;"	e	enum:ipmi::EChannelMediumType
ipmbV10	user_channel/channel_layer.hpp	/^    ipmbV10 = 0x01,$/;"	e	enum:ipmi::EChannelProtocolType
ipmi	apphandler.cpp	/^namespace ipmi$/;"	n	file:
ipmi	chassishandler.cpp	/^namespace ipmi$/;"	n	file:
ipmi	dbus-sdr/sdrutils.cpp	/^namespace ipmi$/;"	n	file:
ipmi	dbus-sdr/sensorcommands.cpp	/^namespace ipmi$/;"	n	file:
ipmi	dbus-sdr/sensorutils.cpp	/^namespace ipmi$/;"	n	file:
ipmi	dbus-sdr/storagecommands.cpp	/^namespace dynamic_sensors::ipmi::sel$/;"	n	namespace:dynamic_sensors	file:
ipmi	dbus-sdr/storagecommands.cpp	/^namespace ipmi$/;"	n	file:
ipmi	entity_map_json.cpp	/^namespace ipmi$/;"	n	file:
ipmi	entity_map_json.hpp	/^namespace ipmi$/;"	n
ipmi	include/dbus-sdr/sdrutils.hpp	/^namespace ipmi$/;"	n
ipmi	include/dbus-sdr/sensorcommands.hpp	/^namespace ipmi$/;"	n
ipmi	include/dbus-sdr/sensorutils.hpp	/^namespace ipmi$/;"	n
ipmi	include/dbus-sdr/storagecommands.hpp	/^namespace dynamic_sensors::ipmi::sel$/;"	n	namespace:dynamic_sensors
ipmi	include/dbus-sdr/storagecommands.hpp	/^namespace ipmi$/;"	n
ipmi	include/ipmid/api-types.hpp	/^namespace ipmi$/;"	n
ipmi	include/ipmid/filter.hpp	/^namespace ipmi$/;"	n
ipmi	include/ipmid/handler.hpp	/^namespace ipmi$/;"	n
ipmi	include/ipmid/message.hpp	/^namespace ipmi$/;"	n
ipmi	include/ipmid/message/pack.hpp	/^namespace ipmi$/;"	n
ipmi	include/ipmid/message/unpack.hpp	/^namespace ipmi$/;"	n
ipmi	include/ipmid/types.hpp	/^namespace ipmi$/;"	n
ipmi	include/ipmid/utility.hpp	/^namespace ipmi$/;"	n
ipmi	include/ipmid/utils.hpp	/^namespace ipmi$/;"	n
ipmi	ipmi_fru_info_area.cpp	/^namespace ipmi$/;"	n	file:
ipmi	ipmi_fru_info_area.hpp	/^namespace ipmi$/;"	n
ipmi	ipmid-new.cpp	/^namespace ipmi$/;"	n	file:
ipmi	libipmid/utils.cpp	/^namespace ipmi$/;"	n	file:
ipmi	read_fru_data.cpp	/^namespace ipmi$/;"	n	file:
ipmi	read_fru_data.hpp	/^namespace ipmi$/;"	n
ipmi	selutility.cpp	/^namespace ipmi$/;"	n	file:
ipmi	selutility.hpp	/^namespace ipmi$/;"	n
ipmi	sensordatahandler.cpp	/^namespace ipmi$/;"	n	file:
ipmi	sensordatahandler.hpp	/^namespace ipmi$/;"	n
ipmi	sensorhandler.cpp	/^namespace ipmi$/;"	n	file:
ipmi	sensorhandler.hpp	/^namespace ipmi$/;"	n
ipmi	softoff/softoff.cpp	/^namespace ipmi$/;"	n	namespace:phosphor	file:
ipmi	softoff/softoff.hpp	/^namespace ipmi$/;"	n	namespace:phosphor
ipmi	storagehandler.cpp	/^namespace ipmi$/;"	n	file:
ipmi	test/entitymap_json_unittest.cpp	/^namespace ipmi$/;"	n	file:
ipmi	transporthandler.cpp	/^namespace ipmi$/;"	n	file:
ipmi	transporthandler.hpp	/^namespace ipmi$/;"	n
ipmi	user_channel/channel_layer.cpp	/^namespace ipmi$/;"	n	file:
ipmi	user_channel/channel_layer.hpp	/^namespace ipmi$/;"	n
ipmi	user_channel/channel_mgmt.cpp	/^namespace ipmi$/;"	n	file:
ipmi	user_channel/channel_mgmt.hpp	/^namespace ipmi$/;"	n
ipmi	user_channel/channelcommands.cpp	/^namespace ipmi$/;"	n	file:
ipmi	user_channel/cipher_mgmt.cpp	/^namespace ipmi$/;"	n	file:
ipmi	user_channel/cipher_mgmt.hpp	/^namespace ipmi$/;"	n
ipmi	user_channel/passwd_mgr.cpp	/^namespace ipmi$/;"	n	file:
ipmi	user_channel/passwd_mgr.hpp	/^namespace ipmi$/;"	n
ipmi	user_channel/user_layer.cpp	/^namespace ipmi$/;"	n	file:
ipmi	user_channel/user_layer.hpp	/^namespace ipmi$/;"	n
ipmi	user_channel/user_mgmt.cpp	/^namespace ipmi$/;"	n	file:
ipmi	user_channel/user_mgmt.hpp	/^namespace ipmi$/;"	n
ipmi	user_channel/usercommands.cpp	/^namespace ipmi$/;"	n	file:
ipmi	user_channel/usercommands.hpp	/^namespace ipmi$/;"	n
ipmi	whitelist-filter.cpp	/^namespace ipmi$/;"	n	file:
ipmi-whitelist	configure.ac	/^AC_ARG_ENABLE([ipmi-whitelist],$/;"	e
ipmi20	user_channel/usercommands.cpp	/^    uint8_t ipmi20 : 1;$/;"	m	struct:ipmi::SetUserPasswordReq	typeref:typename:uint8_t:1	file:
ipmi20VerSession	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t ipmi20VerSession = 0x01;$/;"	v	namespace:session	typeref:typename:uint8_t
ipmiActionToWdAction	app/watchdog.cpp	/^WatchdogService::Action ipmiActionToWdAction(IpmiAction ipmi_action)$/;"	f	typeref:typename:WatchdogService::Action
ipmiAppCloseSession	apphandler.cpp	/^ipmi::RspType<> ipmiAppCloseSession(uint32_t reqSessionId,$/;"	f	typeref:typename:ipmi::RspType<>
ipmiAppGetBMCGlobalEnable	systemintfcmds.cpp	/^    ipmiAppGetBMCGlobalEnable()$/;"	f	typeref:typename:ipmi::RspType<bool,bool,bool,bool,uint1_t,bool,bool,bool>
ipmiAppGetBtCapabilities	apphandler.cpp	/^auto ipmiAppGetBtCapabilities()$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint8_t,uint8_t,uint8_t,uint8_t>
ipmiAppGetDeviceGuid	apphandler.cpp	/^auto ipmiAppGetDeviceGuid()$/;"	f	typeref:typename:ipmi::RspType<std::array<uint8_t,uuidBinaryLength>>
ipmiAppGetDeviceId	apphandler.cpp	/^    ipmiAppGetDeviceId(ipmi::Context::ptr ctx)$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint8_t,uint8_t,uint8_t,uint8_t,uint8_t,uint24_t,uint16_t,uint32_t>
ipmiAppGetMessageFlags	systemintfcmds.cpp	/^ipmi::RspType<uint8_t> ipmiAppGetMessageFlags()$/;"	f	typeref:typename:ipmi::RspType<uint8_t>
ipmiAppGetSelfTestResults	apphandler.cpp	/^auto ipmiAppGetSelfTestResults() -> ipmi::RspType<uint8_t, uint8_t>$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint8_t>
ipmiAppGetSessionInfo	apphandler.cpp	/^    ipmiAppGetSessionInfo(ipmi::Context::ptr ctx, uint8_t sessionIndex,$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint8_t,uint8_t,std::optional<SessionDetails>>
ipmiAppGetSystemGuid	apphandler.cpp	/^auto ipmiAppGetSystemGuid() -> ipmi::RspType<std::array<uint8_t, 16>>$/;"	f	typeref:typename:ipmi::RspType<std::array<uint8_t,16>>
ipmiAppGetSystemInfo	apphandler.cpp	/^    ipmiAppGetSystemInfo(uint7_t reserved, bool getRevision,$/;"	f	typeref:typename:ipmi::RspType<uint8_t,std::optional<uint8_t>,std::optional<std::vector<uint8_t>>>
ipmiAppResetWatchdogTimer	app/watchdog.cpp	/^ipmi::RspType<> ipmiAppResetWatchdogTimer()$/;"	f	typeref:typename:ipmi::RspType<>
ipmiAppSetBMCGlobalEnable	systemintfcmds.cpp	/^ipmi::RspType<> ipmiAppSetBMCGlobalEnable($/;"	f	typeref:typename:ipmi::RspType<>
ipmiAppSetSystemInfo	apphandler.cpp	/^ipmi::RspType<> ipmiAppSetSystemInfo(uint8_t paramSelector, uint8_t data1,$/;"	f	typeref:typename:ipmi::RspType<>
ipmiCCPasswdFailMismatch	user_channel/usercommands.hpp	/^    ipmiCCPasswdFailMismatch = 0x80,$/;"	e	enum:ipmi::IPMISetPasswordReturnCodes
ipmiCCPasswdFailWrongSize	user_channel/usercommands.hpp	/^    ipmiCCPasswdFailWrongSize = 0x81,$/;"	e	enum:ipmi::IPMISetPasswordReturnCodes
ipmiChMutexCleanupLockFile	user_channel/channel_mgmt.hpp	/^static constexpr const char* ipmiChMutexCleanupLockFile =$/;"	v	namespace:ipmi	typeref:typename:const char *
ipmiChannelInit	user_channel/channel_layer.cpp	/^Cc ipmiChannelInit()$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiChannelMutex	user_channel/channel_mgmt.hpp	/^static constexpr const char* ipmiChannelMutex = "ipmi_channel_mutex";$/;"	v	namespace:ipmi	typeref:typename:const char *
ipmiChassisControl	chassishandler.cpp	/^ipmi::RspType<> ipmiChassisControl(uint8_t chassisControl)$/;"	f	typeref:typename:ipmi::RspType<>
ipmiChassisGetSysBootOptions	chassishandler.cpp	/^    ipmiChassisGetSysBootOptions(ipmi::Context::ptr ctx,$/;"	f	typeref:typename:ipmi::RspType<ipmi::message::Payload>
ipmiChassisIdentify	chassishandler.cpp	/^ipmi::RspType<> ipmiChassisIdentify(std::optional<uint8_t> interval,$/;"	f	typeref:typename:ipmi::RspType<>
ipmiChassisSetPowerRestorePolicy	chassishandler.cpp	/^    ipmiChassisSetPowerRestorePolicy(boost::asio::yield_context yield,$/;"	f	typeref:typename:ipmi::RspType<uint3_t,uint5_t>
ipmiChassisSetSysBootOptions	chassishandler.cpp	/^ipmi::RspType<> ipmiChassisSetSysBootOptions(ipmi::Context::ptr ctx,$/;"	f	typeref:typename:ipmi::RspType<>
ipmiClearUserEntryPassword	user_channel/user_layer.cpp	/^Cc ipmiClearUserEntryPassword(const std::string& userName)$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiCmdGetDeviceSDR	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdGetDeviceSDR = 0x21,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCmdGetDeviceSDRInfo	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdGetDeviceSDRInfo = 0x20,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCmdGetSensorEventEnable	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdGetSensorEventEnable = 0x29,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCmdGetSensorEventStatus	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdGetSensorEventStatus = 0x2B,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCmdGetSensorReading	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdGetSensorReading = 0x2D,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCmdGetSensorThreshold	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdGetSensorThreshold = 0x27,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCmdGetSensorType	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdGetSensorType = 0x2F,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCmdReserveDeviceSDRRepo	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdReserveDeviceSDRRepo = 0x22,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCmdSetSensorReadingAndEventStatus	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdSetSensorReadingAndEventStatus = 0x30,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCmdSetSensorThreshold	include/dbus-sdr/sensorcommands.hpp	/^    ipmiCmdSetSensorThreshold = 0x26,$/;"	e	enum:IPMINetfnSensorCmds
ipmiCommand	host-interface.cpp	/^static const std::map<Host::Command, IpmiCmdData> ipmiCommand = {$/;"	v	namespace:phosphor::host::command	typeref:typename:const std::map<Host::Command,IpmiCmdData>	file:
ipmiDbusChannelMatch	ipmid-new.cpp	/^constexpr const char ipmiDbusChannelMatch[] =$/;"	v	namespace:ipmi::__anone60fcc800110	typeref:typename:const char[]
ipmiDefault	chassishandler.cpp	/^constexpr auto ipmiDefault = 0;$/;"	v	namespace:boot_options	typeref:typename:auto
ipmiEnabled	user_channel/user_layer.hpp	/^    uint8_t ipmiEnabled : 1;$/;"	m	struct:ipmi::PrivAccess	typeref:typename:uint8_t:1
ipmiEnabled	user_channel/user_mgmt.hpp	/^    bool ipmiEnabled;$/;"	m	struct:ipmi::UserPrivAccess	typeref:typename:bool
ipmiGetAcpiPowerState	apphandler.cpp	/^    ipmiGetAcpiPowerState()$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint8_t>
ipmiGetChannelAccess	user_channel/channelcommands.cpp	/^    ipmiGetChannelAccess(Context::ptr ctx, uint4_t channel, uint4_t reserved1,$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint3_t,bool,bool,bool,uint2_t,uint4_t,uint4_t>
ipmiGetChannelAuthenticationCapabilities	user_channel/usercommands.cpp	/^    ipmiGetChannelAuthenticationCapabilities(ipmi::Context::ptr ctx,$/;"	f	namespace:ipmi
ipmiGetChannelInfo	user_channel/channelcommands.cpp	/^    ipmiGetChannelInfo(Context::ptr ctx, uint4_t channel, uint4_t reserved)$/;"	f	namespace:ipmi	typeref:typename:RspType<uint4_t,uint4_t,uint7_t,bool,uint5_t,uint3_t,uint6_t,uint2_t,uint24_t,uint16_t>
ipmiGetChannelPayloadSupport	user_channel/channelcommands.cpp	/^    ipmiGetChannelPayloadSupport(Context::ptr ctx, uint4_t channel,$/;"	f	namespace:ipmi	typeref:typename:RspType<uint16_t,uint16_t,uint16_t,uint16_t>
ipmiGetChannelPayloadVersion	user_channel/channelcommands.cpp	/^    ipmiGetChannelPayloadVersion(Context::ptr ctx, uint4_t chNum,$/;"	f	namespace:ipmi	typeref:typename:RspType<uint8_t>
ipmiGetChassisCap	chassishandler.cpp	/^    ipmiGetChassisCap()$/;"	f	typeref:typename:ipmi::RspType<bool,bool,bool,bool,uint4_t,uint8_t,uint8_t,uint8_t,uint8_t,uint8_t>
ipmiGetChassisStatus	chassishandler.cpp	/^    ipmiGetChassisStatus()$/;"	f
ipmiGetPOHCounter	chassishandler.cpp	/^    ipmiGetPOHCounter()$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint32_t>
ipmiGetRepositoryInfo	storagehandler.cpp	/^    ipmiGetRepositoryInfo()$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint16_t,uint16_t,uint32_t,uint32_t,uint8_t>
ipmiGetSensorType	sensorhandler.cpp	/^    ipmiGetSensorType(uint8_t sensorNumber)$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint8_t>
ipmiGetSystemRestartCause	chassishandler.cpp	/^    ipmiGetSystemRestartCause(ipmi::Context::ptr ctx)$/;"	f	typeref:typename:ipmi::RspType<uint4_t,uint4_t,uint8_t>
ipmiGetUserAccess	user_channel/usercommands.cpp	/^    ipmiGetUserAccess(ipmi::Context::ptr ctx, uint4_t channel,$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint6_t,uint2_t,uint6_t,uint2_t,uint6_t,uint2_t,uint4_t,uint1_t,uint1_t,uint1_t,uint1_t>
ipmiGetUserName	user_channel/usercommands.cpp	/^Cc ipmiGetUserName(ipmi_netfn_t netfn, ipmi_cmd_t cmd, ipmi_request_t request,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiGetUserPayloadAccess	user_channel/usercommands.cpp	/^    ipmiGetUserPayloadAccess(ipmi::Context::ptr ctx,$/;"	f	namespace:ipmi
ipmiGetWatchdogTimer	app/watchdog.cpp	/^    ipmiGetWatchdogTimer()$/;"	f
ipmiGlobalReset	globalhandler.cpp	/^ipmi::RspType<> ipmiGlobalReset()$/;"	f	typeref:typename:ipmi::RspType<>
ipmiGrpName	user_channel/user_mgmt.cpp	/^static constexpr const char* ipmiGrpName = "ipmi";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
ipmiMasterWriteRead	apphandler.cpp	/^    ipmiMasterWriteRead(bool isPrivateBus, uint3_t busId, uint4_t channelNum,$/;"	f	typeref:typename:ipmi::RspType<std::vector<uint8_t>>
ipmiMaxChannels	user_channel/user_layer.hpp	/^static constexpr uint8_t ipmiMaxChannels = 16;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
ipmiMaxUserName	user_channel/user_layer.hpp	/^static constexpr uint8_t ipmiMaxUserName = 16;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
ipmiMaxUsers	user_channel/user_layer.hpp	/^static constexpr uint8_t ipmiMaxUsers = 15;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
ipmiMutexCleanupLockFile	user_channel/user_mgmt.cpp	/^static constexpr const char* ipmiMutexCleanupLockFile =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
ipmiPluginExtn	ipmid-new.cpp	/^constexpr const char ipmiPluginExtn[] = ".so";$/;"	v	namespace:ipmi	typeref:typename:const char[]
ipmiPrivIndex	user_channel/user_mgmt.cpp	/^static std::array<std::string, (PRIVILEGE_OEM + 1)> ipmiPrivIndex = {$/;"	v	namespace:ipmi	typeref:typename:std::array<std::string,(PRIVILEGE_OEM+1)>	file:
ipmiRenameUserEntryPassword	user_channel/user_layer.cpp	/^Cc ipmiRenameUserEntryPassword(const std::string& userName,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiSELAddInterface	sensorhandler.hpp	/^static constexpr char const* ipmiSELAddInterface =$/;"	v	typeref:typename:char const *
ipmiSELAddMessage	sensorhandler.hpp	/^static const std::string ipmiSELAddMessage = "SEL Entry";$/;"	v	typeref:typename:const std::string
ipmiSELPath	sensorhandler.hpp	/^static constexpr char const* ipmiSELPath = "\/xyz\/openbmc_project\/Logging\/IPMI";$/;"	v	typeref:typename:char const *
ipmiSdrVersion	include/dbus-sdr/storagecommands.hpp	/^static constexpr uint8_t ipmiSdrVersion = 0x51;$/;"	v	typeref:typename:uint8_t
ipmiSenGetSensorEventEnable	dbus-sdr/sensorcommands.cpp	/^    ipmiSenGetSensorEventEnable(ipmi::Context::ptr ctx, uint8_t sensorNum)$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint8_t,uint8_t,uint8_t,uint8_t,uint8_t>
ipmiSenGetSensorEventStatus	dbus-sdr/sensorcommands.cpp	/^    ipmiSenGetSensorEventStatus(ipmi::Context::ptr ctx, uint8_t sensorNum)$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint8_t,std::bitset<16>,std::bitset<16>>
ipmiSenGetSensorReading	dbus-sdr/sensorcommands.cpp	/^    ipmiSenGetSensorReading(ipmi::Context::ptr ctx, uint8_t sensnum)$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint8_t,uint8_t,uint8_t,std::optional<uint8_t>>
ipmiSenGetSensorThresholds	dbus-sdr/sensorcommands.cpp	/^    ipmiSenGetSensorThresholds(ipmi::Context::ptr ctx, uint8_t sensorNumber)$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint8_t,uint8_t,uint8_t,uint8_t,uint8_t,uint8_t,uint8_t>
ipmiSenPlatformEvent	dbus-sdr/sensorcommands.cpp	/^ipmi::RspType<> ipmiSenPlatformEvent(uint8_t generatorID, uint8_t evmRev,$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<>
ipmiSenSetSensorThresholds	dbus-sdr/sensorcommands.cpp	/^ipmi::RspType<> ipmiSenSetSensorThresholds($/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<>
ipmiSensorGetDeviceSdrInfo	dbus-sdr/sensorcommands.cpp	/^    ipmiSensorGetDeviceSdrInfo(ipmi::Context::ptr ctx,$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint8_t,uint8_t,uint32_t>	file:
ipmiSensorGetDeviceSdrInfo	sensorhandler.cpp	/^    ipmiSensorGetDeviceSdrInfo(std::optional<uint8_t> count)$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint8_t>
ipmiSensorGetSensorReading	sensorhandler.cpp	/^    ipmiSensorGetSensorReading(uint8_t sensorNum)$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint5_t,bool,bool,bool,uint8_t,uint8_t>
ipmiSensorGetSensorThresholds	sensorhandler.cpp	/^    ipmiSensorGetSensorThresholds(uint8_t sensorNum)$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint8_t,uint8_t,uint8_t,uint8_t,uint8_t,uint8_t>
ipmiSensorReserveSdr	sensorhandler.cpp	/^ipmi::RspType<uint16_t> ipmiSensorReserveSdr()$/;"	f	typeref:typename:ipmi::RspType<uint16_t>
ipmiSetAcpiPowerState	apphandler.cpp	/^ipmi::RspType<> ipmiSetAcpiPowerState(uint8_t sysAcpiState,$/;"	f	typeref:typename:ipmi::RspType<>
ipmiSetChannelAccess	user_channel/channelcommands.cpp	/^RspType<> ipmiSetChannelAccess(Context::ptr ctx, uint4_t channel,$/;"	f	namespace:ipmi	typeref:typename:RspType<>
ipmiSetChassisCap	chassishandler.cpp	/^ipmi::RspType<> ipmiSetChassisCap(bool intrusion, bool fpLockout,$/;"	f	typeref:typename:ipmi::RspType<>
ipmiSetFrontPanelButtonEnables	chassishandler.cpp	/^ipmi::RspType<> ipmiSetFrontPanelButtonEnables($/;"	f	typeref:typename:ipmi::RspType<>
ipmiSetSensorReading	dbus-sdr/sensorcommands.cpp	/^ipmi::RspType<> ipmiSetSensorReading(ipmi::Context::ptr ctx,$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<>
ipmiSetSensorReading	sensorhandler.cpp	/^ipmi::RspType<> ipmiSetSensorReading(uint8_t sensorNumber, uint8_t operation,$/;"	f	typeref:typename:ipmi::RspType<>
ipmiSetSpecialUserPassword	user_channel/user_layer.cpp	/^Cc ipmiSetSpecialUserPassword(const std::string& userName,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiSetUserAccess	user_channel/usercommands.cpp	/^ipmi::RspType<> ipmiSetUserAccess(ipmi::Context::ptr ctx, uint4_t channel,$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<>
ipmiSetUserName	user_channel/usercommands.cpp	/^Cc ipmiSetUserName(ipmi_netfn_t netfn, ipmi_cmd_t cmd, ipmi_request_t request,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiSetUserPassword	user_channel/usercommands.cpp	/^Cc ipmiSetUserPassword(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiSetUserPayloadAccess	user_channel/usercommands.cpp	/^ipmi::RspType<> ipmiSetUserPayloadAccess($/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<>
ipmiSetWatchdogTimer	app/watchdog.cpp	/^    ipmiSetWatchdogTimer(uint3_t timerUse, uint3_t reserved, bool dontStopTimer,$/;"	f	typeref:typename:ipmi::RspType<>
ipmiSmbus	user_channel/channel_layer.hpp	/^    ipmiSmbus = 0x04,$/;"	e	enum:ipmi::EChannelProtocolType
ipmiStorageAddSEL	storagehandler.cpp	/^    ipmiStorageAddSEL(uint16_t recordID, uint8_t recordType, uint32_t timeStamp,$/;"	f	typeref:typename:ipmi::RspType<uint16_t>
ipmiStorageAddSELEntry	dbus-sdr/storagecommands.cpp	/^ipmi::RspType<uint16_t> ipmiStorageAddSELEntry($/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::RspType<uint16_t>
ipmiStorageClearSEL	dbus-sdr/storagecommands.cpp	/^ipmi::RspType<uint8_t> ipmiStorageClearSEL(ipmi::Context::ptr ctx,$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::RspType<uint8_t>
ipmiStorageGetFruInvAreaInfo	dbus-sdr/storagecommands.cpp	/^    ipmiStorageGetFruInvAreaInfo(ipmi::Context::ptr ctx, uint8_t fruDeviceId)$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::RspType<uint16_t,uint8_t>
ipmiStorageGetFruInvAreaInfo	storagehandler.cpp	/^    ipmiStorageGetFruInvAreaInfo(uint8_t fruID)$/;"	f	typeref:typename:ipmi::RspType<uint16_t,uint8_t>
ipmiStorageGetSDR	dbus-sdr/sensorcommands.cpp	/^    ipmiStorageGetSDR(ipmi::Context::ptr ctx, uint16_t reservationID,$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint16_t,std::vector<uint8_t>>
ipmiStorageGetSDRAllocationInfo	dbus-sdr/sensorcommands.cpp	/^    ipmiStorageGetSDRAllocationInfo()$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint16_t,uint16_t,uint16_t,uint16_t,uint8_t>
ipmiStorageGetSDRRepositoryInfo	dbus-sdr/sensorcommands.cpp	/^    ipmiStorageGetSDRRepositoryInfo(ipmi::Context::ptr ctx)$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint8_t,uint16_t,uint16_t,uint32_t,uint32_t,uint8_t>
ipmiStorageGetSELEntry	dbus-sdr/storagecommands.cpp	/^    ipmiStorageGetSELEntry(uint16_t reservationID, uint16_t targetID,$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::RspType<uint16_t,uint16_t,uint8_t,std::variant<systemEventType,oemTsEventType,oemEventType>>
ipmiStorageGetSELInfo	dbus-sdr/storagecommands.cpp	/^    ipmiStorageGetSELInfo()$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::RspType<uint8_t,uint16_t,uint16_t,uint32_t,uint32_t,uint8_t>
ipmiStorageGetSELTime	dbus-sdr/storagecommands.cpp	/^ipmi::RspType<uint32_t> ipmiStorageGetSELTime()$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::RspType<uint32_t>
ipmiStorageGetSelInfo	storagehandler.cpp	/^    ipmiStorageGetSelInfo()$/;"	f	typeref:typename:ipmi::RspType<uint8_t,uint16_t,uint16_t,uint32_t,uint32_t,bool,bool,bool,bool,uint3_t,bool>
ipmiStorageGetSelTime	storagehandler.cpp	/^    ipmiStorageGetSelTime()$/;"	f	typeref:typename:ipmi::RspType<uint32_t>
ipmiStorageReadFruData	dbus-sdr/storagecommands.cpp	/^    ipmiStorageReadFruData(ipmi::Context::ptr ctx, uint8_t fruDeviceId,$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::RspType<uint8_t,std::vector<uint8_t>>
ipmiStorageReadFruData	storagehandler.cpp	/^    ipmiStorageReadFruData(uint8_t fruDeviceId, uint16_t offset,$/;"	f	typeref:typename:ipmi::RspType<uint8_t,std::vector<uint8_t>>
ipmiStorageReserveSDR	dbus-sdr/sensorcommands.cpp	/^ipmi::RspType<uint16_t> ipmiStorageReserveSDR()$/;"	f	namespace:ipmi	typeref:typename:ipmi::RspType<uint16_t>
ipmiStorageReserveSel	storagehandler.cpp	/^ipmi::RspType<uint16_t> ipmiStorageReserveSel()$/;"	f	typeref:typename:ipmi::RspType<uint16_t>
ipmiStorageSetSELTime	dbus-sdr/storagecommands.cpp	/^ipmi::RspType<> ipmiStorageSetSELTime(uint32_t selTime)$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::RspType<>
ipmiStorageSetSelTime	storagehandler.cpp	/^ipmi::RspType<> ipmiStorageSetSelTime(uint32_t selDeviceTime)$/;"	f	typeref:typename:ipmi::RspType<>
ipmiStorageWriteFruData	dbus-sdr/storagecommands.cpp	/^    ipmiStorageWriteFruData(ipmi::Context::ptr ctx, uint8_t fruDeviceId,$/;"	f	namespace:ipmi::storage	typeref:typename:ipmi::RspType<uint8_t>
ipmiTimerUseToWdTimerUse	app/watchdog.cpp	/^WatchdogService::TimerUse ipmiTimerUseToWdTimerUse(IpmiTimerUse ipmiTimerUse)$/;"	f	typeref:typename:WatchdogService::TimerUse
ipmiUserCheckEnabled	user_channel/user_layer.cpp	/^Cc ipmiUserCheckEnabled(const uint8_t userId, bool& state)$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserDataFile	user_channel/user_mgmt.cpp	/^static constexpr const char* ipmiUserDataFile = "\/var\/lib\/ipmi\/ipmi_user.json";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
ipmiUserGetAllCounts	user_channel/user_layer.cpp	/^Cc ipmiUserGetAllCounts(uint8_t& maxChUsers, uint8_t& enabledUsers,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserGetPassword	user_channel/user_layer.cpp	/^std::string ipmiUserGetPassword(const std::string& userName)$/;"	f	namespace:ipmi	typeref:typename:std::string
ipmiUserGetPrivilegeAccess	user_channel/user_layer.cpp	/^Cc ipmiUserGetPrivilegeAccess(const uint8_t userId, const uint8_t chNum,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserGetUserId	user_channel/user_layer.cpp	/^uint8_t ipmiUserGetUserId(const std::string& userName)$/;"	f	namespace:ipmi	typeref:typename:uint8_t
ipmiUserGetUserName	user_channel/user_layer.cpp	/^Cc ipmiUserGetUserName(const uint8_t userId, std::string& userName)$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserGetUserPayloadAccess	user_channel/user_layer.cpp	/^Cc ipmiUserGetUserPayloadAccess(const uint8_t chNum, const uint8_t userId,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserInit	user_channel/user_layer.cpp	/^Cc ipmiUserInit()$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserIsValidPrivilege	user_channel/user_layer.cpp	/^bool ipmiUserIsValidPrivilege(const uint8_t priv)$/;"	f	namespace:ipmi	typeref:typename:bool
ipmiUserIsValidUserId	user_channel/user_layer.cpp	/^bool ipmiUserIsValidUserId(const uint8_t userId)$/;"	f	namespace:ipmi	typeref:typename:bool
ipmiUserMutex	user_channel/user_mgmt.cpp	/^static constexpr const char* ipmiUserMutex = "ipmi_usr_mutex";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
ipmiUserPamAuthenticate	user_channel/user_layer.cpp	/^bool ipmiUserPamAuthenticate(std::string_view userName,$/;"	f	namespace:ipmi	typeref:typename:bool
ipmiUserSetPrivilegeAccess	user_channel/user_layer.cpp	/^Cc ipmiUserSetPrivilegeAccess(const uint8_t userId, const uint8_t chNum,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserSetUserName	user_channel/user_layer.cpp	/^Cc ipmiUserSetUserName(const uint8_t userId, const char* userName)$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserSetUserName	user_channel/user_layer.cpp	/^Cc ipmiUserSetUserName(const uint8_t userId, const std::string& userName)$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserSetUserPassword	user_channel/user_layer.cpp	/^Cc ipmiUserSetUserPassword(const uint8_t userId, const char* userPassword)$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserSetUserPayloadAccess	user_channel/user_layer.cpp	/^Cc ipmiUserSetUserPayloadAccess(const uint8_t chNum, const uint8_t operation,$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiUserUpdateEnabledState	user_channel/user_layer.cpp	/^Cc ipmiUserUpdateEnabledState(const uint8_t userId, const bool& state)$/;"	f	namespace:ipmi	typeref:typename:Cc
ipmiVer	apphandler.cpp	/^        uint8_t ipmiVer;$/;"	m	struct:ipmiAppGetDeviceId::__anon1df7a8b50508	typeref:typename:uint8_t	file:
ipmi_app_read_event	systemintfcmds.cpp	/^ipmi_ret_t ipmi_app_read_event(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
ipmi_app_sysinfo_params	apphandler.hpp	/^enum ipmi_app_sysinfo_params$/;"	g
ipmi_chassis_control_cmds	chassishandler.hpp	/^enum ipmi_chassis_control_cmds : uint8_t$/;"	g	typeref:typename:uint8_t
ipmi_chassis_return_codes	chassishandler.hpp	/^enum ipmi_chassis_return_codes$/;"	g
ipmi_cmd_privilege_t	include/ipmid/api.h	/^typedef enum CommandPrivilege ipmi_cmd_privilege_t;$/;"	t	typeref:enum:CommandPrivilege
ipmi_cmd_t	include/ipmid/api.h	/^typedef unsigned char ipmi_cmd_t;$/;"	t	typeref:typename:unsigned char
ipmi_context_t	include/ipmid/api.h	/^typedef void* ipmi_context_t;$/;"	t	typeref:typename:void *
ipmi_data_len_t	include/ipmid/api.h	/^typedef std::size_t* ipmi_data_len_t;$/;"	t	typeref:typename:std::size_t *
ipmi_entity_get_sdr	sensorhandler.cpp	/^ipmi_ret_t ipmi_entity_get_sdr(ipmi_request_t request, ipmi_response_t response,$/;"	f	typeref:typename:ipmi_ret_t
ipmi_fru_get_sdr	sensorhandler.cpp	/^ipmi_ret_t ipmi_fru_get_sdr(ipmi_request_t request, ipmi_response_t response,$/;"	f	typeref:typename:ipmi_ret_t
ipmi_generic_return_codes	chassishandler.hpp	/^enum ipmi_generic_return_codes$/;"	g
ipmi_global_control_cmds	globalhandler.hpp	/^enum ipmi_global_control_cmds : uint8_t$/;"	g	typeref:typename:uint8_t
ipmi_groupext	groupext.cpp	/^ipmi_ret_t ipmi_groupext(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
ipmi_net_fns	include/ipmid/api.h	/^enum ipmi_net_fns$/;"	g
ipmi_netfn_app_cmds	apphandler.hpp	/^enum ipmi_netfn_app_cmds$/;"	g
ipmi_netfn_chassis_cmds	chassishandler.hpp	/^enum ipmi_netfn_chassis_cmds$/;"	g
ipmi_netfn_sen_cmds	sensorhandler.hpp	/^enum ipmi_netfn_sen_cmds$/;"	g
ipmi_netfn_storage_cmds	storagehandler.hpp	/^enum ipmi_netfn_storage_cmds$/;"	g
ipmi_netfn_system_intf_cmds	systemintfcmds.hpp	/^enum ipmi_netfn_system_intf_cmds$/;"	g
ipmi_netfn_t	include/ipmid/api.h	/^typedef unsigned char ipmi_netfn_t;$/;"	t	typeref:typename:unsigned char
ipmi_netfn_user_cmds	user_channel/usercommands.hpp	/^enum ipmi_netfn_user_cmds$/;"	g	namespace:ipmi
ipmi_netfn_wild_card_cmd	include/ipmid/api.h	/^enum ipmi_netfn_wild_card_cmd$/;"	g
ipmi_register_callback	ipmid-new.cpp	/^void ipmi_register_callback(ipmi_netfn_t netFn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:void
ipmi_register_callback	test/oemrouter_unittest.cpp	/^void ipmi_register_callback(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:void
ipmi_request_t	include/ipmid/api.h	/^typedef void* ipmi_request_t;$/;"	t	typeref:typename:void *
ipmi_response_t	include/ipmid/api.h	/^typedef void* ipmi_response_t;$/;"	t	typeref:typename:void *
ipmi_ret_t	include/ipmid/api.h	/^typedef unsigned char ipmi_ret_t;$/;"	t	typeref:typename:unsigned char
ipmi_return_codes	include/ipmid/api.h	/^enum ipmi_return_codes$/;"	g
ipmi_sen_get_sdr	sensorhandler.cpp	/^ipmi_ret_t ipmi_sen_get_sdr(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
ipmi_sensor_types	sensorhandler.hpp	/^enum ipmi_sensor_types$/;"	g
ipmicmdPlatformEvent	sensorhandler.cpp	/^ipmi_ret_t ipmicmdPlatformEvent(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
ipmid	Makefile.am	/^	ipmid$/;"	P	directory:bin
ipmid_CXXFLAGS	Makefile.am	/^ipmid_CXXFLAGS = $(COMMON_CXX)$/;"	m
ipmid_LDADD	Makefile.am	/^ipmid_LDADD = \\$/;"	m
ipmid_LDFLAGS	Makefile.am	/^ipmid_LDFLAGS = \\$/;"	m
ipmid_SOURCES	Makefile.am	/^ipmid_SOURCES = \\$/;"	m
ipmid_callback_t	include/ipmid/api.h	/^typedef ipmi_ret_t (*ipmid_callback_t)(ipmi_netfn_t, ipmi_cmd_t, ipmi_request_t,$/;"	t	typeref:typename:ipmi_ret_t (*)(ipmi_netfn_t,ipmi_cmd_t,ipmi_request_t,ipmi_response_t,ipmi_data_len_t,ipmi_context_t)
ipmid_get_host_cmd_manager	ipmid-new.cpp	/^std::unique_ptr<phosphor::host::command::Manager>& ipmid_get_host_cmd_manager()$/;"	f	typeref:typename:std::unique_ptr<phosphor::host::command::Manager> &
ipmid_get_sd_bus_connection	ipmid-new.cpp	/^sd_bus* ipmid_get_sd_bus_connection(void)$/;"	f	typeref:typename:sd_bus *
ipmid_get_sd_event_connection	ipmid-new.cpp	/^sd_event* ipmid_get_sd_event_connection(void)$/;"	f	typeref:typename:sd_event *
ipmid_get_sdbus_plus_handler	libipmid/systemintf-sdbus.cpp	/^std::unique_ptr<sdbusplus::asio::connection>& ipmid_get_sdbus_plus_handler()$/;"	f	typeref:typename:std::unique_ptr<sdbusplus::asio::connection> &
ipmid_send_cmd_to_host	ipmid-new.cpp	/^void ipmid_send_cmd_to_host(CommandHandler&& cmd)$/;"	f	typeref:typename:void
ipmitool_y_from_x	test/dbus-sdr/sensorcommands_unittest.cpp	/^double ipmitool_y_from_x(uint8_t x, int m, int k2_rExp, int b, int k1_bExp,$/;"	f	typeref:typename:double
ipmiwhitelist.cpp	Makefile.am	/^ipmiwhitelist.cpp: ${srcdir}\/generate_whitelist.sh $(WHITELIST_CONF)$/;"	t
isAnalogSensor	sensorhandler.cpp	/^bool isAnalogSensor(const std::string& interface)$/;"	f	typeref:typename:bool
isChValid	user_channel/channel_mgmt.hpp	/^    bool isChValid;$/;"	m	struct:ipmi::ChannelProperties	typeref:typename:bool
isCmdWhitelisted	apphandler.cpp	/^static bool isCmdWhitelisted(uint8_t busId, uint8_t slaveAddr,$/;"	f	typeref:typename:bool	file:
isCompleted	softoff/softoff.hpp	/^    inline auto isCompleted()$/;"	f	class:phosphor::ipmi::SoftPowerOff	typeref:typename:auto
isDCMIPowerMgmtSupported	dcmihandler.cpp	/^bool isDCMIPowerMgmtSupported()$/;"	f	namespace:dcmi	typeref:typename:bool
isFromSystemChannel	sensorhandler.cpp	/^static bool isFromSystemChannel()$/;"	f	typeref:typename:bool	file:
isFruPresent	storagehandler.cpp	/^bool isFruPresent(const std::string& fruPath)$/;"	f	typeref:typename:bool
isIpmi	user_channel/channel_layer.hpp	/^    bool isIpmi; \/\/ Is session IPMI$/;"	m	struct:ipmi::ChannelInfo	typeref:typename:bool
isIpmiInAvailableGroupList	user_channel/user_mgmt.cpp	/^bool UserAccess::isIpmiInAvailableGroupList()$/;"	f	class:ipmi::UserAccess	typeref:typename:bool
isIpmiString	user_channel/channel_mgmt.cpp	/^static constexpr const char* isIpmiString = "is_ipmi";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
isLinked	include/ipmid/types.hpp	/^    bool isLinked;$/;"	m	struct:ipmi::sensor::EntityInfo	typeref:typename:bool
isList	include/ipmid/types.hpp	/^    bool isList;$/;"	m	struct:ipmi::sensor::EntityInfo	typeref:typename:bool
isManagementNIC	user_channel/channel_mgmt.cpp	/^static constexpr const char* isManagementNIC = "is_management_nic";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
isManagementNIC	user_channel/channel_mgmt.hpp	/^    bool isManagementNIC;$/;"	m	struct:ipmi::ChannelProperties	typeref:typename:bool
isOpen	ipmid-new.cpp	/^    bool isOpen() const$/;"	f	struct:ipmi::IpmiProvider	typeref:typename:bool	file:
isRecordOEM	selutility.cpp	/^inline bool isRecordOEM(uint8_t recordType)$/;"	f	namespace:ipmi::sel::internal	typeref:typename:bool
isSessionObjectMatched	include/ipmid/sessionhelper.hpp	/^bool isSessionObjectMatched(const std::string objectPath,$/;"	f	typeref:typename:bool
isTimerExpired	softoff/softoff.hpp	/^    inline auto isTimerExpired()$/;"	f	class:phosphor::ipmi::SoftPowerOff	typeref:typename:auto
isValid	libipmid/utils.cpp	/^bool ServiceCache::isValid(sdbusplus::bus::bus& bus) const$/;"	f	class:ipmi::ServiceCache	typeref:typename:bool
isValidACPIState	apphandler.cpp	/^bool isValidACPIState(acpi_state::PowerStateType type, uint8_t state)$/;"	f	namespace:acpi_state	typeref:typename:bool
isValidAccessMode	user_channel/channel_layer.cpp	/^bool isValidAccessMode(const uint8_t accessMode)$/;"	f	namespace:ipmi	typeref:typename:bool
isValidAuthType	user_channel/channel_layer.cpp	/^bool isValidAuthType(const uint8_t chNum, const EAuthType& authType)$/;"	f	namespace:ipmi	typeref:typename:bool
isValidAuthType	user_channel/channel_mgmt.cpp	/^bool ChannelConfig::isValidAuthType(const uint8_t chNum,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:bool
isValidChannel	user_channel/channel_layer.cpp	/^bool isValidChannel(const uint8_t chNum)$/;"	f	namespace:ipmi	typeref:typename:bool
isValidChannel	user_channel/channel_mgmt.cpp	/^bool ChannelConfig::isValidChannel(const uint8_t chNum)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:bool
isValidChannel	user_channel/user_mgmt.cpp	/^bool UserAccess::isValidChannel(const uint8_t chNum)$/;"	f	class:ipmi::UserAccess	typeref:typename:bool
isValidMACAddress	transporthandler.cpp	/^bool isValidMACAddress(const ether_addr& mac)$/;"	f	namespace:ipmi::transport	typeref:typename:bool
isValidPayloadType	user_channel/channel_layer.cpp	/^bool isValidPayloadType(const PayloadType payloadType)$/;"	f	namespace:ipmi	typeref:typename:bool
isValidPrivLimit	user_channel/channel_layer.cpp	/^bool isValidPrivLimit(const uint8_t privLimit)$/;"	f	namespace:ipmi	typeref:typename:bool
isValidPrivilege	user_channel/user_mgmt.cpp	/^bool UserAccess::isValidPrivilege(const uint8_t priv)$/;"	f	class:ipmi::UserAccess	typeref:typename:bool
isValidString	user_channel/channel_mgmt.cpp	/^static constexpr const char* isValidString = "is_valid";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
isValidUserId	user_channel/user_mgmt.cpp	/^bool UserAccess::isValidUserId(const uint8_t userId)$/;"	f	class:ipmi::UserAccess	typeref:typename:bool
isValidUserName	user_channel/user_mgmt.cpp	/^bool UserAccess::isValidUserName(const std::string& userName)$/;"	f	class:ipmi::UserAccess	typeref:typename:bool
isWriteDataWhitelisted	apphandler.cpp	/^static inline bool isWriteDataWhitelisted(const std::vector<uint8_t>& data,$/;"	f	typeref:typename:bool	file:
itemPresentProp	read_fru_data.hpp	/^static constexpr auto itemPresentProp = "Present";$/;"	v	namespace:ipmi::fru	typeref:typename:auto
iterator	transporthandler.hpp	/^        iterator(ObjectTree::const_iterator it, ObjectLookupCache& container) :$/;"	f	class:ipmi::transport::ObjectLookupCache::iterator
iterator	transporthandler.hpp	/^    class iterator : public ObjectTree::const_iterator$/;"	c	class:ipmi::transport::ObjectLookupCache
ivSize	user_channel/passwd_mgr.cpp	/^    size_t ivSize;$/;"	m	struct:ipmi::MetaPassStruct	typeref:typename:size_t	file:
jsonAccCallbk	user_channel/user_mgmt.cpp	/^static constexpr const char* jsonAccCallbk = "access_callback";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
jsonFixedUser	user_channel/user_mgmt.cpp	/^static constexpr const char* jsonFixedUser = "fixed_user_name";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
jsonIpmiEnabled	user_channel/user_mgmt.cpp	/^static constexpr const char* jsonIpmiEnabled = "ipmi_enabled";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
jsonLinkAuthEnabled	user_channel/user_mgmt.cpp	/^static constexpr const char* jsonLinkAuthEnabled = "link_auth_enabled";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
jsonPriv	user_channel/user_mgmt.cpp	/^static constexpr const char* jsonPriv = "privilege";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
jsonUserEnabled	user_channel/user_mgmt.cpp	/^static constexpr const char* jsonUserEnabled = "user_enabled";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
jsonUserInSys	user_channel/user_mgmt.cpp	/^static constexpr const char* jsonUserInSys = "user_in_system";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
jsonUserName	user_channel/user_mgmt.cpp	/^static constexpr const char* jsonUserName = "user_name";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
kcs	user_channel/channel_layer.hpp	/^    kcs = 0x05,$/;"	e	enum:ipmi::EChannelProtocolType
key	sensorhandler.hpp	/^    SensorDataEntityRecordKey key;$/;"	m	struct:get_sdr::SensorDataEntityRecord	typeref:typename:SensorDataEntityRecordKey
key	sensorhandler.hpp	/^    SensorDataFruRecordKey key;$/;"	m	struct:get_sdr::SensorDataFruRecord	typeref:typename:SensorDataFruRecordKey
key	sensorhandler.hpp	/^    SensorDataRecordKey key;$/;"	m	struct:get_sdr::SensorDataEventRecord	typeref:typename:SensorDataRecordKey
key	sensorhandler.hpp	/^    SensorDataRecordKey key;$/;"	m	struct:get_sdr::SensorDataFullRecord	typeref:typename:SensorDataRecordKey
key	sensorhandler.hpp	/^namespace key$/;"	n	namespace:get_sdr
lan8032	user_channel/channel_layer.hpp	/^    lan8032 = 0x04,$/;"	e	enum:ipmi::EChannelMediumType
lastCallSuccessful	app/watchdog.cpp	/^static bool lastCallSuccessful = false;$/;"	v	typeref:typename:bool	file:
lastDevId	dbus-sdr/storagecommands.cpp	/^static uint8_t lastDevId = 0xFF;$/;"	v	namespace:ipmi::storage	typeref:typename:uint8_t	file:
lastDisabledVlan	transporthandler.cpp	/^static std::unordered_map<uint8_t, uint16_t> lastDisabledVlan;$/;"	v	namespace:ipmi::transport	typeref:typename:std::unordered_map<uint8_t,uint16_t>	file:
lastEntry	selutility.hpp	/^static constexpr auto lastEntry = 0xFFFF;$/;"	v	namespace:ipmi::sel	typeref:typename:auto
lastNetFunction	test/oemrouter_unittest.cpp	/^static ipmi_netfn_t lastNetFunction;$/;"	v	typeref:typename:ipmi_netfn_t	file:
lastRecordIndex	dbus-sdr/sensorcommands.cpp	/^static constexpr size_t lastRecordIndex = 0xFFFF;$/;"	v	namespace:ipmi	typeref:typename:size_t	file:
legacyOff	apphandler.cpp	/^    legacyOff = 0x21,$/;"	e	enum:acpi_state::PowerState	file:
legacyOn	apphandler.cpp	/^    legacyOn = 0x20,$/;"	e	enum:acpi_state::PowerState	file:
legacyRouter	ipmid-new.cpp	/^static LegacyRouter legacyRouter;$/;"	v	namespace:oem	typeref:typename:LegacyRouter	file:
length	dcmihandler.hpp	/^    uint8_t length;       \/\/!< Length of the value from DCMI spec.$/;"	m	struct:dcmi::DCMICap	typeref:typename:uint8_t
lib_LTLIBRARIES	libipmid-host/Makefile.am	/^lib_LTLIBRARIES = libipmid-host.la$/;"	m
lib_LTLIBRARIES	libipmid/Makefile.am	/^lib_LTLIBRARIES = libipmid.la$/;"	m
lib_LTLIBRARIES	user_channel/Makefile.am	/^lib_LTLIBRARIES =$/;"	m
libchannellayer.la	user_channel/Makefile.am	/^lib_LTLIBRARIES += libchannellayer.la$/;"	T	directory:lib
libchannellayer_la_LDFLAGS	user_channel/Makefile.am	/^libchannellayer_la_LDFLAGS = \\$/;"	m
libchannellayer_la_SOURCES	user_channel/Makefile.am	/^libchannellayer_la_SOURCES = \\$/;"	m
libdynamiccmds_la_CXXFLAGS	Makefile.am	/^libdynamiccmds_la_CXXFLAGS = $(COMMON_CXX)$/;"	m
libdynamiccmds_la_LDFLAGS	Makefile.am	/^libdynamiccmds_la_LDFLAGS = \\$/;"	m
libdynamiccmds_la_LIBADD	Makefile.am	/^libdynamiccmds_la_LIBADD = \\$/;"	m
libdynamiccmds_la_SOURCES	Makefile.am	/^libdynamiccmds_la_SOURCES = \\$/;"	m
libipmi20_BUILT_LIST	Makefile.am	/^libipmi20_BUILT_LIST = \\$/;"	m
libipmi20_la_LDFLAGS	Makefile.am	/^libipmi20_la_LDFLAGS = \\$/;"	m
libipmi20_la_LIBADD	Makefile.am	/^libipmi20_la_LIBADD = \\$/;"	m
libipmi20_la_SOURCES	Makefile.am	/^libipmi20_la_SOURCES = \\$/;"	m
libipmi20_la_TRANSPORTOEM	Makefile.am	/^libipmi20_la_TRANSPORTOEM = transporthandler_oem.cpp$/;"	m
libipmi20_la_TRANSPORTOEM	Makefile.am	/^libipmi20_la_TRANSPORTOEM =$/;"	m
libipmid-host.la	libipmid-host/Makefile.am	/^lib_LTLIBRARIES = libipmid-host.la$/;"	T	directory:lib
libipmid-host.pc	libipmid-host/Makefile.am	/^pkgconfig_DATA = libipmid-host.pc$/;"	D	directory:pkgconfig
libipmid.la	libipmid/Makefile.am	/^lib_LTLIBRARIES = libipmid.la$/;"	T	directory:lib
libipmid.pc	libipmid/Makefile.am	/^pkgconfig_DATA = libipmid.pc$/;"	D	directory:pkgconfig
libipmid_host_la_CXXFLAGS	libipmid-host/Makefile.am	/^libipmid_host_la_CXXFLAGS = \\$/;"	m
libipmid_host_la_LDFLAGS	libipmid-host/Makefile.am	/^libipmid_host_la_LDFLAGS = \\$/;"	m
libipmid_host_la_SOURCES	libipmid-host/Makefile.am	/^libipmid_host_la_SOURCES =$/;"	m
libipmid_la_CXXFLAGS	libipmid/Makefile.am	/^libipmid_la_CXXFLAGS = \\$/;"	m
libipmid_la_LDFLAGS	libipmid/Makefile.am	/^libipmid_la_LDFLAGS = \\$/;"	m
libipmid_la_SOURCES	libipmid/Makefile.am	/^libipmid_la_SOURCES = \\$/;"	m
libsysintfcmds_la_CXXFLAGS	Makefile.am	/^libsysintfcmds_la_CXXFLAGS = $(COMMON_CXX)$/;"	m
libsysintfcmds_la_LDFLAGS	Makefile.am	/^libsysintfcmds_la_LDFLAGS = \\$/;"	m
libsysintfcmds_la_LIBADD	Makefile.am	/^libsysintfcmds_la_LIBADD = \\$/;"	m
libsysintfcmds_la_SOURCES	Makefile.am	/^libsysintfcmds_la_SOURCES = \\$/;"	m
libusercmds_la_CXXFLAGS	Makefile.am	/^libusercmds_la_CXXFLAGS = $(COMMON_CXX)$/;"	m
libusercmds_la_LDFLAGS	Makefile.am	/^libusercmds_la_LDFLAGS = \\$/;"	m
libusercmds_la_LIBADD	Makefile.am	/^libusercmds_la_LIBADD = \\$/;"	m
libusercmds_la_SOURCES	Makefile.am	/^libusercmds_la_SOURCES = \\$/;"	m
libuserlayer	configure.ac	/^AC_ARG_ENABLE([libuserlayer],$/;"	e
libuserlayer.la	user_channel/Makefile.am	/^lib_LTLIBRARIES += libuserlayer.la$/;"	T	directory:lib
libuserlayer_la_LDFLAGS	user_channel/Makefile.am	/^libuserlayer_la_LDFLAGS = \\$/;"	m
libuserlayer_la_SOURCES	user_channel/Makefile.am	/^libuserlayer_la_SOURCES = \\$/;"	m
libwhitelist	Makefile.am	/^libwhitelistdir = ${libdir}\/ipmid-providers$/;"	d
libwhitelist.la	Makefile.am	/^libwhitelist_LTLIBRARIES = libwhitelist.la$/;"	T	directory:libwhitelist
libwhitelist_LTLIBRARIES	Makefile.am	/^libwhitelist_LTLIBRARIES = libwhitelist.la$/;"	m
libwhitelist_la_CXXFLAGS	Makefile.am	/^libwhitelist_la_CXXFLAGS = $(COMMON_CXX)$/;"	m
libwhitelist_la_LDFLAGS	Makefile.am	/^libwhitelist_la_LDFLAGS = \\$/;"	m
libwhitelist_la_SOURCES	Makefile.am	/^libwhitelist_la_SOURCES = \\$/;"	m
libwhitelistdir	Makefile.am	/^libwhitelistdir = ${libdir}\/ipmid-providers$/;"	m
linearization	sensorhandler.hpp	/^    uint8_t linearization;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
linkAuthEnabled	user_channel/user_layer.hpp	/^    uint8_t linkAuthEnabled : 1;$/;"	m	struct:ipmi::PrivAccess	typeref:typename:uint8_t:1
linkAuthEnabled	user_channel/user_mgmt.hpp	/^    bool linkAuthEnabled;$/;"	m	struct:ipmi::UserPrivAccess	typeref:typename:bool
linkedBit	sensorhandler.hpp	/^static constexpr uint8_t linkedBit = 6;$/;"	v	namespace:get_sdr::key	typeref:typename:uint8_t
listCipherSuite	app/channel.hpp	/^static constexpr auto listCipherSuite = 0x80;$/;"	v	namespace:cipher	typeref:typename:auto
listOrRangeBit	sensorhandler.hpp	/^static constexpr uint8_t listOrRangeBit = 7;$/;"	v	namespace:get_sdr::key	typeref:typename:uint8_t
loadCSPrivilegesToMap	user_channel/cipher_mgmt.cpp	/^void CipherConfig::loadCSPrivilegesToMap()$/;"	f	class:ipmi::CipherConfig	typeref:typename:void
loadChannelConfig	user_channel/channel_mgmt.cpp	/^int ChannelConfig::loadChannelConfig()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
loadProviders	ipmid-new.cpp	/^std::forward_list<IpmiProvider> loadProviders(const fs::path& ipmiLibsPath)$/;"	f	namespace:ipmi	typeref:typename:std::forward_list<IpmiProvider>
logBasePath	selutility.hpp	/^static constexpr auto logBasePath = "\/xyz\/openbmc_project\/logging\/entry";$/;"	v	namespace:ipmi::sel	typeref:typename:auto
logDeleteIntf	selutility.hpp	/^static constexpr auto logDeleteIntf = "xyz.openbmc_project.Object.Delete";$/;"	v	namespace:ipmi::sel	typeref:typename:auto
logEntryIntf	selutility.hpp	/^static constexpr auto logEntryIntf = "xyz.openbmc_project.Logging.Entry";$/;"	v	namespace:ipmi::sel	typeref:typename:auto
logWithChannel	transporthandler.cpp	/^auto logWithChannel(const ChannelParams& params, Args&&... args)$/;"	f	namespace:ipmi::transport	typeref:typename:auto
logWithChannel	transporthandler.cpp	/^auto logWithChannel(const std::optional<ChannelParams>& params, Args&&... args)$/;"	f	namespace:ipmi::transport	typeref:typename:auto
logging	elog-errors.hpp	/^namespace logging$/;"	n	namespace:phosphor
logicalPath	transporthandler.hpp	/^    std::string logicalPath;$/;"	m	struct:ipmi::transport::ChannelParams	typeref:typename:std::string
logs	test/message/payload.cpp	/^std::vector<std::string> logs;$/;"	v	typeref:typename:std::vector<std::string>
lookup	sys_info_param.cpp	/^    SysInfoParamStore::lookup(uint8_t paramSelector) const$/;"	f	class:SysInfoParamStore	typeref:typename:std::tuple<bool,std::string>
lookup_t	ipmisensor.cpp	/^struct lookup_t$/;"	s	file:
lowerCritical	include/dbus-sdr/sensorcommands.hpp	/^    lowerCritical = (1 << 1),$/;"	e	enum:IPMISensorReadingByte3
lowerCritical	include/dbus-sdr/sensorcommands.hpp	/^    lowerCritical,$/;"	e	enum:IPMIThresholdRespBits
lowerCritical	sensorhandler.hpp	/^    uint8_t lowerCritical;       \/\/!< lower critical threshold$/;"	m	struct:get_sdr::GetSensorThresholdsResponse	typeref:typename:uint8_t
lowerCriticalGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    lowerCriticalGoingHigh = (1 << 3),$/;"	e	enum:IPMISensorEventEnableThresholds
lowerCriticalGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    lowerCriticalGoingHigh = 3,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
lowerCriticalGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    lowerCriticalGoingLow = (1 << 2),$/;"	e	enum:IPMISensorEventEnableThresholds
lowerCriticalGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    lowerCriticalGoingLow = 2,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
lowerNonCritical	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonCritical = (1 << 0),$/;"	e	enum:IPMISensorReadingByte3
lowerNonCritical	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonCritical,$/;"	e	enum:IPMIThresholdRespBits
lowerNonCritical	sensorhandler.hpp	/^    uint8_t lowerNonCritical;    \/\/!< lower non-critical threshold$/;"	m	struct:get_sdr::GetSensorThresholdsResponse	typeref:typename:uint8_t
lowerNonCriticalGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonCriticalGoingHigh = (1 << 1),$/;"	e	enum:IPMISensorEventEnableThresholds
lowerNonCriticalGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonCriticalGoingHigh = 1,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
lowerNonCriticalGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonCriticalGoingLow = (1 << 0),$/;"	e	enum:IPMISensorEventEnableThresholds
lowerNonCriticalGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonCriticalGoingLow = 0,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
lowerNonRecoverable	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonRecoverable = (1 << 2),$/;"	e	enum:IPMISensorReadingByte3
lowerNonRecoverable	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonRecoverable,$/;"	e	enum:IPMIThresholdRespBits
lowerNonRecoverable	sensorhandler.hpp	/^    uint8_t lowerNonRecoverable; \/\/!< lower non-recoverable threshold$/;"	m	struct:get_sdr::GetSensorThresholdsResponse	typeref:typename:uint8_t
lowerNonRecoverableGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonRecoverableGoingHigh = (1 << 5),$/;"	e	enum:IPMISensorEventEnableThresholds
lowerNonRecoverableGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonRecoverableGoingHigh = 5,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
lowerNonRecoverableGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonRecoverableGoingLow = (1 << 4),$/;"	e	enum:IPMISensorEventEnableThresholds
lowerNonRecoverableGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    lowerNonRecoverableGoingLow = 4,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
lower_critical_threshold	sensorhandler.hpp	/^    uint8_t lower_critical_threshold;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
lower_noncritical_threshold	sensorhandler.hpp	/^    uint8_t lower_noncritical_threshold;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
lower_nonrecoverable_threshold	sensorhandler.hpp	/^    uint8_t lower_nonrecoverable_threshold;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
lowercritical	include/dbus-sdr/sensorcommands.hpp	/^    uint8_t lowercritical;$/;"	m	struct:SensorThresholdResp	typeref:typename:uint8_t
lowernc	include/dbus-sdr/sensorcommands.hpp	/^    uint8_t lowernc;$/;"	m	struct:SensorThresholdResp	typeref:typename:uint8_t
lowernonrecoverable	include/dbus-sdr/sensorcommands.hpp	/^    uint8_t lowernonrecoverable;$/;"	m	struct:SensorThresholdResp	typeref:typename:uint8_t
lun	include/ipmid/message.hpp	/^    uint8_t lun;$/;"	m	struct:ipmi::Context	typeref:typename:uint8_t
lun1Sensor0	include/dbus-sdr/sdrutils.hpp	/^static constexpr uint16_t lun1Sensor0 = 0x100;$/;"	v	typeref:typename:uint16_t
lun3Sensor0	include/dbus-sdr/sdrutils.hpp	/^static constexpr uint16_t lun3Sensor0 = 0x300;$/;"	v	typeref:typename:uint16_t
m_lsb	sensorhandler.hpp	/^    uint8_t m_lsb;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
m_msb_and_tolerance	sensorhandler.hpp	/^    uint8_t m_msb_and_tolerance;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
mac	transporthandler.hpp	/^    ether_addr mac;$/;"	m	struct:ipmi::transport::IfNeigh	typeref:typename:ether_addr
macAddrLen	apphandler.cpp	/^static constexpr uint8_t macAddrLen = 6;$/;"	v	typeref:typename:uint8_t	file:
macOffset	chassishandler.cpp	/^static constexpr size_t macOffset = 9;$/;"	v	typeref:typename:size_t	file:
macSize	user_channel/passwd_mgr.cpp	/^    size_t macSize;$/;"	m	struct:ipmi::MetaPassStruct	typeref:typename:size_t	file:
main	ipmid-new.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	scripts/fru_gen.py	/^def main():$/;"	f
main	scripts/inventory-sensor.py	/^def main():$/;"	f
main	scripts/sensor_gen.py	/^def main():$/;"	f
main	softoff/mainapp.cpp	/^int main(int argc, char** argv)$/;"	f	typeref:typename:int
main	testaddsel.cpp	/^int main(int argc, char* argv[])$/;"	f	typeref:typename:int
main	testit.cpp	/^int main()$/;"	f	typeref:typename:int
major	apphandler.cpp	/^    char major;$/;"	m	struct:__anon1df7a8b50408	typeref:typename:char	file:
major	dcmihandler.hpp	/^    uint8_t major;         \/\/!< DCMI Spec Conformance - major ver = 01h.$/;"	m	struct:dcmi::GetConfParamsResponse	typeref:typename:uint8_t
major	dcmihandler.hpp	/^    uint8_t major;         \/\/!< DCMI Specification Conformance - major ver$/;"	m	struct:dcmi::GetDCMICapResponse	typeref:typename:uint8_t
makeCmdKey	ipmid-new.cpp	/^static inline unsigned int makeCmdKey(unsigned int cluster, unsigned int cmd)$/;"	f	namespace:ipmi	typeref:typename:unsigned int	file:
makeDbusMsg	sensordatahandler.cpp	/^IpmiUpdateData makeDbusMsg(const std::string& updateInterface,$/;"	f	namespace:ipmi::sensor::notify	typeref:typename:IpmiUpdateData
makeDbusMsg	sensordatahandler.cpp	/^IpmiUpdateData makeDbusMsg(const std::string& updateInterface,$/;"	f	namespace:ipmi::sensor::set	typeref:typename:IpmiUpdateData
makeFilter	include/ipmid/filter.hpp	/^static inline auto makeFilter(Filter&& filter)$/;"	f	namespace:ipmi	typeref:typename:auto
makeFilter	include/ipmid/filter.hpp	/^static inline auto makeFilter(const Filter& filter)$/;"	f	namespace:ipmi	typeref:typename:auto
makeHandler	include/ipmid/handler.hpp	/^inline auto makeHandler(Handler&& handler)$/;"	f	namespace:ipmi	typeref:typename:auto
makeLegacyHandler	include/ipmid/handler.hpp	/^inline auto makeLegacyHandler(const ipmid_callback_t& handler,$/;"	f	namespace:ipmi	typeref:typename:auto
makeLegacyHandler	include/ipmid/handler.hpp	/^inline auto makeLegacyHandler(oem::Handler&& handler)$/;"	f	namespace:ipmi	typeref:typename:auto
makeResponse	include/ipmid/message.hpp	/^    Response::ptr makeResponse()$/;"	f	struct:ipmi::message::Request	typeref:typename:Response::ptr
manufId	apphandler.cpp	/^        uint24_t manufId;$/;"	m	struct:ipmiAppGetDeviceId::__anon1df7a8b50508	typeref:typename:uint24_t	file:
manuf_id	systemintfcmds.hpp	/^    uint8_t manuf_id[3];$/;"	m	struct:oem_sel_timestamped	typeref:typename:uint8_t[3]
manufacturer	ipmi_fru_info_area.cpp	/^static constexpr auto manufacturer = "Manufacturer";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
manufacturerID	selutility.hpp	/^    uint8_t manufacturerID[3]; \/\/!< Manufacturer ID.$/;"	m	struct:ipmi::sel::SELOEMRecordTypeCD	typeref:typename:uint8_t[3]
manufacturingDateSize	ipmi_fru_info_area.cpp	/^static constexpr auto manufacturingDateSize = 0x3;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
map	settings.hpp	/^    std::map<Interface, std::vector<Path>> map;$/;"	m	struct:settings::Objects	typeref:typename:std::map<Interface,std::vector<Path>>
mapDbusToAssertion	sensordatahandler.cpp	/^GetSensorResponse mapDbusToAssertion(const Info& sensorInfo,$/;"	f	namespace:ipmi::sensor::get	typeref:typename:GetSensorResponse
map_exception_type	elog-errors.hpp	/^struct map_exception_type<$/;"	s	namespace:phosphor::logging::details
map_exception_type	elog-errors.hpp	/^struct map_exception_type<sdbusplus::org::open_power::Host::Error::Checkstop>$/;"	s	namespace:phosphor::logging::details
map_exception_type	elog-errors.hpp	/^struct map_exception_type<sdbusplus::org::open_power::Host::Error::Event>$/;"	s	namespace:phosphor::logging::details
mappedVariant	include/ipmid/utils.hpp	/^T mappedVariant(const ipmi::PropertyMap& props, const std::string& name,$/;"	f	namespace:ipmi	typeref:typename:T
mapperBusName	selutility.hpp	/^static constexpr auto mapperBusName = "xyz.openbmc_project.ObjectMapper";$/;"	v	namespace:ipmi::sel	typeref:typename:auto
mapperIntf	selutility.hpp	/^static constexpr auto mapperIntf = "xyz.openbmc_project.ObjectMapper";$/;"	v	namespace:ipmi::sel	typeref:typename:auto
mapperIntf	settings.cpp	/^constexpr auto mapperIntf = "xyz.openbmc_project.ObjectMapper";$/;"	v	namespace:settings	typeref:typename:auto
mapperObjPath	selutility.hpp	/^static constexpr auto mapperObjPath = "\/xyz\/openbmc_project\/object_mapper";$/;"	v	namespace:ipmi::sel	typeref:typename:auto
mapperPath	settings.cpp	/^constexpr auto mapperPath = "\/xyz\/openbmc_project\/object_mapper";$/;"	v	namespace:settings	typeref:typename:auto
mapperService	settings.cpp	/^constexpr auto mapperService = "xyz.openbmc_project.ObjectMapper";$/;"	v	namespace:settings	typeref:typename:auto
match	chassishandler.cpp	/^static constexpr auto match = "chassis0";$/;"	v	typeref:typename:auto	file:
match	globalhandler.cpp	/^static constexpr auto match = "bmc0";$/;"	v	typeref:typename:auto	file:
matchPtr	read_fru_data.cpp	/^std::unique_ptr<sdbusplus::bus::match_t> matchPtr$/;"	v	namespace:ipmi::fru	typeref:typename:std::unique_ptr<sdbusplus::bus::match_t>
maxBytes	dcmihandler.hpp	/^static constexpr auto maxBytes = 16;$/;"	v	namespace:dcmi	typeref:typename:auto
maxBytesPerParameter	apphandler.cpp	/^static constexpr size_t maxBytesPerParameter = 256;$/;"	v	typeref:typename:size_t	file:
maxCSRecords	user_channel/cipher_mgmt.hpp	/^static const size_t maxCSRecords = 16;$/;"	v	namespace:ipmi	typeref:typename:const size_t
maxContainedEntities	include/ipmid/types.hpp	/^static constexpr uint8_t maxContainedEntities = 4;$/;"	v	namespace:ipmi::sensor	typeref:typename:uint8_t
maxCtrlIdStrLen	dcmihandler.hpp	/^static constexpr size_t maxCtrlIdStrLen = 63;$/;"	v	namespace:dcmi	typeref:typename:size_t
maxDataSets	dcmihandler.hpp	/^static constexpr auto maxDataSets = 8;$/;"	v	namespace:dcmi::temp_readings	typeref:typename:auto
maxFruSdrNameSize	dbus-sdr/storagecommands.cpp	/^constexpr static const size_t maxFruSdrNameSize = 16;$/;"	v	namespace:ipmi::storage	typeref:typename:const size_t	file:
maxIPMISensors	include/dbus-sdr/sdrutils.hpp	/^static constexpr uint16_t maxIPMISensors = (maxSensorsPerLUN * 3);$/;"	v	typeref:typename:uint16_t
maxIPMIWriteReadSize	apphandler.cpp	/^static constexpr uint8_t maxIPMIWriteReadSize = 255;$/;"	v	typeref:typename:uint8_t	file:
maxInstances	dcmihandler.hpp	/^static constexpr auto maxInstances = 255;$/;"	v	namespace:dcmi	typeref:typename:auto
maxInt10	include/dbus-sdr/sensorutils.hpp	/^static constexpr int16_t maxInt10 = 0x1FF;$/;"	v	namespace:ipmi	typeref:typename:int16_t
maxInt4	include/dbus-sdr/sensorutils.hpp	/^static constexpr int8_t maxInt4 = 7;$/;"	v	namespace:ipmi	typeref:typename:int8_t
maxIpmi15PasswordSize	user_channel/user_layer.hpp	/^static constexpr uint8_t maxIpmi15PasswordSize = 16;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
maxIpmi20PasswordSize	user_channel/user_layer.hpp	/^static constexpr uint8_t maxIpmi20PasswordSize = 20;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
maxIpmiChannels	user_channel/channel_layer.hpp	/^static constexpr uint8_t maxIpmiChannels = 16;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
maxKeySize	user_channel/passwd_mgr.cpp	/^static const size_t maxKeySize = 8;$/;"	v	namespace:ipmi	typeref:typename:const size_t	file:
maxLegacyBufferSize	include/ipmid/handler.hpp	/^static constexpr size_t maxLegacyBufferSize = 64 * 1024;$/;"	v	namespace:ipmi	typeref:typename:size_t
maxMessageSize	dbus-sdr/storagecommands.cpp	/^constexpr static const size_t maxMessageSize = 64;$/;"	v	namespace:ipmi::storage	typeref:typename:const size_t	file:
maxMfgDateValue	ipmi_fru_info_area.cpp	/^static constexpr auto maxMfgDateValue = 0xFFFFFF; \/\/ 3 Byte length$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
maxNetworkInstanceSupported	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t maxNetworkInstanceSupported = 4;$/;"	v	namespace:session	typeref:typename:uint8_t
maxRecordAttributeValue	ipmi_fru_info_area.cpp	/^static constexpr auto maxRecordAttributeValue = 0x3F;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
maxRecords	dcmihandler.hpp	/^static constexpr auto maxRecords = 8;$/;"	v	namespace:dcmi::sensor_info	typeref:typename:auto
maxSDRTotalSize	dbus-sdr/sensorcommands.cpp	/^constexpr size_t maxSDRTotalSize =$/;"	v	namespace:ipmi	typeref:typename:size_t
maxSensorsPerLUN	include/dbus-sdr/sdrutils.hpp	/^static constexpr uint16_t maxSensorsPerLUN = 255;$/;"	v	typeref:typename:uint16_t
maxSessionCountPerChannel	include/ipmid/sessiondef.hpp	/^static constexpr size_t maxSessionCountPerChannel = 15;$/;"	v	namespace:session	typeref:typename:size_t
maxSessionlessCount	include/ipmid/sessiondef.hpp	/^static constexpr size_t maxSessionlessCount = 1;$/;"	v	namespace:session	typeref:typename:size_t
maxStrLen	transporthandler.hpp	/^    static constexpr size_t maxStrLen = INET6_ADDRSTRLEN;$/;"	m	struct:ipmi::transport::AddrFamily	typeref:typename:size_t
maxTemp	dcmihandler.hpp	/^static constexpr auto maxTemp = 127; \/\/ degrees C$/;"	v	namespace:dcmi::temp_readings	typeref:typename:auto
maxTransferSize	user_channel/channel_mgmt.hpp	/^    size_t maxTransferSize;$/;"	m	struct:ipmi::ChannelProperties	typeref:typename:size_t
maxTransferSizeString	user_channel/channel_mgmt.cpp	/^static constexpr const char* maxTransferSizeString = "max_transfer_size";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
maxValue	include/dbus-sdr/sdrutils.hpp	/^    double maxValue = 0.0;$/;"	m	class:details::IPMIStatsEntry	typeref:typename:double
maximumPower	dcmihandler.hpp	/^    uint16_t maximumPower;     \/\/!< Maximum power over sampling duration$/;"	m	struct:dcmi::GetPowerReadingResponse	typeref:typename:uint16_t
maybeGetChannelParams	transporthandler.cpp	/^std::optional<ChannelParams> maybeGetChannelParams(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi::transport	typeref:typename:std::optional<ChannelParams>
maybeStringToAddr	transporthandler.hpp	/^    maybeStringToAddr(const char* address)$/;"	f	namespace:ipmi::transport	typeref:typename:std::optional<typename AddrFamily<family>::addr>
md2	user_channel/channel_layer.hpp	/^    md2 = (1 << 0x1),$/;"	e	enum:ipmi::EAuthType
md5	user_channel/channel_layer.hpp	/^    md5 = (1 << 0x2),$/;"	e	enum:ipmi::EAuthType
mediumType	user_channel/channel_layer.hpp	/^    uint8_t mediumType;$/;"	m	struct:ipmi::ChannelInfo	typeref:typename:uint8_t
mediumTypeMap	user_channel/channel_mgmt.cpp	/^static std::unordered_map<std::string, EChannelMediumType> mediumTypeMap = {$/;"	v	namespace:ipmi	typeref:typename:std::unordered_map<std::string,EChannelMediumType>	file:
mediumTypeString	user_channel/channel_mgmt.cpp	/^static constexpr const char* mediumTypeString = "medium_type";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
member	ipmisensor.cpp	/^    char member[16];$/;"	m	struct:lookup_t	typeref:typename:char[16]	file:
message	include/ipmid/message.hpp	/^namespace message$/;"	n	namespace:ipmi
message	include/ipmid/message/pack.hpp	/^namespace message$/;"	n	namespace:ipmi
message	include/ipmid/message/unpack.hpp	/^namespace message$/;"	n	namespace:ipmi
message	include/ipmid/utility.hpp	/^namespace message$/;"	n	namespace:ipmi
message_unittest_CPPFLAGS	test/Makefile.am	/^message_unittest_CPPFLAGS = \\$/;"	m
message_unittest_CXXFLAGS	test/Makefile.am	/^message_unittest_CXXFLAGS = \\$/;"	m
message_unittest_LDFLAGS	test/Makefile.am	/^message_unittest_LDFLAGS = \\$/;"	m
message_unittest_SOURCES	test/Makefile.am	/^message_unittest_SOURCES = \\$/;"	m
metadata	storageaddsel.cpp	/^    using metadata = org::open_power::Host::MaintenanceProcedure;$/;"	t	function:createProcedureLogEntry	typeref:typename:org::open_power::Host::MaintenanceProcedure	file:
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<>;$/;"	t	struct:phosphor::logging::org::open_power::Host::Checkstop	typeref:typename:std::tuple<>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<>;$/;"	t	struct:phosphor::logging::org::open_power::Host::WatchdogTimedOut	typeref:typename:std::tuple<>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::InternalFailure	typeref:typename:std::tuple<>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Control::Host::CommandNotSupported	typeref:typename:std::tuple<>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::Disabled	typeref:typename:std::tuple<>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<ARGUMENT_NAME, ARGUMENT_VALUE>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::InvalidArgument	typeref:typename:std::tuple<ARGUMENT_NAME,ARGUMENT_VALUE>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<BAR_DATA, FOO_DATA, ERRNUM, FILE_PATH,$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:std::tuple<BAR_DATA,FOO_DATA,ERRNUM,FILE_PATH,FILE_NAME,DEV_ADDR,DEV_ID,DEV_NAME>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<CALLOUT_ERRNO, CALLOUT_DEVICE_PATH>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::Device	typeref:typename:std::tuple<CALLOUT_ERRNO,CALLOUT_DEVICE_PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<CALLOUT_ERRNO, CALLOUT_DEVICE_PATH>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Control::Device::WriteFailure	typeref:typename:std::tuple<CALLOUT_ERRNO,CALLOUT_DEVICE_PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<CALLOUT_ERRNO, CALLOUT_DEVICE_PATH>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Sensor::Device::ReadFailure	typeref:typename:std::tuple<CALLOUT_ERRNO,CALLOUT_DEVICE_PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<CALLOUT_IIC_BUS, CALLOUT_IIC_ADDR,$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::IIC	typeref:typename:std::tuple<CALLOUT_IIC_BUS,CALLOUT_IIC_ADDR,CALLOUT_ERRNO,CALLOUT_DEVICE_PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<CALLOUT_INVENTORY_PATH>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::Inventory	typeref:typename:std::tuple<CALLOUT_INVENTORY_PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<CALLOUT_IPMI_SENSOR_NUM>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::IPMISensor	typeref:typename:std::tuple<CALLOUT_IPMI_SENSOR_NUM>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<DEV_ADDR, DEV_ID, DEV_NAME>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:std::tuple<DEV_ADDR,DEV_ID,DEV_NAME>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<ERRNO, PATH>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Open	typeref:typename:std::tuple<ERRNO,PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<ERRNO, PATH>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Write	typeref:typename:std::tuple<ERRNO,PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<ESEL, CALLOUT_INVENTORY_PATH>;$/;"	t	struct:phosphor::logging::org::open_power::Host::Event	typeref:typename:std::tuple<ESEL,CALLOUT_INVENTORY_PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<ESEL, PROCEDURE>;$/;"	t	struct:phosphor::logging::org::open_power::Host::MaintenanceProcedure	typeref:typename:std::tuple<ESEL,PROCEDURE>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<FOO_DATA, ERRNUM, FILE_PATH, FILE_NAME,$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:std::tuple<FOO_DATA,ERRNUM,FILE_PATH,FILE_NAME,DEV_ADDR,DEV_ID,DEV_NAME>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<OFFSET, WHENCE, ERRNO, PATH>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::Seek	typeref:typename:std::tuple<OFFSET,WHENCE,ERRNO,PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<PROCEDURE>;$/;"	t	struct:phosphor::logging::org::open_power::Common::Callout::Procedure	typeref:typename:std::tuple<PROCEDURE>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<REASON>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::QuotaExceeded	typeref:typename:std::tuple<REASON>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<STRING>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::AutoTestSimple	typeref:typename:std::tuple<STRING>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<TIMEOUT_IN_MSEC>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Timeout	typeref:typename:std::tuple<TIMEOUT_IN_MSEC>
metadata_types	elog-errors.hpp	/^    using metadata_types = std::tuple<TIMEOUT_IN_MSEC>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::State::Host::SoftOffTimeout	typeref:typename:std::tuple<TIMEOUT_IN_MSEC>
metadata_types	elog-errors.hpp	/^    using metadata_types =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::Callout	typeref:typename:std::tuple<CALLOUT_ERRNO_TEST,CALLOUT_DEVICE_PATH_TEST>
metadata_types	elog-errors.hpp	/^    using metadata_types =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:std::tuple<DEV_ADDR,CALLOUT_ERRNO_TEST,CALLOUT_DEVICE_PATH_TEST>
metadata_types	elog-errors.hpp	/^    using metadata_types =$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:std::tuple<ERRNUM,FILE_PATH,FILE_NAME,DEV_ADDR,DEV_ID,DEV_NAME>
metadata_types	elog-errors.hpp	/^    using metadata_types =$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::ReadCFAM	typeref:typename:std::tuple<ADDRESS,CALLOUT_ERRNO,CALLOUT_DEVICE_PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types =$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::WriteCFAM	typeref:typename:std::tuple<ADDRESS,CALLOUT_ERRNO,CALLOUT_DEVICE_PATH>
metadata_types	elog-errors.hpp	/^    using metadata_types =$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::GPIO	typeref:typename:std::tuple<CALLOUT_GPIO_NUM,CALLOUT_ERRNO,CALLOUT_DEVICE_PATH>
method_no_args	include/ipmid/utils.hpp	/^namespace method_no_args$/;"	n	namespace:ipmi
method_no_args	libipmid/utils.cpp	/^namespace method_no_args$/;"	n	namespace:ipmi	file:
minInt10	include/dbus-sdr/sensorutils.hpp	/^static constexpr int16_t minInt10 = -0x200;$/;"	v	namespace:ipmi	typeref:typename:int16_t
minInt4	include/dbus-sdr/sensorutils.hpp	/^static constexpr int8_t minInt4 = -8;$/;"	v	namespace:ipmi	typeref:typename:int8_t
minValue	include/dbus-sdr/sdrutils.hpp	/^    double minValue = 0.0;$/;"	m	class:details::IPMIStatsEntry	typeref:typename:double
minimumPower	dcmihandler.hpp	/^    uint16_t minimumPower;     \/\/!< Minimum power over sampling duration$/;"	m	struct:dcmi::GetPowerReadingResponse	typeref:typename:uint16_t
minor	apphandler.cpp	/^    char minor;$/;"	m	struct:__anon1df7a8b50408	typeref:typename:char	file:
minor	dcmihandler.hpp	/^    uint8_t minor;         \/\/!< DCMI Spec Conformance - minor ver = 05h.$/;"	m	struct:dcmi::GetConfParamsResponse	typeref:typename:uint8_t
minor	dcmihandler.hpp	/^    uint8_t minor;         \/\/!< DCMI Specification Conformance - minor ver$/;"	m	struct:dcmi::GetDCMICapResponse	typeref:typename:uint8_t
minutesPerCount	chassishandler.cpp	/^constexpr auto minutesPerCount = 60;$/;"	v	namespace:poh	typeref:typename:auto
modalLSB	include/dbus-sdr/storagecommands.hpp	/^    modalLSB = 0x20,$/;"	e	enum:SdrRepositoryInfoOps
modalMSB	include/dbus-sdr/storagecommands.hpp	/^    modalMSB = 0x40,$/;"	e	enum:SdrRepositoryInfoOps
mode	dcmihandler.hpp	/^    uint8_t mode;          \/\/!< Mode$/;"	m	struct:dcmi::GetPowerReadingRequest	typeref:typename:uint8_t
modeAttribute	dcmihandler.hpp	/^    uint8_t modeAttribute; \/\/!< Mode Attributes$/;"	m	struct:dcmi::GetPowerReadingRequest	typeref:typename:uint8_t
modeChangeMatch	whitelist-filter.cpp	/^    std::unique_ptr<sdbusplus::bus::match::match> modeChangeMatch;$/;"	m	class:ipmi::__anonc26dafe60110::WhitelistFilter	typeref:typename:std::unique_ptr<sdbusplus::bus::match::match>	file:
modeDbusToIpmi	chassishandler.cpp	/^std::map<Mode::Modes, IpmiValue> modeDbusToIpmi = {$/;"	v	namespace:boot_options	typeref:typename:std::map<Mode::Modes,IpmiValue>
modeIpmiToDbus	chassishandler.cpp	/^std::map<IpmiValue, Mode::Modes> modeIpmiToDbus = {$/;"	v	namespace:boot_options	typeref:typename:std::map<IpmiValue,Mode::Modes>
modeMask	user_channel/passwd_mgr.cpp	/^constexpr mode_t modeMask =$/;"	v	namespace:ipmi	typeref:typename:mode_t
modelNumber	ipmi_fru_info_area.cpp	/^static constexpr auto modelNumber = "Model Number";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
msgBadOen	test/oemrouter_unittest.cpp	/^uint8_t msgBadOen[] = {0x57, 0x34, 0x12};$/;"	v	namespace:oem::__anonba15ac260110	typeref:typename:uint8_t[]
msgPlain	test/oemrouter_unittest.cpp	/^uint8_t msgPlain[] = {0x56, 0x34, 0x12};$/;"	v	namespace:oem::__anonba15ac260110	typeref:typename:uint8_t[]
msgPlus2	test/oemrouter_unittest.cpp	/^uint8_t msgPlus2[] = {0x67, 0x45, 0x23, 0x10, 0x20};$/;"	v	namespace:oem::__anonba15ac260110	typeref:typename:uint8_t[]
multi	user_channel/channel_layer.hpp	/^    multi = 2,$/;"	e	enum:ipmi::EChannelSessSupported
multiIntfaceSessionHandleMask	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t multiIntfaceSessionHandleMask = 0x3F;$/;"	v	namespace:session	typeref:typename:uint8_t
multiIntfaceSessionIDMask	include/ipmid/sessiondef.hpp	/^static constexpr uint32_t multiIntfaceSessionIDMask = 0x3FFFFFFF;$/;"	v	namespace:session	typeref:typename:uint32_t
multiRecordOffset	include/dbus-sdr/storagecommands.hpp	/^    uint8_t multiRecordOffset;$/;"	m	struct:FRUHeader	typeref:typename:uint8_t
mutability	include/ipmid/types.hpp	/^    Mutability mutability;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:Mutability
mutableRouter	ipmid-new.cpp	/^Router* mutableRouter()$/;"	f	namespace:oem	typeref:typename:Router *
mutexCleanupLock	user_channel/channel_mgmt.hpp	/^    boost::interprocess::file_lock mutexCleanupLock;$/;"	m	class:ipmi::ChannelConfig	typeref:typename:boost::interprocess::file_lock
mutexCleanupLock	user_channel/user_mgmt.hpp	/^    boost::interprocess::file_lock mutexCleanupLock;$/;"	m	class:ipmi::UserAccess	typeref:typename:boost::interprocess::file_lock
na	user_channel/channel_layer.hpp	/^    na = 0x00,$/;"	e	enum:ipmi::EChannelProtocolType
name	dcmihandler.hpp	/^    std::string name;     \/\/!< Name of DCMI capability.$/;"	m	struct:dcmi::DCMICap	typeref:typename:std::string
name	elog-errors.hpp	/^    const char* name() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:const char *
name	elog-errors.hpp	/^    const char* name() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::Callout	typeref:typename:const char *
name	elog-errors.hpp	/^    const char* name() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::AutoTestSimple	typeref:typename:const char *
name	elog-errors.hpp	/^    const char* name() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:const char *
name	elog-errors.hpp	/^    const char* name() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:const char *
name	elog-errors.hpp	/^    const char* name() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:const char *
name	elog-errors.hpp	/^    const char* name() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:const char *
name	include/dbus-sdr/storagecommands.hpp	/^    char name[16];$/;"	m	struct:Type12Record	typeref:typename:char[16]
name	ipmid-new.cpp	/^    std::string name;$/;"	m	struct:ipmi::IpmiProvider	typeref:typename:std::string	file:
name	user_channel/file.hpp	/^    const std::string& name;$/;"	m	class:phosphor::user::File	typeref:typename:const std::string &
nameChangeHandler	ipmid-new.cpp	/^void nameChangeHandler(sdbusplus::message::message& message)$/;"	f	namespace:ipmi::__anone60fcc800110	typeref:typename:void
nameLeaf	sensordatahandler.hpp	/^inline SensorName nameLeaf(const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::get	typeref:typename:SensorName
nameParentLeaf	sensordatahandler.cpp	/^SensorName nameParentLeaf(const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::get	typeref:typename:SensorName
nameProperty	sensordatahandler.hpp	/^inline SensorName nameProperty(const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::get	typeref:typename:SensorName
nameString	user_channel/channel_mgmt.cpp	/^static constexpr const char* nameString = "name";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
negative_threshold_hysteresis	sensorhandler.hpp	/^    uint8_t negative_threshold_hysteresis;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
netConfInitialBytes	chassishandler.cpp	/^static constexpr uint8_t netConfInitialBytes[] = {0x80, 0x21, 0x70, 0x62,$/;"	v	typeref:typename:uint8_t[]	file:
netFn	include/ipmid/message.hpp	/^    NetFn netFn;$/;"	m	struct:ipmi::Context	typeref:typename:NetFn
netFnApp	include/ipmid/api-types.hpp	/^constexpr NetFn netFnApp = 0x06;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnBridge	include/ipmid/api-types.hpp	/^constexpr NetFn netFnBridge = 0x02;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnChassis	include/ipmid/api-types.hpp	/^constexpr NetFn netFnChassis = 0x00;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnFirmware	include/ipmid/api-types.hpp	/^constexpr NetFn netFnFirmware = 0x08;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnGroup	include/ipmid/api-types.hpp	/^constexpr NetFn netFnGroup = 0x2C;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnOem	include/ipmid/api-types.hpp	/^constexpr NetFn netFnOem = 0x2E;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnOemEight	include/ipmid/api-types.hpp	/^constexpr NetFn netFnOemEight = 0x3E;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnOemFive	include/ipmid/api-types.hpp	/^constexpr NetFn netFnOemFive = 0x38;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnOemFour	include/ipmid/api-types.hpp	/^constexpr NetFn netFnOemFour = 0x36;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnOemOne	include/ipmid/api-types.hpp	/^constexpr NetFn netFnOemOne = 0x30;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnOemSeven	include/ipmid/api-types.hpp	/^constexpr NetFn netFnOemSeven = 0x3C;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnOemSix	include/ipmid/api-types.hpp	/^constexpr NetFn netFnOemSix = 0x3A;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnOemThree	include/ipmid/api-types.hpp	/^constexpr NetFn netFnOemThree = 0x34;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnOemTwo	include/ipmid/api-types.hpp	/^constexpr NetFn netFnOemTwo = 0x32;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnSensor	include/ipmid/api-types.hpp	/^constexpr NetFn netFnSensor = 0x04;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnStorage	include/ipmid/api-types.hpp	/^constexpr NetFn netFnStorage = 0x0A;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netFnTransport	include/ipmid/api-types.hpp	/^constexpr NetFn netFnTransport = 0x0C;$/;"	v	namespace:ipmi	typeref:typename:NetFn
netfncmd_pair	ipmiwhitelist.hpp	/^using netfncmd_pair = std::pair<unsigned char, unsigned char>;$/;"	t	typeref:typename:std::pair<unsigned char,unsigned char>
netfun	systemintfcmds.hpp	/^    uint8_t netfun;$/;"	m	struct:oem_sel_timestamped	typeref:typename:uint8_t
netmaskToPrefix	transporthandler.cpp	/^uint8_t netmaskToPrefix(in_addr netmask)$/;"	f	namespace:ipmi::transport	typeref:typename:uint8_t
network	include/ipmid/types.hpp	/^namespace network$/;"	n	namespace:ipmi
network	libipmid/utils.cpp	/^namespace network$/;"	n	namespace:ipmi	file:
networkChConfigIntfName	user_channel/channel_mgmt.cpp	/^static constexpr const char* networkChConfigIntfName =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
networkConfigIntf	dcmihandler.hpp	/^static constexpr auto networkConfigIntf =$/;"	v	namespace:dcmi	typeref:typename:auto
networkConfigObj	dcmihandler.hpp	/^static constexpr auto networkConfigObj = "\/xyz\/openbmc_project\/network\/config";$/;"	v	namespace:dcmi	typeref:typename:auto
networkIntfObjectBasePath	user_channel/channel_mgmt.cpp	/^static constexpr const char* networkIntfObjectBasePath =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
networkIntfServiceName	user_channel/channel_mgmt.cpp	/^static constexpr const char* networkIntfServiceName =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
networkRoot	dcmihandler.hpp	/^static constexpr auto networkRoot = "\/xyz\/openbmc_project\/network";$/;"	v	namespace:dcmi	typeref:typename:auto
networkServiceName	dcmihandler.hpp	/^static constexpr auto networkServiceName = "xyz.openbmc_project.Network";$/;"	v	namespace:dcmi	typeref:typename:auto
newMethodCall	libipmid/utils.cpp	/^    ServiceCache::newMethodCall(sdbusplus::bus::bus& bus, const char* intf,$/;"	f	class:ipmi::ServiceCache	typeref:typename:sdbusplus::message::message
nextRecordID	selutility.hpp	/^    uint16_t nextRecordID;      \/\/!< Next RecordID.$/;"	m	struct:ipmi::sel::GetSELEntryResponse	typeref:typename:uint16_t
next_record_id_lsb	sensorhandler.hpp	/^    uint8_t next_record_id_lsb;$/;"	m	struct:get_sdr::GetSdrResp	typeref:typename:uint8_t
next_record_id_msb	sensorhandler.hpp	/^    uint8_t next_record_id_msb;$/;"	m	struct:get_sdr::GetSdrResp	typeref:typename:uint8_t
noChange	apphandler.cpp	/^    noChange = 0x7f,$/;"	e	enum:acpi_state::PowerState	file:
noChange	chassishandler.cpp	/^static constexpr uint8_t noChange = 0x03;$/;"	v	namespace:power_policy	typeref:typename:uint8_t	file:
noTimestamp	dbus-sdr/sensorcommands.cpp	/^constexpr static const uint32_t noTimestamp = 0xFFFFFFFF;$/;"	v	namespace:ipmi	typeref:typename:const uint32_t	file:
nobase_include_HEADERS	Makefile.am	/^nobase_include_HEADERS = \\$/;"	m
nobase_include_HEADERS	include/Makefile.am	/^nobase_include_HEADERS = \\$/;"	m
nodist_include_HEADERS	softoff/Makefile.am	/^nodist_include_HEADERS = xyz\/openbmc_project\/Ipmi\/Internal\/SoftPowerOff\/server.hpp$/;"	m
nodist_libwhitelist_la_SOURCES	Makefile.am	/^nodist_libwhitelist_la_SOURCES = ipmiwhitelist.cpp$/;"	m
nominal_reading	sensorhandler.hpp	/^    uint8_t nominal_reading;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
nonCriticalThreshold	include/dbus-sdr/sensorcommands.hpp	/^    nonCriticalThreshold = (1 << 4),$/;"	e	enum:IPMISensorEventEnableThresholds
nonRecoverableThreshold	include/dbus-sdr/sensorcommands.hpp	/^    nonRecoverableThreshold = (1 << 6),$/;"	e	enum:IPMISensorEventEnableThresholds
none	user_channel/channel_layer.hpp	/^    none = (1 << 0x0),$/;"	e	enum:ipmi::EAuthType
none	user_channel/channel_layer.hpp	/^    none = 0,$/;"	e	enum:ipmi::EChannelSessSupported
normal_max	sensorhandler.hpp	/^    uint8_t normal_max;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
normal_min	sensorhandler.hpp	/^    uint8_t normal_min;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
normalizeIntExp	dbus-sdr/sensorutils.cpp	/^static void normalizeIntExp(int16_t& ibase, int8_t& expShift, double& dbase)$/;"	f	namespace:ipmi	typeref:typename:void	file:
notify	sensordatahandler.cpp	/^namespace notify$/;"	n	namespace:ipmi::sensor	file:
notify	sensordatahandler.hpp	/^namespace notify$/;"	n	namespace:ipmi::sensor
nrFixedBits	include/ipmid/message/types.hpp	/^constexpr auto nrFixedBits =$/;"	v	namespace:types	typeref:typename:auto
numDataSets	dcmihandler.hpp	/^    uint8_t numDataSets;  \/\/!< No. of sets of temperature data$/;"	m	struct:dcmi::GetTempReadingsResponseHdr	typeref:typename:uint8_t
numInstances	dcmihandler.hpp	/^    uint8_t numInstances; \/\/!< No. of instances for requested id$/;"	m	struct:dcmi::GetSensorInfoResponseHdr	typeref:typename:uint8_t
numInstances	dcmihandler.hpp	/^    uint8_t numInstances; \/\/!< No. of instances for requested id$/;"	m	struct:dcmi::GetTempReadingsResponseHdr	typeref:typename:uint8_t
numMissings	include/dbus-sdr/sdrutils.hpp	/^    int numMissings = 0;$/;"	m	class:details::IPMIStatsEntry	typeref:typename:int
numReadings	include/dbus-sdr/sdrutils.hpp	/^    int numReadings = 0;$/;"	m	class:details::IPMIStatsEntry	typeref:typename:int
numRecords	dcmihandler.hpp	/^    uint8_t numRecords;   \/\/!< No. of record ids in the response$/;"	m	struct:dcmi::GetSensorInfoResponseHdr	typeref:typename:uint8_t
numStreakMiss	include/dbus-sdr/sdrutils.hpp	/^    int numStreakMiss = 0;$/;"	m	class:details::IPMIStatsEntry	typeref:typename:int
numStreakRead	include/dbus-sdr/sdrutils.hpp	/^    int numStreakRead = 0;$/;"	m	class:details::IPMIStatsEntry	typeref:typename:int
number	include/ipmid/types.hpp	/^    uint8_t number;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
number	sensorhandler.cpp	/^    uint8_t number;$/;"	m	struct:sensorTypemap_t	typeref:typename:uint8_t	file:
nvData	user_channel/channel_layer.hpp	/^    nvData = 0x01,$/;"	e	enum:ipmi::__anone8937c160103
nvFileLastUpdatedTime	user_channel/channel_mgmt.hpp	/^    std::time_t nvFileLastUpdatedTime;$/;"	m	class:ipmi::ChannelConfig	typeref:typename:std::time_t
objManager	systemintfcmds.cpp	/^std::unique_ptr<sdbusplus::server::manager::manager> objManager$/;"	v	namespace:__anon1526fb130110	typeref:typename:std::unique_ptr<sdbusplus::server::manager::manager>
objMapperInterface	user_channel/user_mgmt.cpp	/^static constexpr const char* objMapperInterface =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
objMapperPath	user_channel/user_mgmt.cpp	/^static constexpr const char* objMapperPath =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
objMapperService	user_channel/user_mgmt.cpp	/^static constexpr const char* objMapperService =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
objects	whitelist-filter.cpp	/^    std::unique_ptr<settings::Objects> objects;$/;"	m	class:ipmi::__anonc26dafe60110::WhitelistFilter	typeref:typename:std::unique_ptr<settings::Objects>	file:
objectsPtr	chassishandler.cpp	/^std::unique_ptr<settings::Objects> objectsPtr = nullptr;$/;"	v	namespace:chassis::internal::cache	typeref:typename:std::unique_ptr<settings::Objects>
objs	transporthandler.hpp	/^    const ObjectTree objs;$/;"	m	class:ipmi::transport::ObjectLookupCache	typeref:typename:const ObjectTree
obmcOemNumber	include/ipmid/iana.hpp	/^constexpr Number obmcOemNumber = 49871;$/;"	v	namespace:oem	typeref:typename:Number
oe-sdk	configure.ac	/^AC_ARG_ENABLE([oe-sdk],$/;"	e
oem	app/channel.hpp	/^static constexpr auto oem = "oemiana";$/;"	v	namespace:cipher	typeref:typename:auto
oem	include/dbus-sdr/storagecommands.hpp	/^    uint8_t oem;$/;"	m	struct:Type12Record	typeref:typename:uint8_t
oem	include/ipmid/iana.hpp	/^namespace oem$/;"	n
oem	include/ipmid/oemopenbmc.hpp	/^namespace oem$/;"	n
oem	include/ipmid/oemrouter.hpp	/^namespace oem$/;"	n
oem	ipmid-new.cpp	/^namespace oem$/;"	n	file:
oem	sensorhandler.hpp	/^    uint8_t oem;$/;"	m	struct:get_sdr::SensorDataFruRecordBody	typeref:typename:uint8_t
oem	test/oemrouter_unittest.cpp	/^namespace oem$/;"	n	file:
oem	user_channel/channel_layer.hpp	/^    oem = (1 << 0x5),$/;"	e	enum:ipmi::EAuthType
oem	user_channel/channel_layer.hpp	/^    oem = 0x1C,$/;"	e	enum:ipmi::EChannelProtocolType
oem	user_channel/channel_layer.hpp	/^    oem = 0x60,$/;"	e	enum:ipmi::EChannelMediumType
oemCD	selutility.hpp	/^    SELOEMRecordTypeCD oemCD;$/;"	m	union:ipmi::sel::SELEventRecordFormat	typeref:typename:SELOEMRecordTypeCD
oemCDDataSize	selutility.cpp	/^constexpr auto oemCDDataSize = 9;$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
oemCipherSuite	app/channel.hpp	/^static constexpr auto oemCipherSuite = 0xC1;$/;"	v	namespace:cipher	typeref:typename:auto
oemCmdEnd	apphandler.cpp	/^static constexpr uint8_t oemCmdEnd = 255;$/;"	v	typeref:typename:uint8_t	file:
oemCmdEnd	transporthandler.cpp	/^static constexpr uint8_t oemCmdEnd = 255;$/;"	v	namespace:ipmi::transport	typeref:typename:uint8_t	file:
oemCmdStart	apphandler.cpp	/^static constexpr uint8_t oemCmdStart = 192;$/;"	v	typeref:typename:uint8_t	file:
oemCmdStart	transporthandler.cpp	/^static constexpr uint8_t oemCmdStart = 192;$/;"	v	namespace:ipmi::transport	typeref:typename:uint8_t	file:
oemDefined	selutility.hpp	/^    uint8_t oemDefined[13]; \/\/!< OEM Defined data.$/;"	m	struct:ipmi::sel::SELOEMRecordTypeEF	typeref:typename:uint8_t[13]
oemDefined	selutility.hpp	/^    uint8_t oemDefined[6];     \/\/!< OEM Defined data.$/;"	m	struct:ipmi::sel::SELOEMRecordTypeCD	typeref:typename:uint8_t[6]
oemEF	selutility.hpp	/^    SELOEMRecordTypeEF oemEF;$/;"	m	union:ipmi::sel::SELEventRecordFormat	typeref:typename:SELOEMRecordTypeEF
oemEFDataSize	selutility.cpp	/^constexpr auto oemEFDataSize = 13;$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
oemEventFirst	include/dbus-sdr/storagecommands.hpp	/^static constexpr uint8_t oemEventFirst = 0xE0;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:uint8_t
oemEventLast	include/dbus-sdr/storagecommands.hpp	/^static constexpr uint8_t oemEventLast = 0xFF;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:uint8_t
oemEventSize	include/dbus-sdr/storagecommands.hpp	/^static constexpr size_t oemEventSize = 13;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:size_t
oemEventType	dbus-sdr/storagecommands.cpp	/^using oemEventType =$/;"	t	namespace:ipmi::storage	typeref:typename:std::array<uint8_t,dynamic_sensors::ipmi::sel::oemEventSize>	file:
oemHandlerMap	ipmid-new.cpp	/^    oemHandlerMap;$/;"	v	namespace:ipmi	typeref:typename:std::unordered_map<unsigned int,HandlerTuple>	file:
oemParmEnd	chassishandler.cpp	/^static constexpr uint8_t oemParmEnd = 127;$/;"	v	typeref:typename:uint8_t	file:
oemParmStart	chassishandler.cpp	/^static constexpr uint8_t oemParmStart = 96;$/;"	v	typeref:typename:uint8_t	file:
oemPayloadEnables1	user_channel/user_layer.hpp	/^    std::bitset<payloadsPerByte> oemPayloadEnables1;$/;"	m	struct:ipmi::PayloadAccess	typeref:typename:std::bitset<payloadsPerByte>
oemPayloadEnables2Reserved	user_channel/user_layer.hpp	/^    std::bitset<payloadsPerByte> oemPayloadEnables2Reserved;$/;"	m	struct:ipmi::PayloadAccess	typeref:typename:std::bitset<payloadsPerByte>
oemPayloadStr	user_channel/user_mgmt.cpp	/^static constexpr const char* oemPayloadStr = "OEM_payload";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
oemTsEventFirst	include/dbus-sdr/storagecommands.hpp	/^static constexpr uint8_t oemTsEventFirst = 0xC0;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:uint8_t
oemTsEventLast	include/dbus-sdr/storagecommands.hpp	/^static constexpr uint8_t oemTsEventLast = 0xDF;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:uint8_t
oemTsEventSize	include/dbus-sdr/storagecommands.hpp	/^static constexpr size_t oemTsEventSize = 9;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:size_t
oemTsEventType	dbus-sdr/storagecommands.cpp	/^using oemTsEventType = std::tuple<$/;"	t	namespace:ipmi::storage	typeref:typename:std::tuple<uint32_t,std::array<uint8_t,dynamic_sensors::ipmi::sel::oemTsEventSize>>	file:
oem_reserved	sensorhandler.hpp	/^    uint8_t oem_reserved;$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:uint8_t
oem_reserved	sensorhandler.hpp	/^    uint8_t oem_reserved;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
oem_sel_timestamped	systemintfcmds.hpp	/^struct oem_sel_timestamped$/;"	s
off	chassishandler.hpp	/^    off = 0x0,$/;"	e	enum:ChassisIDState
offset	dcmihandler.hpp	/^    uint8_t offset; \/\/!< Last Offset Written.$/;"	m	struct:dcmi::SetMgmntCtrlIdStrResponse	typeref:typename:uint8_t
offset	dcmihandler.hpp	/^    uint8_t offset; \/\/!< Offset to read.$/;"	m	struct:dcmi::GetAssetTagRequest	typeref:typename:uint8_t
offset	dcmihandler.hpp	/^    uint8_t offset; \/\/!< Offset to read.$/;"	m	struct:dcmi::GetMgmntCtrlIdStrRequest	typeref:typename:uint8_t
offset	dcmihandler.hpp	/^    uint8_t offset; \/\/!< Offset to write.$/;"	m	struct:dcmi::SetAssetTagRequest	typeref:typename:uint8_t
offset	dcmihandler.hpp	/^    uint8_t offset; \/\/!< Offset to write.$/;"	m	struct:dcmi::SetMgmntCtrlIdStrRequest	typeref:typename:uint8_t
offset	ipmisensor.cpp	/^    uint8_t offset;$/;"	m	struct:lookup_t	typeref:typename:uint8_t	file:
offset	selutility.hpp	/^    uint8_t offset;         \/\/!< Offset into record.$/;"	m	struct:ipmi::sel::GetSELEntryRequest	typeref:typename:uint8_t
offset	sensorhandler.hpp	/^    uint8_t offset;$/;"	m	struct:get_sdr::GetSdrReq	typeref:typename:uint8_t
op	include/ipmid/message/pack.hpp	/^    static int op(Payload& p, const Payload& t)$/;"	f	struct:ipmi::message::details::PackSingle	typeref:typename:int
op	include/ipmid/message/pack.hpp	/^    static int op(Payload& p, const T& t)$/;"	f	struct:ipmi::message::details::PackSingle	typeref:typename:int
op	include/ipmid/message/pack.hpp	/^    static int op(Payload& p, const bool& b)$/;"	f	struct:ipmi::message::details::PackSingle	typeref:typename:int
op	include/ipmid/message/pack.hpp	/^    static int op(Payload& p, const std::string& t)$/;"	f	struct:ipmi::message::details::PackSingle	typeref:typename:int
op	include/ipmid/message/pack.hpp	/^    static int op(Payload& p, const std::string_view& t)$/;"	f	struct:ipmi::message::details::PackSingle	typeref:typename:int
op	include/ipmid/message/unpack.hpp	/^    static int op(Payload& p, Payload& t)$/;"	f	struct:ipmi::message::details::UnpackSingle	typeref:typename:int
op	include/ipmid/message/unpack.hpp	/^    static int op(Payload& p, T& t)$/;"	f	struct:ipmi::message::details::UnpackSingle	typeref:typename:int
op	include/ipmid/message/unpack.hpp	/^    static int op(Payload& p, bool& b)$/;"	f	struct:ipmi::message::details::UnpackSingle	typeref:typename:int
op	include/ipmid/message/unpack.hpp	/^    static int op(Payload& p, std::string& t)$/;"	f	struct:ipmi::message::details::UnpackSingle	typeref:typename:int
opalNetworkSettings	chassishandler.hpp	/^    opalNetworkSettings = 0x61$/;"	e	enum:BootOptionParameter
opalNetworkSettings	chassishandler.hpp	/^    opalNetworkSettings = 50$/;"	e	enum:BootOptionResponseSize
open_power	elog-errors.hpp	/^namespace open_power$/;"	n	namespace:phosphor::logging::org
open_power	elog-errors.hpp	/^namespace open_power$/;"	n	namespace:sdbusplus::org
open_power	error-HostEvent.hpp	/^namespace open_power$/;"	n	namespace:sdbusplus::org
openbmc_project	elog-errors.hpp	/^namespace openbmc_project$/;"	n	namespace:phosphor::logging::example::xyz
openbmc_project	elog-errors.hpp	/^namespace openbmc_project$/;"	n	namespace:phosphor::logging::xyz
openbmc_project	elog-errors.hpp	/^namespace openbmc_project$/;"	n	namespace:sdbusplus::xyz
operation	include/ipmid/types.hpp	/^    uint8_t operation;        \/\/!< Sensor scanning status \/ reading state.$/;"	m	struct:ipmi::sensor::GetReadingResponse	typeref:typename:uint8_t
operation	include/ipmid/types.hpp	/^    uint8_t operation;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
operation	ipmisensor.cpp	/^    uint8_t operation;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
operation	user_channel/usercommands.cpp	/^    uint8_t operation : 2;$/;"	m	struct:ipmi::SetUserPasswordReq	typeref:typename:uint8_t:2	file:
operationSupport	selutility.hpp	/^namespace operationSupport$/;"	n	namespace:ipmi::sel
operator &	include/ipmid/types.hpp	/^inline Mutability operator&(Mutability lhs, Mutability rhs)$/;"	f	namespace:ipmi::sensor	typeref:typename:Mutability
operator ()	dbus-sdr/sensorcommands.cpp	/^    bool operator()(const char* a, const char* b) const$/;"	f	struct:ipmi::CmpStr	typeref:typename:bool	file:
operator ()	include/dbus-sdr/sdrutils.hpp	/^    bool operator()(const char* a, const char* b) const$/;"	f	struct:CmpStr	typeref:typename:bool
operator ()	include/dbus-sdr/sdrutils.hpp	/^    bool operator()(std::string a, std::string b) const$/;"	f	struct:CmpStrVersion	typeref:typename:bool
operator ()	include/ipmid/utils.hpp	/^        operator()(const T& t) const$/;"	f	struct:ipmi::VariantToDoubleVisitor	typeref:typename:std::enable_if_t<std::is_arithmetic<T>::value,double>
operator ()	user_channel/file.hpp	/^    auto operator()()$/;"	f	class:phosphor::user::File	typeref:typename:auto
operator *	transporthandler.hpp	/^        value_type& operator*()$/;"	f	class:ipmi::transport::ObjectLookupCache::iterator	typeref:typename:value_type &
operator ->	transporthandler.hpp	/^        value_type* operator->()$/;"	f	class:ipmi::transport::ObjectLookupCache::iterator	typeref:typename:value_type *
operator |	include/ipmid/types.hpp	/^inline Mutability operator|(Mutability lhs, Mutability rhs)$/;"	f	namespace:ipmi::sensor	typeref:typename:Mutability
org	elog-errors.hpp	/^namespace org$/;"	n	namespace:phosphor::logging
org	elog-errors.hpp	/^namespace org$/;"	n	namespace:sdbusplus
org	error-HostEvent.hpp	/^namespace org$/;"	n	namespace:sdbusplus
origin	transporthandler.hpp	/^    sdbusplus::xyz::openbmc_project::Network::server::IP::AddressOrigin origin;$/;"	m	struct:ipmi::transport::IfAddr	typeref:typename:sdbusplus::xyz::openbmc_project::Network::server::IP::AddressOrigin
originToSourceType	transporthandler.cpp	/^IPv6Source originToSourceType(IP::AddressOrigin origin)$/;"	f	namespace:ipmi::transport	typeref:typename:IPv6Source
originsV4	transporthandler.cpp	/^const std::unordered_set<IP::AddressOrigin> originsV4 = {$/;"	v	namespace:ipmi::transport	typeref:typename:const std::unordered_set<IP::AddressOrigin>
originsV6Dynamic	transporthandler.hpp	/^    originsV6Dynamic = {$/;"	v	namespace:ipmi::transport	typeref:typename:const std::unordered_set<sdbusplus::xyz::openbmc_project::Network::server::IP::AddressOrigin>
originsV6Static	transporthandler.hpp	/^    originsV6Static = {sdbusplus::xyz::openbmc_project::Network::server::IP::$/;"	v	namespace:ipmi::transport	typeref:typename:const std::unordered_set<sdbusplus::xyz::openbmc_project::Network::server::IP::AddressOrigin>
other	include/dbus-sdr/sdrutils.hpp	/^    other = 0xB,$/;"	e	enum:SensorTypeCodes
other	user_channel/user_mgmt.hpp	/^        typedef SecureAllocator<_Tp1> other;$/;"	t	struct:ipmi::SecureAllocator::rebind	typeref:typename:SecureAllocator<_Tp1>
otherLan	user_channel/channel_layer.hpp	/^    otherLan = 0x06,$/;"	e	enum:ipmi::EChannelMediumType
overflow	include/dbus-sdr/storagecommands.hpp	/^    overflow = 0x80$/;"	e	enum:SdrRepositoryInfoOps
overflow	selutility.hpp	/^static constexpr bool overflow = false;$/;"	v	namespace:ipmi::sel::operationSupport	typeref:typename:bool
override	apphandler.cpp	/^    override = 0x0a,$/;"	e	enum:acpi_state::PowerState	file:
owner_id	sensorhandler.hpp	/^    uint8_t owner_id;$/;"	m	struct:get_sdr::SensorDataRecordKey	typeref:typename:uint8_t
owner_lun	sensorhandler.hpp	/^    uint8_t owner_lun;$/;"	m	struct:get_sdr::SensorDataRecordKey	typeref:typename:uint8_t
pack	include/ipmid/message.hpp	/^    int pack()$/;"	f	struct:ipmi::message::Payload	typeref:typename:int
pack	include/ipmid/message.hpp	/^    int pack(Arg&& arg, Args&&... args)$/;"	f	struct:ipmi::message::Payload	typeref:typename:int
pack	include/ipmid/message.hpp	/^    int pack(Args&&... args)$/;"	f	struct:ipmi::message::Response	typeref:typename:int
pack	include/ipmid/message.hpp	/^    int pack(std::tuple<Types...>& t)$/;"	f	struct:ipmi::message::Response	typeref:typename:int
pad	include/dbus-sdr/storagecommands.hpp	/^    uint8_t pad;$/;"	m	struct:FRUHeader	typeref:typename:uint8_t
padData	ipmi_fru_info_area.cpp	/^void padData(FruAreaData& data)$/;"	f	namespace:ipmi::fru	typeref:typename:void
padEntries	include/dbus-sdr/sdrutils.hpp	/^    void padEntries(size_t index)$/;"	f	class:details::IPMIStatsTable	typeref:typename:void
padSize	user_channel/passwd_mgr.cpp	/^    size_t padSize;$/;"	m	struct:ipmi::MetaPassStruct	typeref:typename:size_t	file:
pamFunctionConversation	user_channel/user_mgmt.cpp	/^static int pamFunctionConversation(int numMsg, const struct pam_message** msg,$/;"	f	namespace:ipmi	typeref:typename:int	file:
pamUpdatePasswd	user_channel/user_mgmt.cpp	/^int pamUpdatePasswd(const char* username, const char* password)$/;"	f	namespace:ipmi	typeref:typename:int
pamUserCheckAuthenticate	user_channel/user_mgmt.cpp	/^bool pamUserCheckAuthenticate(std::string_view username,$/;"	f	namespace:ipmi	typeref:typename:bool
param	dcmihandler.hpp	/^    uint8_t param; \/\/!< Capability parameter selector.$/;"	m	struct:dcmi::GetDCMICapRequest	typeref:typename:uint8_t
paramRevision	apphandler.cpp	/^static constexpr uint8_t paramRevision = 0x11;$/;"	v	typeref:typename:uint8_t	file:
paramRevision	dcmihandler.hpp	/^    uint8_t paramRevision; \/\/!< Parameter Revision = 01h.$/;"	m	struct:dcmi::GetConfParamsResponse	typeref:typename:uint8_t
paramRevision	dcmihandler.hpp	/^    uint8_t paramRevision; \/\/!< Parameter Revision = 02h$/;"	m	struct:dcmi::GetDCMICapResponse	typeref:typename:uint8_t
paramSelect	dcmihandler.hpp	/^    uint8_t paramSelect; \/\/!< Parameter selector.$/;"	m	struct:dcmi::GetConfParamsRequest	typeref:typename:uint8_t
paramSelect	dcmihandler.hpp	/^    uint8_t paramSelect; \/\/!< Parameter selector.$/;"	m	struct:dcmi::SetConfParamsRequest	typeref:typename:uint8_t
params	sys_info_param.hpp	/^    std::map<uint8_t, std::function<std::string()>> params;$/;"	m	class:SysInfoParamStore	typeref:typename:std::map<uint8_t,std::function<std::string ()>>
params	transporthandler.hpp	/^    const ChannelParams& params;$/;"	m	class:ipmi::transport::ObjectLookupCache	typeref:typename:const ChannelParams &
parseAdditionalData	selutility.cpp	/^additionalDataMap parseAdditionalData(const AdditionalData& data)$/;"	f	namespace:ipmi::sel::internal	typeref:typename:additionalDataMap
parseCloseSessionInputPayload	include/ipmid/sessionhelper.hpp	/^bool parseCloseSessionInputPayload(const std::string& objectPath,$/;"	f	typeref:typename:bool
parseEntry	selutility.cpp	/^std::pair<std::string, std::string> parseEntry(const std::string& entry)$/;"	f	namespace:ipmi::sel::internal	typeref:typename:std::pair<std::string,std::string>
parseJSONConfig	dcmihandler.cpp	/^Json parseJSONConfig(const std::string& configFile)$/;"	f	namespace:dcmi	typeref:typename:Json
parseSdrIdFromPath	dbus-sdr/sensorcommands.cpp	/^std::string parseSdrIdFromPath(const std::string& path)$/;"	f	namespace:ipmi::sensor	typeref:typename:std::string
partNumber	ipmi_fru_info_area.cpp	/^static constexpr auto partNumber = "Part Number";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
partialAddSDRSupported	include/dbus-sdr/storagecommands.hpp	/^    partialAddSDRSupported = 0x4,$/;"	e	enum:SdrRepositoryInfoOps
partialAddSelEntry	selutility.hpp	/^static constexpr bool partialAddSelEntry = false;$/;"	v	namespace:ipmi::sel::operationSupport	typeref:typename:bool
passwdFileName	user_channel/passwd_mgr.cpp	/^static const char* passwdFileName = "\/etc\/ipmi_pass";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
passwdMapList	user_channel/passwd_mgr.hpp	/^    std::unordered_map<UserName, Password> passwdMapList;$/;"	m	class:ipmi::PasswdMgr	typeref:typename:std::unordered_map<UserName,Password>
passwdMgr	user_channel/user_layer.cpp	/^ipmi::PasswdMgr passwdMgr;$/;"	v	namespace:__anonacbaad370110	typeref:typename:ipmi::PasswdMgr
passwordKeySize16	user_channel/usercommands.cpp	/^static constexpr uint8_t passwordKeySize16 = 0;$/;"	v	namespace:ipmi	typeref:typename:uint8_t	file:
passwordKeySize20	user_channel/usercommands.cpp	/^static constexpr uint8_t passwordKeySize20 = 1;$/;"	v	namespace:ipmi	typeref:typename:uint8_t	file:
path	fruread.hpp	/^    FruInstancePath path;$/;"	m	struct:FruInstance	typeref:typename:FruInstancePath
path	include/ipmid/utils.hpp	/^    const std::string path;$/;"	m	class:ipmi::ServiceCache	typeref:typename:const std::string
path	sensorhandler.hpp	/^    char path[MAX_DBUS_PATH];$/;"	m	struct:dbus_interface_t	typeref:typename:char[]
path	transporthandler.hpp	/^    std::string path;$/;"	m	struct:ipmi::transport::IfAddr	typeref:typename:std::string
path	transporthandler.hpp	/^    std::string path;$/;"	m	struct:ipmi::transport::IfNeigh	typeref:typename:std::string
paths	storagehandler.cpp	/^ipmi::sel::ObjectPaths paths;$/;"	v	namespace:cache	typeref:typename:ipmi::sel::ObjectPaths
payload	include/ipmid/message.hpp	/^    Payload payload;$/;"	m	struct:ipmi::message::Request	typeref:typename:Payload
payload	include/ipmid/message.hpp	/^    Payload payload;$/;"	m	struct:ipmi::message::Response	typeref:typename:Payload
payloadAccess	user_channel/user_mgmt.hpp	/^    PayloadAccess payloadAccess[ipmiMaxChannels];$/;"	m	struct:ipmi::UserInfo	typeref:typename:PayloadAccess[]
payloadEnabledStr	user_channel/user_mgmt.cpp	/^static constexpr const char* payloadEnabledStr = "payload_enabled";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
payloadsPerByte	user_channel/user_layer.hpp	/^static constexpr uint8_t payloadsPerByte = 8;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
pciSmbus	user_channel/channel_layer.hpp	/^    pciSmbus = 0x07,$/;"	e	enum:ipmi::EChannelMediumType
perMsgAuthDisabled	user_channel/channel_layer.hpp	/^    bool perMsgAuthDisabled;$/;"	m	struct:ipmi::ChannelAccess	typeref:typename:bool
perMsgAuthDisabledString	user_channel/channel_mgmt.cpp	/^static constexpr const char* perMsgAuthDisabledString = "per_msg_auth_disabled";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
phosphor	elog-errors.hpp	/^namespace phosphor$/;"	n
phosphor	host-cmd-manager.cpp	/^namespace phosphor$/;"	n	file:
phosphor	host-cmd-manager.hpp	/^namespace phosphor$/;"	n
phosphor	host-interface.cpp	/^namespace phosphor$/;"	n	file:
phosphor	host-interface.hpp	/^namespace phosphor$/;"	n
phosphor	include/ipmid-host/cmd-utils.hpp	/^namespace phosphor$/;"	n
phosphor	softoff/softoff.cpp	/^namespace phosphor$/;"	n	file:
phosphor	softoff/softoff.hpp	/^namespace phosphor$/;"	n
phosphor	user_channel/file.hpp	/^namespace phosphor$/;"	n
phosphor	user_channel/shadowlock.hpp	/^namespace phosphor$/;"	n
phosphor-host-ipmid	configure.ac	/^AC_INIT([phosphor-host-ipmid], [1.0], [https:\/\/github.com\/openbmc\/phosphor-host-ipmid\/issue/;"	p
phosphor-softpoweroff	softoff/Makefile.am	/^bin_PROGRAMS = phosphor-softpoweroff$/;"	P	directory:bin
phosphor_softpoweroff_CXXFLAGS	softoff/Makefile.am	/^phosphor_softpoweroff_CXXFLAGS = \\$/;"	m
phosphor_softpoweroff_LDFLAGS	softoff/Makefile.am	/^phosphor_softpoweroff_LDFLAGS = \\$/;"	m
phosphor_softpoweroff_SOURCES	softoff/Makefile.am	/^phosphor_softpoweroff_SOURCES = \\$/;"	m
pkgconfig_DATA	libipmid-host/Makefile.am	/^pkgconfig_DATA = libipmid-host.pc$/;"	m
pkgconfig_DATA	libipmid/Makefile.am	/^pkgconfig_DATA = libipmid.pc$/;"	m
poh	chassishandler.cpp	/^namespace poh$/;"	n	file:
pohCounterProperty	chassishandler.cpp	/^static constexpr auto pohCounterProperty = "POHCounter";$/;"	v	typeref:typename:auto	file:
pointer	user_channel/user_mgmt.hpp	/^    typedef T* pointer;$/;"	t	class:ipmi::SecureAllocator	typeref:typename:T *
pop	include/ipmid/message.hpp	/^    auto pop(size_t count)$/;"	f	struct:ipmi::message::Payload	typeref:typename:auto
popBits	include/ipmid/message.hpp	/^    uint8_t popBits(size_t count)$/;"	f	struct:ipmi::message::Payload	typeref:typename:uint8_t
populateI2CMasterWRWhitelist	apphandler.cpp	/^static bool populateI2CMasterWRWhitelist()$/;"	f	typeref:typename:bool	file:
populate_record_from_dbus	sensorhandler.cpp	/^ipmi_ret_t populate_record_from_dbus(get_sdr::SensorDataFullRecordBody* body,$/;"	f	typeref:typename:ipmi_ret_t
position	dcmihandler.hpp	/^    uint8_t position;     \/\/!< bit position from the DCMI spec.$/;"	m	struct:dcmi::DCMICap	typeref:typename:uint8_t
positive_threshold_hysteresis	sensorhandler.hpp	/^    uint8_t positive_threshold_hysteresis;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
postFormatProcessing	ipmi_fru_info_area.cpp	/^void postFormatProcessing(FruAreaData& data)$/;"	f	namespace:ipmi::fru	typeref:typename:void
postInit	whitelist-filter.cpp	/^void WhitelistFilter::postInit()$/;"	f	class:ipmi::__anonc26dafe60110::WhitelistFilter	typeref:typename:void
post_work	include/ipmid/api.hpp	/^static inline void post_work(WorkFn work)$/;"	f	typeref:typename:void
powerButtonIntf	chassishandler.cpp	/^static constexpr const char* powerButtonIntf =$/;"	v	typeref:typename:const char *	file:
powerButtonPath	chassishandler.cpp	/^static constexpr const char* powerButtonPath =$/;"	v	typeref:typename:const char *	file:
powerLimit	dcmihandler.hpp	/^    uint16_t powerLimit;     \/\/!< Power limit requested in watts.$/;"	m	struct:dcmi::GetPowerLimitResponse	typeref:typename:uint16_t
powerLimit	dcmihandler.hpp	/^    uint16_t powerLimit;     \/\/!< Power limit requested in watts.$/;"	m	struct:dcmi::SetPowerLimitRequest	typeref:typename:uint16_t
powerReadingState	dcmihandler.hpp	/^    uint8_t powerReadingState; \/\/!< Power Reading State$/;"	m	struct:dcmi::GetPowerReadingResponse	typeref:typename:uint8_t
powerRestoreIntf	chassishandler.cpp	/^constexpr auto powerRestoreIntf =$/;"	v	namespace:chassis::internal	typeref:typename:auto
powerStateNotification	include/dbus-sdr/storagecommands.hpp	/^    uint8_t powerStateNotification;$/;"	m	struct:Type12Record	typeref:typename:uint8_t
power_policy	chassishandler.cpp	/^namespace power_policy$/;"	n	file:
preFormatProcessing	ipmi_fru_info_area.cpp	/^void preFormatProcessing(bool langCode, FruAreaData& data)$/;"	f	namespace:ipmi::fru	typeref:typename:void
preboot	user_channel/channel_layer.hpp	/^    preboot = 1,$/;"	e	enum:ipmi::EChannelAccessMode
prefix	transporthandler.hpp	/^    uint8_t prefix;$/;"	m	struct:ipmi::transport::IfAddr	typeref:typename:uint8_t
prefixToNetmask	transporthandler.cpp	/^in_addr prefixToNetmask(uint8_t prefix)$/;"	f	namespace:ipmi::transport	typeref:typename:in_addr
prepareSELEntry	selutility.cpp	/^    prepareSELEntry(const std::string& objPath,$/;"	f	namespace:ipmi::sel::internal	typeref:typename:GetSELEntryResponse
prepend	include/ipmid/message.hpp	/^    int prepend(const ipmi::message::Payload& p)$/;"	f	struct:ipmi::message::Payload	typeref:typename:int
prepend	include/ipmid/message.hpp	/^    int prepend(const ipmi::message::Payload& p)$/;"	f	struct:ipmi::message::Response	typeref:typename:int
prettyName	ipmi_fru_info_area.cpp	/^static constexpr auto prettyName = "Name";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
prioCustomBase	include/ipmid/api-types.hpp	/^constexpr int prioCustomBase = 40;$/;"	v	namespace:ipmi	typeref:typename:int
prioMax	include/ipmid/api-types.hpp	/^constexpr int prioMax = 50;$/;"	v	namespace:ipmi	typeref:typename:int
prioOdmBase	include/ipmid/api-types.hpp	/^constexpr int prioOdmBase = 30;$/;"	v	namespace:ipmi	typeref:typename:int
prioOemBase	include/ipmid/api-types.hpp	/^constexpr int prioOemBase = 20;$/;"	v	namespace:ipmi	typeref:typename:int
prioOpenBmcBase	include/ipmid/api-types.hpp	/^constexpr int prioOpenBmcBase = 10;$/;"	v	namespace:ipmi	typeref:typename:int
priv	include/ipmid/message.hpp	/^    Privilege priv;$/;"	m	struct:ipmi::Context	typeref:typename:Privilege
privLimit	user_channel/channel_layer.hpp	/^    uint8_t privLimit;$/;"	m	struct:ipmi::ChannelAccess	typeref:typename:uint8_t
privLimitString	user_channel/channel_mgmt.cpp	/^static constexpr const char* privLimitString = "priv_limit";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
privList	user_channel/channel_mgmt.cpp	/^const std::array<std::string, PRIVILEGE_OEM + 1> privList = {$/;"	v	namespace:ipmi	typeref:typename:const std::array<std::string,PRIVILEGE_OEM+1>
privMap	user_channel/cipher_mgmt.hpp	/^using privMap = std::map<ChannelNumCipherIDPair, uint4_t>;$/;"	t	namespace:ipmi	typeref:typename:std::map<ChannelNumCipherIDPair,uint4_t>
privMask	user_channel/user_mgmt.cpp	/^static constexpr size_t privMask = 0xF;$/;"	v	namespace:ipmi	typeref:typename:size_t	file:
privNoAccess	user_channel/user_mgmt.cpp	/^static constexpr size_t privNoAccess = 0xF;$/;"	v	namespace:ipmi	typeref:typename:size_t	file:
privilege	user_channel/user_layer.hpp	/^    uint8_t privilege : 4;$/;"	m	struct:ipmi::PrivAccess	typeref:typename:uint8_t:4
privilege	user_channel/user_mgmt.hpp	/^    uint8_t privilege;$/;"	m	struct:ipmi::UserPrivAccess	typeref:typename:uint8_t
privilegePropertyString	user_channel/channel_mgmt.cpp	/^static constexpr const char* privilegePropertyString = "MaxPrivilege";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
processChAccessPropChange	user_channel/channel_mgmt.cpp	/^void ChannelConfig::processChAccessPropChange($/;"	f	class:ipmi::ChannelConfig	typeref:typename:void
processFruPropChange	read_fru_data.cpp	/^void processFruPropChange(sdbusplus::message::message& msg)$/;"	f	namespace:ipmi::fru	typeref:typename:void
prodId	apphandler.cpp	/^        uint16_t prodId;$/;"	m	struct:ipmiAppGetDeviceId::__anon1df7a8b50508	typeref:typename:uint16_t	file:
product	ipmi_fru_info_area.cpp	/^static constexpr auto product = "Product";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
productOffset	include/dbus-sdr/storagecommands.hpp	/^    uint8_t productOffset;$/;"	m	struct:FRUHeader	typeref:typename:uint8_t
progressMask	apphandler.cpp	/^static constexpr uint8_t progressMask = 0x3;$/;"	v	typeref:typename:uint8_t	file:
propAdditionalData	selutility.cpp	/^constexpr auto propAdditionalData = "AdditionalData";$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
propInterface	read_fru_data.hpp	/^static constexpr auto propInterface = "org.freedesktop.DBus.Properties";$/;"	v	namespace:ipmi::fru	typeref:typename:auto
propIntf	dcmihandler.hpp	/^static constexpr auto propIntf = "org.freedesktop.DBus.Properties";$/;"	v	namespace:dcmi	typeref:typename:auto
propIntf	selutility.hpp	/^static constexpr auto propIntf = "org.freedesktop.DBus.Properties";$/;"	v	namespace:ipmi::sel	typeref:typename:auto
propResolved	selutility.cpp	/^constexpr auto propResolved = "Resolved";$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
prop_intf	app/watchdog_service.cpp	/^static constexpr char prop_intf[] = "org.freedesktop.DBus.Properties";$/;"	v	typeref:typename:char[]	file:
propertiesChangedSignal	user_channel/channel_mgmt.cpp	/^static constexpr const char* propertiesChangedSignal = "PropertiesChanged";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
propertiesChangedSignal	user_channel/user_mgmt.cpp	/^static constexpr const char* propertiesChangedSignal = "PropertiesChanged";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
property	fruread.hpp	/^    std::string property;$/;"	m	struct:IPMIFruData	typeref:typename:std::string
propertyGateway	transporthandler.hpp	/^    static constexpr char propertyGateway[] = "DefaultGateway";$/;"	m	struct:ipmi::transport::AddrFamily	typeref:typename:char[]
propertyGateway	transporthandler.hpp	/^    static constexpr char propertyGateway[] = "DefaultGateway6";$/;"	m	struct:ipmi::transport::AddrFamily	typeref:typename:char[]
propertyInterfaces	include/ipmid/types.hpp	/^    DbusInterfaceMap propertyInterfaces;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:DbusInterfaceMap
protocol	transporthandler.hpp	/^    static constexpr auto protocol =$/;"	m	struct:ipmi::transport::AddrFamily	typeref:typename:auto
protocolType	user_channel/channel_layer.hpp	/^    uint8_t protocolType;$/;"	m	struct:ipmi::ChannelInfo	typeref:typename:uint8_t
protocolTypeMap	user_channel/channel_mgmt.cpp	/^static std::unordered_map<std::string, EChannelProtocolType> protocolTypeMap = {$/;"	v	namespace:ipmi	typeref:typename:std::unordered_map<std::string,EChannelProtocolType>	file:
protocolTypeString	user_channel/channel_mgmt.cpp	/^static constexpr const char* protocolTypeString = "protocol_type";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
providers	Makefile.am	/^providersdir = ${libdir}\/ipmid-providers$/;"	d
providers_LTLIBRARIES	Makefile.am	/^providers_LTLIBRARIES =$/;"	m
providersdir	Makefile.am	/^providersdir = ${libdir}\/ipmid-providers$/;"	m
ptr	include/ipmid/filter.hpp	/^    using ptr = std::shared_ptr<FilterBase>;$/;"	t	class:ipmi::FilterBase	typeref:typename:std::shared_ptr<FilterBase>
ptr	include/ipmid/handler.hpp	/^    using ptr = std::shared_ptr<HandlerBase>;$/;"	t	class:ipmi::HandlerBase	typeref:typename:std::shared_ptr<HandlerBase>
ptr	include/ipmid/message.hpp	/^    using ptr = std::shared_ptr<Context>;$/;"	t	struct:ipmi::Context	typeref:typename:std::shared_ptr<Context>
ptr	include/ipmid/message.hpp	/^    using ptr = std::shared_ptr<Request>;$/;"	t	struct:ipmi::message::Request	typeref:typename:std::shared_ptr<Request>
ptr	include/ipmid/message.hpp	/^    using ptr = std::shared_ptr<Response>;$/;"	t	struct:ipmi::message::Response	typeref:typename:std::shared_ptr<Response>
r_b_exponents	sensorhandler.hpp	/^    uint8_t r_b_exponents;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
raw	include/ipmid/message.hpp	/^    std::vector<uint8_t> raw;$/;"	m	struct:ipmi::message::Payload	typeref:typename:std::vector<uint8_t>
rawIndex	include/ipmid/message.hpp	/^    size_t rawIndex = 0;$/;"	m	struct:ipmi::message::Payload	typeref:typename:size_t
read	dcmihandler.cpp	/^std::tuple<Response, NumInstances> read(const std::string& type,$/;"	f	namespace:dcmi::sensor_info	typeref:typename:std::tuple<Response,NumInstances>
read	dcmihandler.cpp	/^std::tuple<Response, NumInstances> read(const std::string& type,$/;"	f	namespace:dcmi::temp_readings	typeref:typename:std::tuple<Response,NumInstances>
readAll	dcmihandler.cpp	/^    readAll(const std::string& type, uint8_t instanceStart, const Json& config)$/;"	f	namespace:dcmi::sensor_info	typeref:typename:std::tuple<ResponseList,NumInstances>
readAll	dcmihandler.cpp	/^std::tuple<ResponseList, NumInstances> readAll(const std::string& type,$/;"	f	namespace:dcmi::temp_readings	typeref:typename:std::tuple<ResponseList,NumInstances>
readAllProperties	read_fru_data.cpp	/^ipmi::PropertyMap readAllProperties(const std::string& intf,$/;"	f	namespace:ipmi::fru	typeref:typename:ipmi::PropertyMap
readAssetTag	dcmihandler.cpp	/^std::string readAssetTag()$/;"	f	namespace:dcmi	typeref:typename:std::string
readAssetTagObjectTree	dcmihandler.cpp	/^void readAssetTagObjectTree(dcmi::assettag::ObjectTree& objectTree)$/;"	f	namespace:dcmi	typeref:typename:void
readCSPrivilegeLevels	user_channel/cipher_mgmt.cpp	/^Json CipherConfig::readCSPrivilegeLevels(const std::string& csFileName)$/;"	f	class:ipmi::CipherConfig	typeref:typename:Json
readChannelPersistData	user_channel/channel_mgmt.cpp	/^int ChannelConfig::readChannelPersistData()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
readChannelVolatileData	user_channel/channel_mgmt.cpp	/^int ChannelConfig::readChannelVolatileData()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
readDataFromInventory	read_fru_data.cpp	/^FruInventoryData readDataFromInventory(const FRUId& fruNum)$/;"	f	namespace:ipmi::fru	typeref:typename:FruInventoryData
readESEL	storageaddsel.cpp	/^std::string readESEL(const char* fileName)$/;"	f	typeref:typename:std::string
readJsonFile	user_channel/channel_mgmt.cpp	/^Json ChannelConfig::readJsonFile(const std::string& configFile)$/;"	f	class:ipmi::ChannelConfig	typeref:typename:Json
readLength	selutility.hpp	/^    uint8_t readLength;     \/\/!< Bytes to read.$/;"	m	struct:ipmi::sel::GetSELEntryRequest	typeref:typename:uint8_t
readLoggingObjectPaths	selutility.cpp	/^void readLoggingObjectPaths(ObjectPaths& paths)$/;"	f	namespace:ipmi::sel	typeref:typename:void
readPasswdFileData	user_channel/passwd_mgr.cpp	/^int PasswdMgr::readPasswdFileData(std::vector<uint8_t>& outBytes)$/;"	f	class:ipmi::PasswdMgr	typeref:typename:int
readPayloadAccessFromUserInfo	user_channel/user_mgmt.cpp	/^void UserAccess::readPayloadAccessFromUserInfo($/;"	f	class:ipmi::UserAccess	typeref:typename:void
readTemp	dcmihandler.cpp	/^Temperature readTemp(const std::string& dbusService,$/;"	f	namespace:dcmi::temp_readings	typeref:typename:Temperature
readUserData	user_channel/user_mgmt.cpp	/^void UserAccess::readUserData()$/;"	f	class:ipmi::UserAccess	typeref:typename:void
readable	include/dbus-sdr/sensorcommands.hpp	/^    uint8_t readable;$/;"	m	struct:SensorThresholdResp	typeref:typename:uint8_t
reading	include/ipmid/types.hpp	/^    uint8_t reading;                     \/\/ sensor reading$/;"	m	struct:ipmi::sensor::GetSensorResponse	typeref:typename:uint8_t
reading	include/ipmid/types.hpp	/^    uint8_t reading;          \/\/!< Sensor reading.$/;"	m	struct:ipmi::sensor::GetReadingResponse	typeref:typename:uint8_t
reading	include/ipmid/types.hpp	/^    uint8_t reading;$/;"	m	struct:ipmi::sensor::SetSensorReadingReq	typeref:typename:uint8_t
readingAssertion	sensordatahandler.hpp	/^GetSensorResponse readingAssertion(const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::get	typeref:typename:GetSensorResponse
readingAssertion	sensordatahandler.hpp	/^ipmi_ret_t readingAssertion(const SetSensorReadingReq& cmdData,$/;"	f	namespace:ipmi::sensor::set	typeref:typename:ipmi_ret_t
readingData	sensordatahandler.hpp	/^GetSensorResponse readingData(const Info& sensorInfo)$/;"	f	namespace:ipmi::sensor::get	typeref:typename:GetSensorResponse
readingData	sensordatahandler.hpp	/^ipmi_ret_t readingData(const SetSensorReadingReq& cmdData,$/;"	f	namespace:ipmi::sensor::set	typeref:typename:ipmi_ret_t
readingOrStateUnavailable	include/ipmid/types.hpp	/^    bool readingOrStateUnavailable;      \/\/ 1 = reading\/state unavailable$/;"	m	struct:ipmi::sensor::GetSensorResponse	typeref:typename:bool
readingStateUnavailable	include/dbus-sdr/sensorcommands.hpp	/^    readingStateUnavailable = (1 << 5),$/;"	e	enum:IPMISensorReadingByte2
rebind	user_channel/user_mgmt.hpp	/^    struct rebind$/;"	s	class:ipmi::SecureAllocator
recalculateHashes	dbus-sdr/storagecommands.cpp	/^void recalculateHashes()$/;"	f	namespace:ipmi::storage	typeref:typename:void
reconfigureGatewayMAC	transporthandler.cpp	/^void reconfigureGatewayMAC(sdbusplus::bus::bus& bus,$/;"	f	namespace:ipmi::transport	typeref:typename:void
reconfigureIfAddr4	transporthandler.cpp	/^void reconfigureIfAddr4(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
reconfigureIfAddr6	transporthandler.cpp	/^void reconfigureIfAddr6(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
reconfigureVLAN	transporthandler.cpp	/^void reconfigureVLAN(sdbusplus::bus::bus& bus, ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
recordID	selutility.hpp	/^    uint16_t recordID;         \/\/!< Record ID.$/;"	m	struct:ipmi::sel::SELOEMRecordTypeCD	typeref:typename:uint16_t
recordID	selutility.hpp	/^    uint16_t recordID;        \/\/!< Record ID.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint16_t
recordID	selutility.hpp	/^    uint16_t recordID;      \/\/!< Record ID.$/;"	m	struct:ipmi::sel::SELOEMRecordTypeEF	typeref:typename:uint16_t
recordIdLsb	dcmihandler.hpp	/^    uint8_t recordIdLsb; \/\/!< SDR record id LS byte$/;"	m	struct:dcmi::sensor_info::Response	typeref:typename:uint8_t
recordIdMsb	dcmihandler.hpp	/^    uint8_t recordIdMsb; \/\/!< SDR record id MS byte$/;"	m	struct:dcmi::sensor_info::Response	typeref:typename:uint8_t
recordNotPresent	ipmi_fru_info_area.cpp	/^static constexpr auto recordNotPresent = 0x0;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
recordType	selutility.hpp	/^    uint8_t recordType;        \/\/!< Record Type.$/;"	m	struct:ipmi::sel::SELOEMRecordTypeCD	typeref:typename:uint8_t
recordType	selutility.hpp	/^    uint8_t recordType;       \/\/!< Record Type.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint8_t
recordType	selutility.hpp	/^    uint8_t recordType;     \/\/!< Record Type.$/;"	m	struct:ipmi::sel::SELOEMRecordTypeEF	typeref:typename:uint8_t
recordUnitOfMeasurement	ipmi_fru_info_area.cpp	/^static constexpr auto recordUnitOfMeasurement = 0x8; \/\/ size in bytes$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
record_data	sensorhandler.hpp	/^    uint8_t record_data[64];$/;"	m	struct:get_sdr::GetSdrResp	typeref:typename:uint8_t[64]
record_id_lsb	sensorhandler.hpp	/^    uint8_t record_id_lsb;$/;"	m	struct:get_sdr::GetSdrReq	typeref:typename:uint8_t
record_id_lsb	sensorhandler.hpp	/^    uint8_t record_id_lsb;$/;"	m	struct:get_sdr::SensorDataRecordHeader	typeref:typename:uint8_t
record_id_msb	sensorhandler.hpp	/^    uint8_t record_id_msb;$/;"	m	struct:get_sdr::GetSdrReq	typeref:typename:uint8_t
record_id_msb	sensorhandler.hpp	/^    uint8_t record_id_msb;$/;"	m	struct:get_sdr::SensorDataRecordHeader	typeref:typename:uint8_t
record_length	sensorhandler.hpp	/^    uint8_t record_length; \/\/ Length not counting the header$/;"	m	struct:get_sdr::SensorDataRecordHeader	typeref:typename:uint8_t
record_type	sensorhandler.hpp	/^    uint8_t record_type;$/;"	m	struct:get_sdr::SensorDataRecordHeader	typeref:typename:uint8_t
redundancyIntf	apphandler.cpp	/^static constexpr auto redundancyIntf =$/;"	v	typeref:typename:auto	file:
registerCallbackHandler	read_fru_data.cpp	/^int registerCallbackHandler()$/;"	f	namespace:ipmi::fru	typeref:typename:int
registerChannelFunctions	user_channel/channelcommands.cpp	/^void registerChannelFunctions()$/;"	f	namespace:ipmi	typeref:typename:void
registerFilter	include/ipmid/filter.hpp	/^void registerFilter(int prio, Filter&& filter)$/;"	f	namespace:ipmi	typeref:typename:void
registerFilter	include/ipmid/filter.hpp	/^void registerFilter(int prio, const Filter& filter)$/;"	f	namespace:ipmi	typeref:typename:void
registerFilter	ipmid-new.cpp	/^void registerFilter(int prio, FilterBase::ptr filter)$/;"	f	namespace:ipmi::impl	typeref:typename:void
registerGroupHandler	include/ipmid/handler.hpp	/^void registerGroupHandler(int prio, Group group, Cmd cmd, Privilege priv,$/;"	f	namespace:ipmi	typeref:typename:void
registerGroupHandler	ipmid-new.cpp	/^bool registerGroupHandler(int prio, Group group, Cmd cmd, Privilege priv,$/;"	f	namespace:ipmi::impl	typeref:typename:bool
registerHandler	include/ipmid/handler.hpp	/^bool registerHandler(int prio, NetFn netFn, Cmd cmd, Privilege priv,$/;"	f	namespace:ipmi	typeref:typename:bool
registerHandler	ipmid-new.cpp	/^    void registerHandler(Number oen, ipmi_cmd_t cmd, Handler handler) override$/;"	f	class:oem::LegacyRouter	typeref:typename:void	file:
registerHandler	ipmid-new.cpp	/^bool registerHandler(int prio, NetFn netFn, Cmd cmd, Privilege priv,$/;"	f	namespace:ipmi::impl	typeref:typename:bool
registerHandler	libipmid/signals.cpp	/^    void registerHandler(int prio,$/;"	f	class:__anonf9df85400110::SignalHandler	typeref:typename:void	file:
registerOemHandler	include/ipmid/handler.hpp	/^void registerOemHandler(int prio, Iana iana, Cmd cmd, Privilege priv,$/;"	f	namespace:ipmi	typeref:typename:void
registerOemHandler	ipmid-new.cpp	/^bool registerOemHandler(int prio, Iana iana, Cmd cmd, Privilege priv,$/;"	f	namespace:ipmi::impl	typeref:typename:bool
registerSensorFunctions	dbus-sdr/sensorcommands.cpp	/^void registerSensorFunctions()$/;"	f	namespace:ipmi	typeref:typename:void
registerSignalHandler	libipmid/signals.cpp	/^void registerSignalHandler(int priority, int signalNumber,$/;"	f	typeref:typename:void
registerStorageFunctions	dbus-sdr/storagecommands.cpp	/^void registerStorageFunctions()$/;"	f	namespace:ipmi::storage	typeref:typename:void
registerUserIpmiFunctions	user_channel/usercommands.cpp	/^void registerUserIpmiFunctions()$/;"	f	namespace:ipmi	typeref:typename:void
register_netfn_app_functions	apphandler.cpp	/^void register_netfn_app_functions()$/;"	f	typeref:typename:void
register_netfn_app_functions	systemintfcmds.cpp	/^void register_netfn_app_functions()$/;"	f	typeref:typename:void
register_netfn_chassis_functions	chassishandler.cpp	/^void register_netfn_chassis_functions()$/;"	f	typeref:typename:void
register_netfn_dcmi_functions	dcmihandler.cpp	/^void register_netfn_dcmi_functions()$/;"	f	typeref:typename:void
register_netfn_global_functions	globalhandler.cpp	/^void register_netfn_global_functions()$/;"	f	typeref:typename:void
register_netfn_groupext_functions	groupext.cpp	/^void register_netfn_groupext_functions()$/;"	f	typeref:typename:void
register_netfn_sen_functions	sensorhandler.cpp	/^void register_netfn_sen_functions()$/;"	f	typeref:typename:void
register_netfn_storage_functions	storagehandler.cpp	/^void register_netfn_storage_functions()$/;"	f	typeref:typename:void
register_netfn_transport_functions	transporthandler.cpp	/^void register_netfn_transport_functions()$/;"	f	typeref:typename:void
removeOnExit	user_channel/file.hpp	/^    bool removeOnExit = false;$/;"	m	class:phosphor::user::File	typeref:typename:bool
renameUserMethod	user_channel/user_mgmt.cpp	/^static constexpr const char* renameUserMethod = "RenameUser";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
replaceCacheFru	dbus-sdr/storagecommands.cpp	/^void replaceCacheFru(const std::shared_ptr<sdbusplus::asio::connection>& bus,$/;"	f	namespace:ipmi::storage	typeref:typename:void
replyPlain	test/oemrouter_unittest.cpp	/^uint8_t replyPlain[] = {0x56, 0x34, 0x12, 0x31, 0x41};$/;"	v	namespace:oem::__anonba15ac260110	typeref:typename:uint8_t[]
reportError	app/watchdog.cpp	/^void reportError()$/;"	f	typeref:typename:void
reportSensorEventAssert	ipmisensor.cpp	/^void reportSensorEventAssert(const sensorRES_t* pRec, int index)$/;"	f	typeref:typename:void
reportSensorEventDeassert	ipmisensor.cpp	/^void reportSensorEventDeassert(const sensorRES_t* pRec, int index)$/;"	f	typeref:typename:void
reqTransition	globalhandler.cpp	/^static constexpr auto reqTransition = "RequestedBMCTransition";$/;"	v	typeref:typename:auto	file:
request	sensorhandler.hpp	/^namespace request$/;"	n	namespace:get_sdr
request	sensorhandler.hpp	/^namespace request$/;"	n	namespace:get_sdr_info
reservationID	selutility.hpp	/^    uint16_t reservationID; \/\/!< Reservation ID.$/;"	m	struct:ipmi::sel::GetSELEntryRequest	typeref:typename:uint16_t
reservation_id_lsb	sensorhandler.hpp	/^    uint8_t reservation_id_lsb;$/;"	m	struct:get_sdr::GetSdrReq	typeref:typename:uint8_t
reservation_id_msb	sensorhandler.hpp	/^    uint8_t reservation_id_msb;$/;"	m	struct:get_sdr::GetSdrReq	typeref:typename:uint8_t
reserveSDRRepositoryCommandSupported	include/dbus-sdr/storagecommands.hpp	/^    reserveSDRRepositoryCommandSupported = 0x2,$/;"	e	enum:SdrRepositoryInfoOps
reserveSel	ipmid-new.cpp	/^unsigned short reserveSel(void)$/;"	f	typeref:typename:unsigned short
reserveSel	selutility.hpp	/^static constexpr bool reserveSel = true;$/;"	v	namespace:ipmi::sel::operationSupport	typeref:typename:bool
reserved	chassishandler.hpp	/^    reserved = 0x3$/;"	e	enum:ChassisIDState
reserved	dcmihandler.hpp	/^    uint16_t reserved;       \/\/!< Reserved$/;"	m	struct:dcmi::SetPowerLimitRequest	typeref:typename:uint16_t
reserved	dcmihandler.hpp	/^    uint16_t reserved;       \/\/!< Reserved.$/;"	m	struct:dcmi::GetPowerLimitResponse	typeref:typename:uint16_t
reserved	include/dbus-sdr/sdrutils.hpp	/^    reserved = 0x0,$/;"	e	enum:SensorTypeCodes
reserved	include/dbus-sdr/storagecommands.hpp	/^    reserved = 0x10,$/;"	e	enum:SdrRepositoryInfoOps
reserved	include/dbus-sdr/storagecommands.hpp	/^    uint24_t reserved;$/;"	m	struct:Type12Record	typeref:typename:uint24_t
reserved	sensorhandler.hpp	/^    uint16_t reserved;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint16_t
reserved	sensorhandler.hpp	/^    uint8_t reserved;$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:uint8_t
reserved	sensorhandler.hpp	/^    uint8_t reserved;$/;"	m	struct:get_sdr::SensorDataFruRecordBody	typeref:typename:uint8_t
reserved	user_channel/channel_layer.hpp	/^    reserved = (1 << 0x3),$/;"	e	enum:ipmi::EAuthType
reserved	user_channel/channel_layer.hpp	/^    reserved = 0x00,$/;"	e	enum:ipmi::EChannelMediumType
reserved	user_channel/channel_layer.hpp	/^    reserved = 0x03,$/;"	e	enum:ipmi::EChannelProtocolType
reserved	user_channel/channel_layer.hpp	/^    reserved = 0x03,$/;"	e	enum:ipmi::__anone8937c160103
reserved	user_channel/user_layer.hpp	/^    uint8_t reserved : 1;$/;"	m	struct:ipmi::PrivAccess	typeref:typename:uint8_t:1
reserved1	dcmihandler.hpp	/^    uint16_t reserved1;      \/\/!< Reserved.$/;"	m	struct:dcmi::GetPowerLimitResponse	typeref:typename:uint16_t
reserved1	dcmihandler.hpp	/^    uint8_t reserved1;       \/\/!< Reserved$/;"	m	struct:dcmi::SetPowerLimitRequest	typeref:typename:uint8_t
reserved1	user_channel/usercommands.cpp	/^    uint8_t reserved1 : 1;$/;"	m	struct:ipmi::SetUserPasswordReq	typeref:typename:uint8_t:1	file:
reserved1	user_channel/usercommands.cpp	/^    uint8_t reserved1 : 2;$/;"	m	struct:ipmi::GetUserNameReq	typeref:typename:uint8_t:2	file:
reserved1	user_channel/usercommands.cpp	/^    uint8_t reserved1 : 2;$/;"	m	struct:ipmi::SetUserNameReq	typeref:typename:uint8_t:2	file:
reserved2	dcmihandler.hpp	/^    uint16_t reserved2;      \/\/!< Reserved.$/;"	m	struct:dcmi::SetPowerLimitRequest	typeref:typename:uint16_t
reserved2	user_channel/usercommands.cpp	/^    uint8_t reserved2 : 6;$/;"	m	struct:ipmi::SetUserPasswordReq	typeref:typename:uint8_t:6	file:
reservedEvent	user_channel/user_mgmt.hpp	/^    reservedEvent,$/;"	e	enum:ipmi::UserUpdateEvent
reservedSensorNumber	include/dbus-sdr/sdrutils.hpp	/^static constexpr uint8_t reservedSensorNumber = 0xFF;$/;"	v	typeref:typename:uint8_t
reservedUserId	user_channel/user_layer.hpp	/^static constexpr uint8_t reservedUserId = 0x0;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
reset	include/ipmid/message.hpp	/^    void reset()$/;"	f	struct:ipmi::message::Payload	typeref:typename:void
resetBMC	globalhandler.cpp	/^void resetBMC()$/;"	f	typeref:typename:void
resetButtonIntf	chassishandler.cpp	/^static constexpr const char* resetButtonIntf =$/;"	v	typeref:typename:const char *	file:
resetButtonPath	chassishandler.cpp	/^static constexpr const char* resetButtonPath =$/;"	v	typeref:typename:const char *	file:
resetTimeRemaining	app/watchdog_service.cpp	/^void WatchdogService::resetTimeRemaining(bool enableWatchdog)$/;"	f	class:WatchdogService	typeref:typename:void
reseved	user_channel/passwd_mgr.cpp	/^    unsigned char reseved[2];$/;"	m	struct:ipmi::MetaPassStruct	typeref:typename:unsigned char[2]	file:
resize	include/ipmid/message.hpp	/^    void resize(size_t sz)$/;"	f	struct:ipmi::message::Payload	typeref:typename:void
response	include/ipmid/api-types.hpp	/^static inline auto response(ipmi::Cc cc)$/;"	f	namespace:ipmi	typeref:typename:auto
response	include/ipmid/api-types.hpp	/^static inline auto response(ipmi::Cc cc, Args&&... args)$/;"	f	namespace:ipmi	typeref:typename:auto
response	sensorhandler.hpp	/^namespace response$/;"	n	namespace:get_sdr
responseBusy	include/ipmid/api-types.hpp	/^static inline auto responseBusy()$/;"	f	namespace:ipmi	typeref:typename:auto
responseCmdFailFwUpdMode	include/ipmid/api-types.hpp	/^static inline auto responseCmdFailFwUpdMode()$/;"	f	namespace:ipmi	typeref:typename:auto
responseCmdFailInitAgent	include/ipmid/api-types.hpp	/^static inline auto responseCmdFailInitAgent()$/;"	f	namespace:ipmi	typeref:typename:auto
responseCmdFailSdrMode	include/ipmid/api-types.hpp	/^static inline auto responseCmdFailSdrMode()$/;"	f	namespace:ipmi	typeref:typename:auto
responseCommandDisabled	include/ipmid/api-types.hpp	/^static inline auto responseCommandDisabled()$/;"	f	namespace:ipmi	typeref:typename:auto
responseCommandNotAvailable	include/ipmid/api-types.hpp	/^static inline auto responseCommandNotAvailable()$/;"	f	namespace:ipmi	typeref:typename:auto
responseDestinationUnavailable	include/ipmid/api-types.hpp	/^static inline auto responseDestinationUnavailable()$/;"	f	namespace:ipmi	typeref:typename:auto
responseDuplicateRequest	include/ipmid/api-types.hpp	/^static inline auto responseDuplicateRequest()$/;"	f	namespace:ipmi	typeref:typename:auto
responseIllegalCommand	include/ipmid/api-types.hpp	/^static inline auto responseIllegalCommand()$/;"	f	namespace:ipmi	typeref:typename:auto
responseInsufficientPrivilege	include/ipmid/api-types.hpp	/^static inline auto responseInsufficientPrivilege()$/;"	f	namespace:ipmi	typeref:typename:auto
responseInvalidCommand	include/ipmid/api-types.hpp	/^static inline auto responseInvalidCommand()$/;"	f	namespace:ipmi	typeref:typename:auto
responseInvalidCommandOnLun	include/ipmid/api-types.hpp	/^static inline auto responseInvalidCommandOnLun()$/;"	f	namespace:ipmi	typeref:typename:auto
responseInvalidFieldRequest	include/ipmid/api-types.hpp	/^static inline auto responseInvalidFieldRequest()$/;"	f	namespace:ipmi	typeref:typename:auto
responseInvalidReservationId	include/ipmid/api-types.hpp	/^static inline auto responseInvalidReservationId()$/;"	f	namespace:ipmi	typeref:typename:auto
responseOutOfSpace	include/ipmid/api-types.hpp	/^static inline auto responseOutOfSpace()$/;"	f	namespace:ipmi	typeref:typename:auto
responseParmNotSupported	apphandler.cpp	/^static inline auto responseParmNotSupported()$/;"	f	namespace:ipmi	typeref:typename:auto	file:
responseParmNotSupported	chassishandler.cpp	/^static inline auto responseParmNotSupported()$/;"	f	namespace:ipmi	typeref:typename:auto	file:
responseParmOutOfRange	include/ipmid/api-types.hpp	/^static inline auto responseParmOutOfRange()$/;"	f	namespace:ipmi	typeref:typename:auto
responseReceived	softoff/softoff.cpp	/^auto SoftPowerOff::responseReceived(HostResponse response) -> HostResponse$/;"	f	class:phosphor::ipmi::SoftPowerOff	typeref:typename:HostResponse
responseReqDataLenExceeded	include/ipmid/api-types.hpp	/^static inline auto responseReqDataLenExceeded()$/;"	f	namespace:ipmi	typeref:typename:auto
responseReqDataLenInvalid	include/ipmid/api-types.hpp	/^static inline auto responseReqDataLenInvalid()$/;"	f	namespace:ipmi	typeref:typename:auto
responseReqDataTruncated	include/ipmid/api-types.hpp	/^static inline auto responseReqDataTruncated()$/;"	f	namespace:ipmi	typeref:typename:auto
responseResponseError	include/ipmid/api-types.hpp	/^static inline auto responseResponseError()$/;"	f	namespace:ipmi	typeref:typename:auto
responseRetBytesUnavailable	include/ipmid/api-types.hpp	/^static inline auto responseRetBytesUnavailable()$/;"	f	namespace:ipmi	typeref:typename:auto
responseSensorInvalid	include/ipmid/api-types.hpp	/^static inline auto responseSensorInvalid()$/;"	f	namespace:ipmi	typeref:typename:auto
responseSetInProgressActive	apphandler.cpp	/^static inline auto responseSetInProgressActive()$/;"	f	namespace:ipmi	typeref:typename:auto	file:
responseSuccess	include/ipmid/api-types.hpp	/^static inline auto responseSuccess()$/;"	f	namespace:ipmi	typeref:typename:auto
responseSuccess	include/ipmid/api-types.hpp	/^static inline auto responseSuccess(Args&&... args)$/;"	f	namespace:ipmi	typeref:typename:auto
responseSystemInfoParameterSetReadOnly	apphandler.cpp	/^static inline auto responseSystemInfoParameterSetReadOnly()$/;"	f	namespace:ipmi	typeref:typename:auto	file:
responseTimeout	include/ipmid/api-types.hpp	/^static inline auto responseTimeout()$/;"	f	namespace:ipmi	typeref:typename:auto
responseUnspecifiedError	include/ipmid/api-types.hpp	/^static inline auto responseUnspecifiedError()$/;"	f	namespace:ipmi	typeref:typename:auto
restartCauseToIpmiRestartCause	chassishandler.cpp	/^    restartCauseToIpmiRestartCause(State::Host::RestartCause cause)$/;"	f	typeref:typename:IpmiRestartCause	file:
restrictFilesPermission	user_channel/passwd_mgr.cpp	/^void PasswdMgr::restrictFilesPermission(void)$/;"	f	class:ipmi::PasswdMgr	typeref:typename:void
restrictedMode	whitelist-filter.cpp	/^    bool restrictedMode = true;$/;"	m	class:ipmi::__anonc26dafe60110::WhitelistFilter	typeref:typename:bool	file:
restrictionModeIntf	whitelist-filter.cpp	/^    static constexpr const char restrictionModeIntf[] =$/;"	m	class:ipmi::__anonc26dafe60110::WhitelistFilter	typeref:typename:const char[]	file:
ret	transporthandler.hpp	/^        PropertiesCache::iterator ret;$/;"	m	class:ipmi::transport::ObjectLookupCache::iterator	typeref:typename:PropertiesCache::iterator
revision	apphandler.cpp	/^        uint8_t revision;$/;"	m	struct:ipmiAppGetDeviceId::__anon1df7a8b50508	typeref:typename:uint8_t	file:
rfc4122ToIpmi	apphandler.cpp	/^static std::array<uint8_t, uuidBinaryLength> rfc4122ToIpmi(std::string rfc4122)$/;"	f	typeref:typename:std::array<uint8_t,uuidBinaryLength>	file:
root	settings.hpp	/^constexpr auto root = "\/";$/;"	v	namespace:settings	typeref:typename:auto
rpm	include/dbus-sdr/storagecommands.hpp	/^    rpm = 0x12,$/;"	e	enum:SensorUnits
rqSA	include/ipmid/message.hpp	/^    int rqSA;$/;"	m	struct:ipmi::Context	typeref:typename:int
s0G0D0	apphandler.cpp	/^    s0G0D0 = 0x00,$/;"	e	enum:acpi_state::PowerState	file:
s1D1	apphandler.cpp	/^    s1D1 = 0x01,$/;"	e	enum:acpi_state::PowerState	file:
s2D2	apphandler.cpp	/^    s2D2 = 0x02,$/;"	e	enum:acpi_state::PowerState	file:
s3D3	apphandler.cpp	/^    s3D3 = 0x03,$/;"	e	enum:acpi_state::PowerState	file:
s4	apphandler.cpp	/^    s4 = 0x04,$/;"	e	enum:acpi_state::PowerState	file:
s4S5	apphandler.cpp	/^    s4S5 = 0x06,$/;"	e	enum:acpi_state::PowerState	file:
s5G2	apphandler.cpp	/^    s5G2 = 0x05,$/;"	e	enum:acpi_state::PowerState	file:
sample_unittest_CPPFLAGS	test/Makefile.am	/^sample_unittest_CPPFLAGS = -Igtest $(GTEST_CPPFLAGS) $(AM_CPPFLAGS)$/;"	m
sample_unittest_CXXFLAGS	test/Makefile.am	/^sample_unittest_CXXFLAGS = $(PTHREAD_CFLAGS) $(CODE_COVERAGE_CXXFLAGS) \\$/;"	m
sample_unittest_LDADD	test/Makefile.am	/^sample_unittest_LDADD = $(top_builddir)\/sample.o$/;"	m
sample_unittest_LDFLAGS	test/Makefile.am	/^sample_unittest_LDFLAGS = -lgtest_main -lgtest -pthread $(OESDK_TESTCASE_FLAGS) \\$/;"	m
sample_unittest_SOURCES	test/Makefile.am	/^sample_unittest_SOURCES = %reldir%\/sample_unittest.cpp$/;"	m
samplingPeriod	dcmihandler.hpp	/^    uint16_t samplingPeriod; \/\/!< Statistics sampling period in seconds.$/;"	m	struct:dcmi::GetPowerLimitResponse	typeref:typename:uint16_t
samplingPeriod	dcmihandler.hpp	/^    uint16_t samplingPeriod; \/\/!< Statistics sampling period in seconds.$/;"	m	struct:dcmi::SetPowerLimitRequest	typeref:typename:uint16_t
save	dbus-sdr/storagecommands.cpp	/^void save()$/;"	f	namespace:dynamic_sensors::ipmi::sel::erase_time	typeref:typename:void
scale	include/ipmid/types.hpp	/^    Scale scale;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:Scale
scaleFloatExp	dbus-sdr/sensorutils.cpp	/^static bool scaleFloatExp(double& base, int8_t& expShift)$/;"	f	namespace:ipmi	typeref:typename:bool	file:
scaleIPMIValueFromDouble	dbus-sdr/sensorutils.cpp	/^uint8_t scaleIPMIValueFromDouble(const double value, const int16_t mValue,$/;"	f	namespace:ipmi	typeref:typename:uint8_t
scaledOffset	include/ipmid/types.hpp	/^    ScaledOffset scaledOffset;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:ScaledOffset
scanningEnabled	include/ipmid/types.hpp	/^    bool scanningEnabled;                \/\/ 0 = sensor scanning disabled$/;"	m	struct:ipmi::sensor::GetSensorResponse	typeref:typename:bool
script_dir	scripts/fru_gen.py	/^    script_dir = os.path.dirname(os.path.realpath(__file__))$/;"	v
script_dir	scripts/inventory-sensor.py	/^    script_dir = os.path.dirname(os.path.realpath(__file__))$/;"	v
script_dir	scripts/sensor_gen.py	/^    script_dir = os.path.dirname(os.path.realpath(__file__))$/;"	v
sd_journal_send	test/message/payload.cpp	/^int sd_journal_send(const char* format, ...)$/;"	f	typeref:typename:int
sd_journal_send_with_location	test/message/payload.cpp	/^int sd_journal_send_with_location(const char* file, const char* line,$/;"	f	typeref:typename:int
sdbusp	libipmid/sdbus-asio.cpp	/^std::shared_ptr<sdbusplus::asio::connection> sdbusp;$/;"	v	namespace:__anondd379b290110	typeref:typename:std::shared_ptr<sdbusplus::asio::connection>
sdbusp	libipmid/systemintf-sdbus.cpp	/^std::unique_ptr<sdbusplus::asio::connection> sdbusp;$/;"	v	namespace:__anon3247ad930110	typeref:typename:std::unique_ptr<sdbusplus::asio::connection>
sdbusplus	elog-errors.hpp	/^namespace sdbusplus$/;"	n
sdbusplus	error-HostEvent.hpp	/^namespace sdbusplus$/;"	n
sdrLastAdd	dbus-sdr/sensorcommands.cpp	/^static uint32_t sdrLastAdd = noTimestamp;$/;"	v	namespace:ipmi	typeref:typename:uint32_t	file:
sdrLastRemove	dbus-sdr/sensorcommands.cpp	/^static uint32_t sdrLastRemove = noTimestamp;$/;"	v	namespace:ipmi	typeref:typename:uint32_t	file:
sdrReservationID	dbus-sdr/sensorcommands.cpp	/^static uint16_t sdrReservationID;$/;"	v	namespace:ipmi	typeref:typename:uint16_t	file:
sdrStatsTable	include/dbus-sdr/sdrutils.hpp	/^inline IPMIStatsTable sdrStatsTable;$/;"	v	namespace:details	typeref:typename:IPMIStatsTable
sdr_version	sensorhandler.hpp	/^    uint8_t sdr_version;$/;"	m	struct:get_sdr::SensorDataRecordHeader	typeref:typename:uint8_t
searchCurrentSession	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t searchCurrentSession = 0;$/;"	v	namespace:session	typeref:typename:uint8_t
searchSessionByHandle	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t searchSessionByHandle = 0xFE;$/;"	v	namespace:session	typeref:typename:uint8_t
searchSessionById	include/ipmid/sessiondef.hpp	/^static constexpr uint8_t searchSessionById = 0xFF;$/;"	v	namespace:session	typeref:typename:uint8_t
secsToMaxMfgdate	ipmi_fru_info_area.cpp	/^static constexpr auto secsToMaxMfgdate =$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
secs_from_1970_1996	ipmi_fru_info_area.cpp	/^static constexpr auto secs_from_1970_1996 = 820454400;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
secs_per_min	ipmi_fru_info_area.cpp	/^static constexpr auto secs_per_min = 60;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
section	fruread.hpp	/^    std::string section;$/;"	m	struct:IPMIFruData	typeref:typename:std::string
sel	dbus-sdr/storagecommands.cpp	/^namespace dynamic_sensors::ipmi::sel$/;"	n	namespace:dynamic_sensors::ipmi	file:
sel	include/dbus-sdr/storagecommands.hpp	/^namespace dynamic_sensors::ipmi::sel$/;"	n	namespace:dynamic_sensors::ipmi
sel	selutility.cpp	/^namespace sel$/;"	n	namespace:ipmi	file:
sel	selutility.hpp	/^namespace sel$/;"	n	namespace:ipmi
selDataSize	selutility.cpp	/^constexpr auto selDataSize = 3;$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
selEraseTimestamp	dbus-sdr/storagecommands.cpp	/^static constexpr const char* selEraseTimestamp = "\/var\/lib\/ipmi\/sel_erase_time";$/;"	v	namespace:dynamic_sensors::ipmi::sel::erase_time	typeref:typename:const char *	file:
selIPMBEventSize	sensorhandler.hpp	/^static constexpr int selIPMBEventSize = 7;$/;"	v	typeref:typename:int
selLogDir	dbus-sdr/storagecommands.cpp	/^static const std::filesystem::path selLogDir = "\/var\/log";$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:const std::filesystem::path	file:
selLogFilename	dbus-sdr/storagecommands.cpp	/^static const std::string selLogFilename = "ipmi_sel";$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:const std::string	file:
selOperationSupport	include/dbus-sdr/storagecommands.hpp	/^static constexpr uint8_t selOperationSupport = 0x02;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:uint8_t
selRecordID	selutility.hpp	/^    uint16_t selRecordID;   \/\/!< SEL Record ID.$/;"	m	struct:ipmi::sel::GetSELEntryRequest	typeref:typename:uint16_t
selRecordSize	selutility.hpp	/^static constexpr auto selRecordSize = 16;$/;"	v	namespace:ipmi::sel	typeref:typename:auto
selReservationID	ipmid-new.cpp	/^static unsigned short selReservationID = 0xFFFF;$/;"	v	typeref:typename:unsigned short	file:
selReservationValid	ipmid-new.cpp	/^static bool selReservationValid = false;$/;"	v	typeref:typename:bool	file:
selSystemEventSizeWith1Bytes	sensorhandler.hpp	/^static constexpr int selSystemEventSizeWith1Bytes = 6;$/;"	v	typeref:typename:int
selSystemEventSizeWith2Bytes	sensorhandler.hpp	/^static constexpr int selSystemEventSizeWith2Bytes = 7;$/;"	v	typeref:typename:int
selSystemEventSizeWith3Bytes	sensorhandler.hpp	/^static constexpr int selSystemEventSizeWith3Bytes = 8;$/;"	v	typeref:typename:int
selVersion	selutility.hpp	/^static constexpr auto selVersion = 0x51;$/;"	v	namespace:ipmi::sel	typeref:typename:auto
sendHostShutDownCmd	softoff/softoff.cpp	/^void SoftPowerOff::sendHostShutDownCmd()$/;"	f	class:phosphor::ipmi::SoftPowerOff	typeref:typename:void
sennum	sensorhandler.cpp	/^    uint8_t sennum;$/;"	m	struct:sensor_data_t	typeref:typename:uint8_t	file:
sensor	dbus-sdr/sensorcommands.cpp	/^namespace sensor$/;"	n	namespace:ipmi	file:
sensor	entity_map_json.cpp	/^namespace sensor$/;"	n	namespace:ipmi	file:
sensor	entity_map_json.hpp	/^namespace sensor$/;"	n	namespace:ipmi
sensor	include/ipmid/types.hpp	/^namespace sensor$/;"	n	namespace:ipmi
sensor	sensordatahandler.cpp	/^namespace sensor$/;"	n	namespace:ipmi	file:
sensor	sensordatahandler.hpp	/^namespace sensor$/;"	n	namespace:ipmi
sensor	sensorhandler.cpp	/^namespace sensor$/;"	n	namespace:ipmi	file:
sensor	sensorhandler.hpp	/^namespace sensor$/;"	n	namespace:ipmi
sensor	storagehandler.cpp	/^namespace sensor$/;"	n	namespace:ipmi	file:
sensor	test/entitymap_json_unittest.cpp	/^namespace sensor$/;"	n	namespace:ipmi	file:
sensor-gen.cpp	Makefile.am	/^sensor-gen.cpp: scripts\/writesensor.mako.cpp scripts\/sensor_gen.py @SENSOR_YAML_GEN@$/;"	t
sensorID	include/ipmid/types.hpp	/^    Id sensorID;$/;"	m	struct:ipmi::sensor::SelData	typeref:typename:Id
sensorInterface	dbus-sdr/sensorcommands.cpp	/^static constexpr const char* sensorInterface =$/;"	v	namespace:ipmi::sensor	typeref:typename:const char *	file:
sensorInterface	include/ipmid/types.hpp	/^    DbusInterface sensorInterface;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:DbusInterface
sensorMapSdrUpdatePeriod	dbus-sdr/sensorcommands.cpp	/^static constexpr int sensorMapSdrUpdatePeriod = 60;$/;"	v	namespace:ipmi	typeref:typename:int	file:
sensorMapUpdatePeriod	dbus-sdr/sensorcommands.cpp	/^static constexpr int sensorMapUpdatePeriod = 10;$/;"	v	namespace:ipmi	typeref:typename:int	file:
sensorName	include/dbus-sdr/sdrutils.hpp	/^    std::string sensorName;$/;"	m	class:details::IPMIStatsEntry	typeref:typename:std::string
sensorName	include/ipmid/types.hpp	/^    SensorName sensorName;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:SensorName
sensorNameFunc	include/ipmid/types.hpp	/^    std::function<SensorName(const Info&)> sensorNameFunc;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:std::function<SensorName (const Info &)>
sensorNum	selutility.hpp	/^    uint8_t sensorNum;        \/\/!< Sensor Number.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint8_t
sensorNumber	sensorhandler.hpp	/^    uint8_t sensorNumber;$/;"	m	struct:PlatformEventRequest	typeref:typename:uint8_t
sensorPath	include/ipmid/types.hpp	/^    InstancePath sensorPath;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:InstancePath
sensorRES_t	ipmisensor.cpp	/^struct sensorRES_t$/;"	s	file:
sensorReadingType	include/ipmid/types.hpp	/^    ReadingType sensorReadingType;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:ReadingType
sensorScanningEnable	include/dbus-sdr/sensorcommands.hpp	/^    sensorScanningEnable = (1 << 6),$/;"	e	enum:IPMISensorEventEnableByte2
sensorScanningEnable	include/dbus-sdr/sensorcommands.hpp	/^    sensorScanningEnable = (1 << 6),$/;"	e	enum:IPMISensorReadingByte2
sensorType	dcmihandler.hpp	/^    uint8_t sensorType;     \/\/!< Type of the sensor$/;"	m	struct:dcmi::GetSensorInfoRequest	typeref:typename:uint8_t
sensorType	dcmihandler.hpp	/^    uint8_t sensorType;     \/\/!< Type of the sensor$/;"	m	struct:dcmi::GetTempReadingsRequest	typeref:typename:uint8_t
sensorType	include/ipmid/types.hpp	/^    Type sensorType;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:Type
sensorType	include/ipmid/types.hpp	/^    Type sensorType;$/;"	m	struct:ipmi::sensor::SelData	typeref:typename:Type
sensorType	selutility.hpp	/^    uint8_t sensorType;       \/\/!< Sensor Type.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint8_t
sensorType	sensorhandler.hpp	/^    uint8_t sensorType;$/;"	m	struct:PlatformEventRequest	typeref:typename:uint8_t
sensorTypemap_t	sensorhandler.cpp	/^struct sensorTypemap_t$/;"	s	file:
sensorTypes	include/dbus-sdr/sdrutils.hpp	/^    sensorTypes{{{"temperature", SensorTypeCodes::temperature},$/;"	v	typeref:typename:const boost::container::flat_map<const char *,SensorTypeCodes,CmpStr>
sensorUnits	dbus-sdr/sensorcommands.cpp	/^    sensorUnits{{{"temperature", SensorUnits::degreesC},$/;"	v	namespace:ipmi	typeref:typename:const boost::container::flat_map<const char *,SensorUnits,CmpStr>	file:
sensor_capabilities	sensorhandler.hpp	/^    uint8_t sensor_capabilities; \/\/ no macro support$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
sensor_data_t	sensorhandler.cpp	/^struct sensor_data_t$/;"	s	file:
sensor_event	include/ipmid/api-types.hpp	/^namespace sensor_event$/;"	n	namespace:ipmi
sensor_info	dcmihandler.cpp	/^namespace sensor_info$/;"	n	namespace:dcmi	file:
sensor_info	dcmihandler.hpp	/^namespace sensor_info$/;"	n	namespace:dcmi
sensor_initialization	sensorhandler.hpp	/^    uint8_t sensor_initialization;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
sensor_max	sensorhandler.hpp	/^    uint8_t sensor_max;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
sensor_min	sensorhandler.hpp	/^    uint8_t sensor_min;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
sensor_number	ipmisensor.cpp	/^    uint8_t sensor_number;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
sensor_number	sensorhandler.hpp	/^    uint8_t sensor_number;$/;"	m	struct:get_sdr::SensorDataRecordKey	typeref:typename:uint8_t
sensor_reading	ipmisensor.cpp	/^    uint8_t sensor_reading;$/;"	m	struct:sensorRES_t	typeref:typename:uint8_t	file:
sensor_record_sharing_1	sensorhandler.hpp	/^    uint8_t sensor_record_sharing_1;$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:uint8_t
sensor_record_sharing_2	sensorhandler.hpp	/^    uint8_t sensor_record_sharing_2;$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:uint8_t
sensor_scanning_state	sensorhandler.hpp	/^inline void sensor_scanning_state(bool enabled, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
sensor_type	ipmisensor.cpp	/^    uint8_t sensor_type;$/;"	m	struct:lookup_t	typeref:typename:uint8_t	file:
sensor_type	sensorhandler.hpp	/^    uint8_t sensor_type;$/;"	m	struct:get_sdr::SensorDataEventRecordBody	typeref:typename:uint8_t
sensor_type	sensorhandler.hpp	/^    uint8_t sensor_type;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
sensor_units_1	sensorhandler.hpp	/^    uint8_t sensor_units_1;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
sensor_units_2_base	sensorhandler.hpp	/^    uint8_t sensor_units_2_base;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
sensor_units_3_modifier	sensorhandler.hpp	/^    uint8_t sensor_units_3_modifier;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
sensorcommands_unittest_CPPFLAGS	test/Makefile.am	/^sensorcommands_unittest_CPPFLAGS = \\$/;"	m
sensorcommands_unittest_CXXFLAGS	test/Makefile.am	/^sensorcommands_unittest_CXXFLAGS = \\$/;"	m
sensorcommands_unittest_LDADD	test/Makefile.am	/^sensorcommands_unittest_LDADD = $(top_builddir)\/dbus-sdr\/sensorutils.o$/;"	m
sensorcommands_unittest_LDFLAGS	test/Makefile.am	/^sensorcommands_unittest_LDFLAGS = \\$/;"	m
sensorcommands_unittest_SOURCES	test/Makefile.am	/^sensorcommands_unittest_SOURCES = %reldir%\/dbus-sdr\/sensorcommands_unittest.cpp$/;"	m
sensornumber	sensorhandler.hpp	/^    uint8_t sensornumber;$/;"	m	struct:dbus_interface_t	typeref:typename:uint8_t
sensortype	sensorhandler.hpp	/^    uint8_t sensortype;$/;"	m	struct:dbus_interface_t	typeref:typename:uint8_t
serial	user_channel/channel_layer.hpp	/^    serial = 0x05,$/;"	e	enum:ipmi::EChannelMediumType
serialNumber	ipmi_fru_info_area.cpp	/^static constexpr auto serialNumber = "Serial Number";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
service	settings.cpp	/^Service Objects::service(const Path& path, const Interface& interface) const$/;"	f	class:settings::Objects	typeref:typename:Service
service	transporthandler.hpp	/^    std::string service;$/;"	m	struct:ipmi::transport::ChannelParams	typeref:typename:std::string
session	include/ipmid/sessiondef.hpp	/^namespace session$/;"	n
sessionId	include/ipmid/message.hpp	/^    uint32_t sessionId;$/;"	m	struct:ipmi::Context	typeref:typename:uint32_t
sessionIntf	include/ipmid/sessiondef.hpp	/^static constexpr auto sessionIntf = "xyz.openbmc_project.Ipmi.SessionInfo";$/;"	v	namespace:session	typeref:typename:auto
sessionManagerRootPath	include/ipmid/sessiondef.hpp	/^static constexpr auto sessionManagerRootPath =$/;"	v	namespace:session	typeref:typename:auto
sessionPayloadBit	user_channel/channelcommands.cpp	/^constexpr uint16_t sessionPayloadBit(PayloadType p)$/;"	f	namespace:ipmi::__anon0398efe70110	typeref:typename:uint16_t
sessionSupportList	user_channel/channel_mgmt.cpp	/^static std::array<std::string, 4> sessionSupportList = {$/;"	v	namespace:ipmi	typeref:typename:std::array<std::string,4>	file:
sessionSupported	user_channel/channel_layer.hpp	/^    uint8_t sessionSupported;$/;"	m	struct:ipmi::ChannelInfo	typeref:typename:uint8_t
sessionSupportedString	user_channel/channel_mgmt.cpp	/^static constexpr const char* sessionSupportedString = "session_supported";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
sessionZero	include/ipmid/sessiondef.hpp	/^static constexpr size_t sessionZero = 0;$/;"	v	namespace:session	typeref:typename:size_t
session_unittest_CPPFLAGS	test/Makefile.am	/^session_unittest_CPPFLAGS = \\$/;"	m
session_unittest_CXXFLAGS	test/Makefile.am	/^session_unittest_CXXFLAGS = \\$/;"	m
session_unittest_LDFLAGS	test/Makefile.am	/^session_unittest_LDFLAGS = \\$/;"	m
session_unittest_SOURCES	test/Makefile.am	/^session_unittest_SOURCES = %reldir%\/session\/closesession_unittest.cpp$/;"	m
set	sensordatahandler.cpp	/^namespace set$/;"	n	namespace:ipmi::sensor	file:
set	sensordatahandler.hpp	/^namespace set$/;"	n	namespace:ipmi::sensor
setAccessMode	user_channel/channel_layer.hpp	/^    setAccessMode = (1 << 0),$/;"	e	enum:ipmi::AccessSetFlag
setAlertingEnabled	user_channel/channel_layer.hpp	/^    setAlertingEnabled = (1 << 3),$/;"	e	enum:ipmi::AccessSetFlag
setAssertionBytes	sensorhandler.hpp	/^inline void setAssertionBytes(uint16_t value,$/;"	f	namespace:ipmi::sensor	typeref:typename:void
setAssetTag	dcmihandler.cpp	/^ipmi_ret_t setAssetTag(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
setBootMode	chassishandler.cpp	/^static ipmi::Cc setBootMode(ipmi::Context::ptr& ctx, const Mode::Modes& mode)$/;"	f	typeref:typename:ipmi::Cc	file:
setBootSource	chassishandler.cpp	/^static ipmi_ret_t setBootSource(ipmi::Context::ptr& ctx,$/;"	f	typeref:typename:ipmi_ret_t	file:
setBootType	chassishandler.cpp	/^static ipmi::Cc setBootType(ipmi::Context::ptr& ctx, const Type::Types& type)$/;"	f	typeref:typename:ipmi::Cc	file:
setButtonEnabled	chassishandler.cpp	/^static bool setButtonEnabled(ipmi::Context::ptr& ctx,$/;"	f	typeref:typename:bool	file:
setCSPrivilegeLevels	user_channel/cipher_mgmt.cpp	/^ipmi::Cc CipherConfig::setCSPrivilegeLevels($/;"	f	class:ipmi::CipherConfig	typeref:typename:ipmi::Cc
setChannelAccessData	user_channel/channel_layer.cpp	/^Cc setChannelAccessData(const uint8_t chNum, const ChannelAccess& chAccessData,$/;"	f	namespace:ipmi	typeref:typename:Cc
setChannelAccessData	user_channel/channel_mgmt.cpp	/^Cc ChannelConfig::setChannelAccessData(const uint8_t chNum,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:Cc
setChannelAccessPersistData	user_channel/channel_layer.cpp	/^Cc setChannelAccessPersistData(const uint8_t chNum,$/;"	f	namespace:ipmi	typeref:typename:Cc
setChannelAccessPersistData	user_channel/channel_mgmt.cpp	/^Cc ChannelConfig::setChannelAccessPersistData(const uint8_t chNum,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:Cc
setComplete	apphandler.cpp	/^static constexpr uint8_t setComplete = 0x0;$/;"	v	typeref:typename:uint8_t	file:
setComplete	chassishandler.cpp	/^static constexpr uint8_t setComplete = 0x0;$/;"	v	typeref:typename:uint8_t	file:
setDCMIConfParams	dcmihandler.cpp	/^ipmi_ret_t setDCMIConfParams(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
setDHCPOption	dcmihandler.cpp	/^void setDHCPOption(std::string prop, bool value)$/;"	f	namespace:dcmi	typeref:typename:void
setDHCPv4Property	transporthandler.cpp	/^void setDHCPv4Property(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
setDHCPv6Property	transporthandler.cpp	/^void setDHCPv6Property(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
setDbusProperty	libipmid/utils.cpp	/^    setDbusProperty(Context::ptr ctx, const std::string& service,$/;"	f	namespace:ipmi	typeref:typename:boost::system::error_code
setDbusProperty	libipmid/utils.cpp	/^void setDbusProperty(sdbusplus::bus::bus& bus, const std::string& service,$/;"	f	namespace:ipmi	typeref:typename:void
setDbusProperty	user_channel/channel_mgmt.cpp	/^int ChannelConfig::setDbusProperty(const std::string& service,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
setDbusProperty	user_channel/user_mgmt.cpp	/^void setDbusProperty(sdbusplus::bus::bus& bus, const std::string& service,$/;"	f	namespace:ipmi	typeref:typename:void
setDefaultChannelConfig	user_channel/channel_mgmt.cpp	/^void ChannelConfig::setDefaultChannelConfig(const uint8_t chNum,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:void
setEnabled	app/watchdog_service.cpp	/^void WatchdogService::setEnabled(bool enabled)$/;"	f	class:WatchdogService	typeref:typename:void
setExpireAction	app/watchdog_service.cpp	/^void WatchdogService::setExpireAction(Action expireAction)$/;"	f	class:WatchdogService	typeref:typename:void
setExpiredTimerUse	app/watchdog_service.cpp	/^void WatchdogService::setExpiredTimerUse(TimerUse timerUse)$/;"	f	class:WatchdogService	typeref:typename:void
setGatewayProperty	transporthandler.hpp	/^void setGatewayProperty(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
setHostNetworkData	chassishandler.cpp	/^ipmi::Cc setHostNetworkData(ipmi::message::Payload& data)$/;"	f	typeref:typename:ipmi::Cc
setIPv6AcceptRA	transporthandler.cpp	/^void setIPv6AcceptRA(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
setInProgress	apphandler.cpp	/^static constexpr uint8_t setInProgress = 0x1;$/;"	v	typeref:typename:uint8_t	file:
setInProgress	chassishandler.cpp	/^static constexpr uint8_t setInProgress = 0x1;$/;"	v	typeref:typename:uint8_t	file:
setInProgress	chassishandler.hpp	/^    setInProgress = 0x0,$/;"	e	enum:BootOptionParameter
setInProgress	chassishandler.hpp	/^    setInProgress = 3,$/;"	e	enum:BootOptionResponseSize
setInitialized	app/watchdog_service.cpp	/^void WatchdogService::setInitialized(bool initialized)$/;"	f	class:WatchdogService	typeref:typename:void
setInterval	app/watchdog_service.cpp	/^void WatchdogService::setInterval(uint64_t interval)$/;"	f	class:WatchdogService	typeref:typename:void
setIoContext	libipmid/sdbus-asio.cpp	/^void setIoContext(std::shared_ptr<boost::asio::io_context>& newIo)$/;"	f	typeref:typename:void
setLan	transporthandler.cpp	/^RspType<> setLan(Context::ptr ctx, uint4_t channelBits, uint4_t reserved1,$/;"	f	namespace:ipmi::transport	typeref:typename:RspType<>
setLanOem	transporthandler.cpp	/^RspType<> setLanOem(uint8_t channel, uint8_t parameter, message::Payload& req)$/;"	f	namespace:ipmi::transport	typeref:typename:RspType<>
setMACProperty	transporthandler.cpp	/^void setMACProperty(sdbusplus::bus::bus& bus, const ChannelParams& params,$/;"	f	namespace:ipmi::transport	typeref:typename:void
setMgmntCtrlIdStr	dcmihandler.cpp	/^ipmi_ret_t setMgmntCtrlIdStr(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
setMsgAuthEnabled	user_channel/channel_layer.hpp	/^    setMsgAuthEnabled = (1 << 2),$/;"	e	enum:ipmi::AccessSetFlag
setNmiProperty	chassishandler.cpp	/^int setNmiProperty(const bool value)$/;"	f	typeref:typename:int
setOffset	sensorhandler.hpp	/^inline void setOffset(uint8_t offset, ipmi::sensor::GetSensorResponse* resp)$/;"	f	namespace:ipmi::sensor	typeref:typename:void
setParmVersion	chassishandler.cpp	/^static constexpr uint8_t setParmVersion = 0x01;$/;"	v	typeref:typename:uint8_t	file:
setPassword	user_channel/usercommands.cpp	/^static constexpr uint8_t setPassword = 0x02;$/;"	v	namespace:ipmi	typeref:typename:uint8_t	file:
setPcap	dcmihandler.cpp	/^void setPcap(sdbusplus::bus::bus& bus, const uint32_t powerCap)$/;"	f	namespace:dcmi	typeref:typename:void
setPcapEnable	dcmihandler.cpp	/^void setPcapEnable(sdbusplus::bus::bus& bus, bool enabled)$/;"	f	namespace:dcmi	typeref:typename:void
setPowerLimit	dcmihandler.cpp	/^ipmi_ret_t setPowerLimit(ipmi_netfn_t netfn, ipmi_cmd_t cmd,$/;"	f	typeref:typename:ipmi_ret_t
setPrivLimit	user_channel/channel_layer.hpp	/^    setPrivLimit = (1 << 4),$/;"	e	enum:ipmi::AccessSetFlag
setPropertiesMethod	user_channel/user_mgmt.cpp	/^static constexpr const char* setPropertiesMethod = "Set";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
setProperty	app/watchdog_service.cpp	/^void WatchdogService::setProperty(const std::string& key, const T& val)$/;"	f	class:WatchdogService	typeref:typename:void
setReading	sensorhandler.hpp	/^inline void setReading(uint8_t value, ipmi::sensor::GetSensorResponse* resp)$/;"	f	namespace:ipmi::sensor	typeref:typename:void
setSdBus	libipmid/sdbus-asio.cpp	/^void setSdBus(std::shared_ptr<sdbusplus::asio::connection>& newBus)$/;"	f	typeref:typename:void
setSelect	dcmihandler.hpp	/^    uint8_t setSelect;   \/\/!< Set Selector (use 00h for parameters that only$/;"	m	struct:dcmi::SetConfParamsRequest	typeref:typename:uint8_t
setSelect	dcmihandler.hpp	/^    uint8_t setSelect;   \/\/!< Set Selector. Selects a given set of parameters$/;"	m	struct:dcmi::GetConfParamsRequest	typeref:typename:uint8_t
setSessionState	apphandler.cpp	/^uint8_t setSessionState(std::shared_ptr<sdbusplus::asio::connection>& busp,$/;"	f	typeref:typename:uint8_t
setSpecialUserPassword	user_channel/user_mgmt.cpp	/^Cc UserAccess::setSpecialUserPassword(const std::string& userName,$/;"	f	class:ipmi::UserAccess	typeref:typename:Cc
setStatus	transporthandler.cpp	/^static std::unordered_map<uint8_t, SetStatus> setStatus;$/;"	v	namespace:ipmi::transport	typeref:typename:std::unordered_map<uint8_t,SetStatus>	file:
setTimerUse	app/watchdog_service.cpp	/^void WatchdogService::setTimerUse(TimerUse timerUse)$/;"	f	class:WatchdogService	typeref:typename:void
setUnitFieldsForObject	sensorhandler.cpp	/^void setUnitFieldsForObject(const ipmi::sensor::Info* info,$/;"	f	typeref:typename:void
setUserAuthEnabled	user_channel/channel_layer.hpp	/^    setUserAuthEnabled = (1 << 1),$/;"	e	enum:ipmi::AccessSetFlag
setUserEnabledState	user_channel/user_mgmt.cpp	/^Cc UserAccess::setUserEnabledState(const uint8_t userId,$/;"	f	class:ipmi::UserAccess	typeref:typename:Cc
setUserInfo	user_channel/user_mgmt.cpp	/^void UserAccess::setUserInfo(const uint8_t userId, UserInfo* userInfo)$/;"	f	class:ipmi::UserAccess	typeref:typename:void
setUserName	user_channel/user_mgmt.cpp	/^Cc UserAccess::setUserName(const uint8_t userId, const std::string& userName)$/;"	f	class:ipmi::UserAccess	typeref:typename:Cc
setUserPassword	user_channel/user_mgmt.cpp	/^Cc UserAccess::setUserPassword(const uint8_t userId, const char* userPassword)$/;"	f	class:ipmi::UserAccess	typeref:typename:Cc
setUserPayloadAccess	user_channel/user_mgmt.cpp	/^Cc UserAccess::setUserPayloadAccess(const uint8_t chNum,$/;"	f	class:ipmi::UserAccess	typeref:typename:Cc
setUserPrivilegeAccess	user_channel/user_mgmt.cpp	/^Cc UserAccess::setUserPrivilegeAccess(const uint8_t userId, const uint8_t chNum,$/;"	f	class:ipmi::UserAccess	typeref:typename:Cc
set_accuracy	sensorhandler.hpp	/^inline void set_accuracy(uint16_t acc, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_accuracy_exp	sensorhandler.hpp	/^inline void set_accuracy_exp(uint8_t exp, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_analog_data_format	sensorhandler.hpp	/^inline void set_analog_data_format(uint8_t format,$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_b	sensorhandler.hpp	/^inline void set_b(uint16_t b, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_b_exp	sensorhandler.hpp	/^inline void set_b_exp(uint8_t exp, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_device_id_strlen	sensorhandler.hpp	/^inline void set_device_id_strlen(uint8_t len, SensorDataFruRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_entity_instance_number	sensorhandler.hpp	/^inline void set_entity_instance_number(uint8_t n,$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_entity_logical_container	sensorhandler.hpp	/^inline void set_entity_logical_container(SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_entity_physical_entity	sensorhandler.hpp	/^inline void set_entity_physical_entity(SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_flags	sensorhandler.hpp	/^inline void set_flags(bool isList, bool isLinked,$/;"	f	namespace:get_sdr::key	typeref:typename:void
set_id_strlen	sensorhandler.hpp	/^inline void set_id_strlen(uint8_t len, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_id_type	sensorhandler.hpp	/^inline void set_id_type(uint8_t type, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_m	sensorhandler.hpp	/^inline void set_m(uint16_t m, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_modifier_operation	sensorhandler.hpp	/^inline void set_modifier_operation(uint8_t op, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_next_record_id	sensorhandler.hpp	/^inline void set_next_record_id(uint16_t next, GetSdrResp* resp)$/;"	f	namespace:get_sdr::response	typeref:typename:void
set_owner_id_address	sensorhandler.hpp	/^inline void set_owner_id_address(uint8_t addr, SensorDataRecordKey* key)$/;"	f	namespace:get_sdr::key	typeref:typename:void
set_owner_id_bmc	sensorhandler.hpp	/^inline void set_owner_id_bmc(SensorDataRecordKey* key)$/;"	f	namespace:get_sdr::key	typeref:typename:void
set_owner_id_ipmb	sensorhandler.hpp	/^inline void set_owner_id_ipmb(SensorDataRecordKey* key)$/;"	f	namespace:get_sdr::key	typeref:typename:void
set_owner_id_system_sw	sensorhandler.hpp	/^inline void set_owner_id_system_sw(SensorDataRecordKey* key)$/;"	f	namespace:get_sdr::key	typeref:typename:void
set_owner_lun	sensorhandler.hpp	/^inline void set_owner_lun(uint8_t lun, SensorDataRecordKey* key)$/;"	f	namespace:get_sdr::key	typeref:typename:void
set_owner_lun_channel	sensorhandler.hpp	/^inline void set_owner_lun_channel(uint8_t channel, SensorDataRecordKey* key)$/;"	f	namespace:get_sdr::key	typeref:typename:void
set_percentage	sensorhandler.hpp	/^inline void set_percentage(SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_r_exp	sensorhandler.hpp	/^inline void set_r_exp(uint8_t exp, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_rate_unit	sensorhandler.hpp	/^inline void set_rate_unit(uint8_t unit, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_readable_mask	sensorhandler.hpp	/^inline void set_readable_mask(uint8_t mask, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_record_id	sensorhandler.hpp	/^inline void set_record_id(int id, SensorDataRecordHeader* hdr)$/;"	f	namespace:get_sdr::header	typeref:typename:void
set_sensor_dbus_state_fwprogress	ipmisensor.cpp	/^int set_sensor_dbus_state_fwprogress(const sensorRES_t* pRec,$/;"	f	typeref:typename:int
set_sensor_dbus_state_osbootcount	ipmisensor.cpp	/^int set_sensor_dbus_state_osbootcount(const sensorRES_t* pRec,$/;"	f	typeref:typename:int
set_sensor_dbus_state_s	sensorhandler.cpp	/^int set_sensor_dbus_state_s(uint8_t number, const char* method,$/;"	f	typeref:typename:int
set_sensor_dbus_state_s	testit.cpp	/^int set_sensor_dbus_state_s(unsigned char number, const char* member,$/;"	f	typeref:typename:int
set_sensor_dbus_state_simple	ipmisensor.cpp	/^int set_sensor_dbus_state_simple(const sensorRES_t* pRec,$/;"	f	typeref:typename:int
set_sensor_dbus_state_system_event	ipmisensor.cpp	/^int set_sensor_dbus_state_system_event(const sensorRES_t* pRec,$/;"	f	typeref:typename:int
set_sensor_dbus_state_y	sensorhandler.cpp	/^int set_sensor_dbus_state_y(uint8_t number, const char* method,$/;"	f	typeref:typename:int
set_sensor_dbus_state_y	testit.cpp	/^int set_sensor_dbus_state_y(unsigned char number, char const* member,$/;"	f	typeref:typename:int
set_sensor_dir	sensorhandler.hpp	/^inline void set_sensor_dir(uint8_t dir, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
set_tolerance	sensorhandler.hpp	/^inline void set_tolerance(uint8_t tol, SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
setting	settings.cpp	/^std::tuple<Path, OneTimeEnabled> setting(const Objects& objects,$/;"	f	namespace:settings::boot	typeref:typename:std::tuple<Path,OneTimeEnabled>
settings	settings.cpp	/^namespace settings$/;"	n	file:
settings	settings.hpp	/^namespace settings$/;"	n
settings_intf_name	chassishandler.cpp	/^const char* settings_intf_name = "org.freedesktop.DBus.Properties";$/;"	v	typeref:typename:const char *
settings_object_name	chassishandler.cpp	/^const char* settings_object_name = "\/org\/openbmc\/settings\/host0";$/;"	v	typeref:typename:const char *
setupInProgress	include/ipmid/sessiondef.hpp	/^    setupInProgress,    \/\/ Session Setup Sequence is progressing$/;"	e	enum:session::State
shadow	user_channel/shadowlock.hpp	/^namespace shadow$/;"	n	namespace:phosphor::user
shared	user_channel/channel_layer.hpp	/^    shared = 3,$/;"	e	enum:ipmi::EChannelAccessMode
shouldReport	ipmisensor.cpp	/^bool shouldReport(uint8_t sensorType, int offset, int* index)$/;"	f	typeref:typename:bool
sigHndlrLock	user_channel/channel_mgmt.hpp	/^    boost::interprocess::file_lock sigHndlrLock;$/;"	m	class:ipmi::ChannelConfig	typeref:typename:boost::interprocess::file_lock
sigHndlrLock	user_channel/user_mgmt.hpp	/^    boost::interprocess::file_lock sigHndlrLock;$/;"	m	class:ipmi::UserAccess	typeref:typename:boost::interprocess::file_lock
sign	dcmihandler.hpp	/^    uint8_t sign : 1;        \/\/!< Sign bit$/;"	m	struct:dcmi::temp_readings::Response	typeref:typename:uint8_t:1
signal	libipmid/signals.cpp	/^    std::unique_ptr<boost::asio::signal_set> signal;$/;"	m	class:__anonf9df85400110::SignalHandler	typeref:typename:std::unique_ptr<boost::asio::signal_set>	file:
signalFlag	user_channel/channel_mgmt.hpp	/^    uint32_t signalFlag = 0;$/;"	m	class:ipmi::ChannelConfig	typeref:typename:uint32_t
signalHndlrObject	user_channel/user_mgmt.hpp	/^    bool signalHndlrObject = false;$/;"	m	class:ipmi::UserAccess	typeref:typename:bool
signalHndlrObjectState	user_channel/channel_mgmt.hpp	/^    bool signalHndlrObjectState = false;$/;"	m	class:ipmi::ChannelConfig	typeref:typename:bool
signals	libipmid/signals.cpp	/^std::vector<std::unique_ptr<SignalHandler>> signals;$/;"	v	namespace:__anonf9df85400110	typeref:typename:std::vector<std::unique_ptr<SignalHandler>>
signature	user_channel/passwd_mgr.cpp	/^    char signature[10];$/;"	m	struct:ipmi::MetaPassStruct	typeref:typename:char[10]	file:
single	user_channel/channel_layer.hpp	/^    single = 1,$/;"	e	enum:ipmi::EChannelSessSupported
singletonUnderTest	test/oemrouter_unittest.cpp	/^static oem::Router* singletonUnderTest;$/;"	v	typeref:typename:oem::Router *	file:
size	dcmihandler.hpp	/^    uint8_t size;        \/\/!< Size of capability array in bytes.$/;"	m	struct:dcmi::DCMICapEntry	typeref:typename:uint8_t
size	include/ipmid/message.hpp	/^    size_t size() const$/;"	f	struct:ipmi::message::Payload	typeref:typename:size_t
sizeVersion	chassishandler.cpp	/^constexpr size_t sizeVersion = 2;$/;"	v	typeref:typename:size_t
size_type	user_channel/user_mgmt.hpp	/^    typedef size_t size_type;$/;"	t	class:ipmi::SecureAllocator	typeref:typename:size_t
skip	include/ipmid/types.hpp	/^    SkipAssertion skip;$/;"	m	struct:ipmi::sensor::Values	typeref:typename:SkipAssertion
slaveAddr	apphandler.cpp	/^    uint8_t slaveAddr;$/;"	m	struct:__anon1df7a8b50108	typeref:typename:uint8_t	file:
slaveAddrMask	apphandler.cpp	/^    uint8_t slaveAddrMask;$/;"	m	struct:__anon1df7a8b50108	typeref:typename:uint8_t	file:
slaveAddrMaskStr	apphandler.cpp	/^static constexpr const char* slaveAddrMaskStr = "slaveAddrMask";$/;"	v	typeref:typename:const char *	file:
slaveAddrStr	apphandler.cpp	/^static constexpr const char* slaveAddrStr = "slaveAddr";$/;"	v	typeref:typename:const char *	file:
slaveAddress	include/dbus-sdr/storagecommands.hpp	/^    uint8_t slaveAddress;$/;"	m	struct:Type12Record	typeref:typename:uint8_t
sleep	apphandler.cpp	/^    sleep = 0x08,$/;"	e	enum:acpi_state::PowerState	file:
smallChannelSize	user_channel/channel_mgmt.cpp	/^static constexpr size_t smallChannelSize = 64;$/;"	v	namespace:ipmi	typeref:typename:size_t	file:
smallChunkSize	apphandler.cpp	/^static constexpr size_t smallChunkSize = 14;$/;"	v	typeref:typename:size_t	file:
smbusV11	user_channel/channel_layer.hpp	/^    smbusV11 = 0x08,$/;"	e	enum:ipmi::EChannelMediumType
smbusV20	user_channel/channel_layer.hpp	/^    smbusV20 = 0x09,$/;"	e	enum:ipmi::EChannelMediumType
smic	user_channel/channel_layer.hpp	/^    smic = 0x06,$/;"	e	enum:ipmi::EChannelProtocolType
softoff	configure.ac	/^AC_ARG_ENABLE([softoff],$/;"	e
softwareRoot	apphandler.cpp	/^static constexpr auto softwareRoot = "\/xyz\/openbmc_project\/software";$/;"	v	typeref:typename:auto	file:
sourceDbusToIpmi	chassishandler.cpp	/^std::map<Source::Sources, IpmiValue> sourceDbusToIpmi = {$/;"	v	namespace:boot_options	typeref:typename:std::map<Source::Sources,IpmiValue>
sourceIpmiToDbus	chassishandler.cpp	/^std::map<IpmiValue, Source::Sources> sourceIpmiToDbus = {$/;"	v	namespace:boot_options	typeref:typename:std::map<IpmiValue,Source::Sources>
specVersion	ipmi_fru_info_area.cpp	/^static constexpr auto specVersion = 0x1;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
standardPayloadBit	user_channel/channelcommands.cpp	/^constexpr uint16_t standardPayloadBit(PayloadType p)$/;"	f	namespace:ipmi::__anon0398efe70110	typeref:typename:uint16_t
startMatch	dbus-sdr/storagecommands.cpp	/^void startMatch(void)$/;"	f	namespace:ipmi::storage	typeref:typename:void
startTimer	softoff/softoff.cpp	/^int SoftPowerOff::startTimer(const std::chrono::microseconds& usec)$/;"	f	class:phosphor::ipmi::SoftPowerOff	typeref:typename:int
stateChanged	apphandler.cpp	/^static constexpr uint8_t stateChanged = 0x80;$/;"	v	namespace:acpi_state	typeref:typename:uint8_t	file:
stdCipherSuite	app/channel.hpp	/^static constexpr auto stdCipherSuite = 0xC0;$/;"	v	namespace:cipher	typeref:typename:auto
stdPayloadEnables1	user_channel/user_layer.hpp	/^    std::bitset<payloadsPerByte> stdPayloadEnables1;$/;"	m	struct:ipmi::PayloadAccess	typeref:typename:std::bitset<payloadsPerByte>
stdPayloadEnables2Reserved	user_channel/user_layer.hpp	/^    std::bitset<payloadsPerByte> stdPayloadEnables2Reserved;$/;"	m	struct:ipmi::PayloadAccess	typeref:typename:std::bitset<payloadsPerByte>
stdPayloadStr	user_channel/user_mgmt.cpp	/^static constexpr const char* stdPayloadStr = "std_payload";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
stop_soft_off_timer	chassishandler.cpp	/^int stop_soft_off_timer()$/;"	f	typeref:typename:int
storage	dbus-sdr/storagecommands.cpp	/^namespace storage$/;"	n	namespace:ipmi	file:
storage	include/dbus-sdr/storagecommands.hpp	/^namespace storage$/;"	n	namespace:ipmi
storage	include/ipmid/api-types.hpp	/^namespace storage$/;"	n	namespace:ipmi
str	elog-errors.hpp	/^    static constexpr auto str = "ADDRESS=0x%X";$/;"	m	struct:phosphor::logging::org::open_power::Host::Access::_ReadCFAM::ADDRESS	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "ADDRESS=0x%X";$/;"	m	struct:phosphor::logging::org::open_power::Host::Access::_WriteCFAM::ADDRESS	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "ARGUMENT_NAME=%s";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_NAME	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "ARGUMENT_VALUE=%s";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_VALUE	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "BAR_DATA=%s";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::_Bar::BAR_DATA	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "CALLOUT_DEVICE_PATH=%s";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_DEVICE_PATH	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "CALLOUT_DEVICE_PATH_TEST=%s";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_DEVICE_PATH_TEST	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "CALLOUT_ERRNO=%d";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_ERRNO	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "CALLOUT_ERRNO_TEST=%d";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_ERRNO_TEST	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "CALLOUT_GPIO_NUM=%u";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_GPIO::CALLOUT_GPIO_NUM	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "CALLOUT_IIC_ADDR=0x%hx";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_ADDR	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "CALLOUT_IIC_BUS=%s";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_BUS	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "CALLOUT_INVENTORY_PATH=%s";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Inventory::CALLOUT_INVENTORY_PATH	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "CALLOUT_IPMI_SENSOR_NUM=%u";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IPMISensor::CALLOUT_IPMI_SENSOR_NUM	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "DEV_ADDR=0x%.8X";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestCallout::DEV_ADDR	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "DEV_ADDR=0x%.8X";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ADDR	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "DEV_ID=%u";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ID	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "DEV_NAME=%s";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_NAME	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "ERRNO=%d";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::ERRNO	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "ERRNO=%d";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::ERRNO	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "ERRNO=%d";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::ERRNO	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "ERRNUM=0x%.4X";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::ERRNUM	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "ESEL=%s";$/;"	m	struct:phosphor::logging::org::open_power::Host::_Event::ESEL	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "ESEL=%s";$/;"	m	struct:phosphor::logging::org::open_power::Host::_MaintenanceProcedure::ESEL	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "FILE_NAME=%s";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_NAME	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "FILE_PATH=%s";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_PATH	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "FOO_DATA=%s";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::_Foo::FOO_DATA	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "OFFSET=%ll";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::OFFSET	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "PATH=%s";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::PATH	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "PATH=%s";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::PATH	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "PATH=%s";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::PATH	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "PROCEDURE=%u";$/;"	m	struct:phosphor::logging::org::open_power::Common::Callout::_Procedure::PROCEDURE	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "REASON = %s";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::_QuotaExceeded::REASON	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "STRING=%s";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_AutoTestSimple::STRING	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "TIMEOUT_IN_MSEC=%llu";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::_Timeout::TIMEOUT_IN_MSEC	typeref:typename:auto
str	elog-errors.hpp	/^    static constexpr auto str = "WHENCE=%d";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::WHENCE	typeref:typename:auto
strEventDir	selutility.cpp	/^constexpr auto strEventDir = "EVENT_DIR";$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
strGenerateId	selutility.cpp	/^constexpr auto strGenerateId = "GENERATOR_ID";$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
strLen	dcmihandler.hpp	/^    uint8_t strLen; \/\/!< ID string length.$/;"	m	struct:dcmi::GetMgmntCtrlIdStrResponse	typeref:typename:uint8_t
strRecordType	selutility.cpp	/^constexpr auto strRecordType = "RECORD_TYPE";$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
strSensorData	selutility.cpp	/^constexpr auto strSensorData = "SENSOR_DATA";$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
strSensorPath	selutility.cpp	/^constexpr auto strSensorPath = "SENSOR_PATH";$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ADDRESS";$/;"	m	struct:phosphor::logging::org::open_power::Host::Access::_ReadCFAM::ADDRESS	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ADDRESS";$/;"	m	struct:phosphor::logging::org::open_power::Host::Access::_WriteCFAM::ADDRESS	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ARGUMENT_NAME";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_NAME	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ARGUMENT_VALUE";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_VALUE	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "BAR_DATA";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::_Bar::BAR_DATA	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "CALLOUT_DEVICE_PATH";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_DEVICE_PATH	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "CALLOUT_DEVICE_PATH_TEST";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_DEVICE_PATH_TEST	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "CALLOUT_ERRNO";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_ERRNO	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "CALLOUT_ERRNO_TEST";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_ERRNO_TEST	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "CALLOUT_GPIO_NUM";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_GPIO::CALLOUT_GPIO_NUM	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "CALLOUT_IIC_ADDR";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_ADDR	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "CALLOUT_IIC_BUS";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_BUS	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "CALLOUT_INVENTORY_PATH";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Inventory::CALLOUT_INVENTORY_PATH	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "CALLOUT_IPMI_SENSOR_NUM";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IPMISensor::CALLOUT_IPMI_SENSOR_NUM	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "DEV_ADDR";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestCallout::DEV_ADDR	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "DEV_ADDR";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ADDR	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "DEV_ID";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ID	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "DEV_NAME";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_NAME	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ERRNO";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::ERRNO	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ERRNO";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::ERRNO	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ERRNO";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::ERRNO	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ERRNUM";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::ERRNUM	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ESEL";$/;"	m	struct:phosphor::logging::org::open_power::Host::_Event::ESEL	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "ESEL";$/;"	m	struct:phosphor::logging::org::open_power::Host::_MaintenanceProcedure::ESEL	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "FILE_NAME";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_NAME	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "FILE_PATH";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_PATH	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "FOO_DATA";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::_Foo::FOO_DATA	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "OFFSET";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::OFFSET	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "PATH";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::PATH	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "PATH";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::PATH	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "PATH";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::PATH	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "PROCEDURE";$/;"	m	struct:phosphor::logging::org::open_power::Common::Callout::_Procedure::PROCEDURE	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "REASON ";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::_QuotaExceeded::REASON	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "STRING";$/;"	m	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_AutoTestSimple::STRING	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "TIMEOUT_IN_MSEC";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::_Timeout::TIMEOUT_IN_MSEC	typeref:typename:auto
str_short	elog-errors.hpp	/^    static constexpr auto str_short = "WHENCE";$/;"	m	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::WHENCE	typeref:typename:auto
straightPasswd	user_channel/channel_layer.hpp	/^    straightPasswd = (1 << 0x4),$/;"	e	enum:ipmi::EAuthType
stringToAddr	transporthandler.hpp	/^typename AddrFamily<family>::addr stringToAddr(const char* address)$/;"	f	namespace:ipmi::transport	typeref:typename:AddrFamily<family>::addr
stringToMAC	transporthandler.cpp	/^ether_addr stringToMAC(const char* mac)$/;"	f	namespace:ipmi::transport	typeref:typename:ether_addr
supported_assertions	sensorhandler.hpp	/^    uint8_t supported_assertions[2];          \/\/ no macro support$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t[2]
supported_deassertions	sensorhandler.hpp	/^    uint8_t supported_deassertions[2];        \/\/ no macro support$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t[2]
syncNetworkChannelConfig	user_channel/channel_mgmt.cpp	/^int ChannelConfig::syncNetworkChannelConfig()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
sysACPIProp	apphandler.cpp	/^const static constexpr char* sysACPIProp = "SysACPIStatus";$/;"	v	namespace:acpi_state	typeref:typename:const char *	file:
sysInfoParamStore	apphandler.cpp	/^static std::unique_ptr<SysInfoParamStore> sysInfoParamStore;$/;"	v	typeref:typename:std::unique_ptr<SysInfoParamStore>	file:
sysInfoReadSystemName	apphandler.cpp	/^static std::string sysInfoReadSystemName()$/;"	f	typeref:typename:std::string	file:
sysPowerState	apphandler.cpp	/^    sysPowerState = 0x00,$/;"	e	enum:acpi_state::PowerStateType	file:
systemBusName	dcmihandler.hpp	/^static constexpr auto systemBusName = "org.freedesktop.systemd1";$/;"	v	namespace:dcmi	typeref:typename:auto
systemEvent	include/dbus-sdr/storagecommands.hpp	/^static constexpr uint8_t systemEvent = 0x02;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:uint8_t
systemEventRecord	selutility.cpp	/^constexpr auto systemEventRecord = 0x02;$/;"	v	namespace:__anon86449a6e0110	typeref:typename:auto
systemEventSize	include/dbus-sdr/storagecommands.hpp	/^static constexpr size_t systemEventSize = 3;$/;"	v	namespace:dynamic_sensors::ipmi::sel	typeref:typename:size_t
systemEventType	dbus-sdr/storagecommands.cpp	/^using systemEventType = std::tuple<$/;"	t	namespace:ipmi::storage	file:
systemInterface	user_channel/channel_layer.hpp	/^    systemInterface = 0x0C,$/;"	e	enum:ipmi::EChannelMediumType
systemIntf	dcmihandler.hpp	/^static constexpr auto systemIntf = "org.freedesktop.systemd1.Manager";$/;"	v	namespace:dcmi	typeref:typename:auto
systemPath	dcmihandler.hpp	/^static constexpr auto systemPath = "\/org\/freedesktop\/systemd1";$/;"	v	namespace:dcmi	typeref:typename:auto
tMode	user_channel/channel_layer.hpp	/^    tMode = 0x09,$/;"	e	enum:ipmi::EChannelProtocolType
tagLength	dcmihandler.hpp	/^    uint8_t tagLength; \/\/!< Total asset tag length.$/;"	m	struct:dcmi::GetAssetTagResponse	typeref:typename:uint8_t
tagLength	dcmihandler.hpp	/^    uint8_t tagLength; \/\/!< Total asset tag length.$/;"	m	struct:dcmi::SetAssetTagResponse	typeref:typename:uint8_t
tearDownInProgress	include/ipmid/sessiondef.hpp	/^    tearDownInProgress, \/\/ When Closing Session$/;"	e	enum:session::State
temp_readings	dcmihandler.cpp	/^namespace temp_readings$/;"	n	namespace:dcmi	file:
temp_readings	dcmihandler.hpp	/^namespace temp_readings$/;"	n	namespace:dcmi
temperature	dcmihandler.hpp	/^    uint8_t temperature : 7; \/\/!< Temperature reading in Celsius$/;"	m	struct:dcmi::temp_readings::Response	typeref:typename:uint8_t:7
temperature	include/dbus-sdr/sdrutils.hpp	/^    temperature = 0x1,$/;"	e	enum:SensorTypeCodes
temperatureSensorType	dcmihandler.hpp	/^static constexpr auto temperatureSensorType = 0x01;$/;"	v	namespace:dcmi	typeref:typename:auto
temporaryOn	chassishandler.hpp	/^    temporaryOn = 0x1,$/;"	e	enum:ChassisIDState
testBounds	test/dbus-sdr/sensorcommands_unittest.cpp	/^void testBounds(double yMin, double yMax, bool bExpectedOutcome = true)$/;"	f	typeref:typename:void
testPassword	user_channel/usercommands.cpp	/^static constexpr uint8_t testPassword = 0x03;$/;"	v	namespace:ipmi	typeref:typename:uint8_t	file:
testRanges	test/dbus-sdr/sensorcommands_unittest.cpp	/^void testRanges(void)$/;"	f	typeref:typename:void
testValue	test/dbus-sdr/sensorcommands_unittest.cpp	/^void testValue(int x, double y, int16_t M, int8_t rExp, int16_t B, int8_t bExp,$/;"	f	typeref:typename:void
testprep	testit.cpp	/^void testprep(void)$/;"	f	typeref:typename:void
testrec_bootcount	testit.cpp	/^uint8_t testrec_bootcount[] = {0x01, 0x09, 0x00, 0x03, 0x00,$/;"	v	typeref:typename:uint8_t[]
testrec_bootprogress	testit.cpp	/^uint8_t testrec_bootprogress[] = {0x05, 0xa9, 0x00, 0x04, 0x00,$/;"	v	typeref:typename:uint8_t[]
testrec_invalidnumber	testit.cpp	/^uint8_t testrec_invalidnumber[] = {0x35, 0xa9, 0x00, 0x04, 0x00,$/;"	v	typeref:typename:uint8_t[]
testrec_procfailed	testit.cpp	/^uint8_t testrec_procfailed[] = {0x02, 0xa9, 0x00, 0x00, 0x00,$/;"	v	typeref:typename:uint8_t[]
testrec_sensor1	testit.cpp	/^uint8_t testrec_sensor1[] = {0x1F, 0xa9, 0x00, 0x40, 0x00,$/;"	v	typeref:typename:uint8_t[]
testrec_sensor2	testit.cpp	/^uint8_t testrec_sensor2[] = {0x1F, 0xa9, 0x00, 0x00, 0x00,$/;"	v	typeref:typename:uint8_t[]
text	ipmisensor.cpp	/^    char text[64];$/;"	m	struct:event_data_t	typeref:typename:char[64]	file:
thresholdDeassertMap	dbus-sdr/sensorcommands.cpp	/^    thresholdDeassertMap;$/;"	v	namespace:ipmi	typeref:typename:boost::container::flat_map<std::string,boost::container::flat_map<std::string,std::optional<bool>>>	file:
thresholdLevelsStates	include/ipmid/types.hpp	/^    uint8_t thresholdLevelsStates;       \/\/ threshold\/discrete sensor states$/;"	m	struct:ipmi::sensor::GetSensorResponse	typeref:typename:uint8_t
timeFrame	dcmihandler.hpp	/^    uint32_t timeFrame;        \/\/!< Statistics reporting time period in milli$/;"	m	struct:dcmi::GetPowerReadingResponse	typeref:typename:uint32_t
timeRemaining	app/watchdog_service.hpp	/^        uint64_t timeRemaining;$/;"	m	struct:WatchdogService::Properties	typeref:typename:uint64_t
timeStamp	dcmihandler.hpp	/^    uint32_t timeStamp;        \/\/!< IPMI specification based time stamp$/;"	m	struct:dcmi::GetPowerReadingResponse	typeref:typename:uint32_t
timeStamp	selutility.hpp	/^    uint32_t timeStamp;        \/\/!< Timestamp.$/;"	m	struct:ipmi::sel::SELOEMRecordTypeCD	typeref:typename:uint32_t
timeStamp	selutility.hpp	/^    uint32_t timeStamp;       \/\/!< Timestamp.$/;"	m	struct:ipmi::sel::SELEventRecord	typeref:typename:uint32_t
timeStringToRaw	ipmi_fru_info_area.cpp	/^std::time_t timeStringToRaw(const std::string& input)$/;"	f	namespace:ipmi::fru	typeref:typename:std::time_t
timer	host-cmd-manager.hpp	/^    phosphor::Timer timer;$/;"	m	class:phosphor::host::command::Manager	typeref:typename:phosphor::Timer
timer	softoff/softoff.hpp	/^    Timer timer;$/;"	m	class:phosphor::ipmi::SoftPowerOff	typeref:typename:Timer
timerNotLogFlags	app/watchdog.cpp	/^static bool timerNotLogFlags = false;$/;"	v	typeref:typename:bool	file:
timerPreTimeoutInterrupt	app/watchdog.cpp	/^static uint3_t timerPreTimeoutInterrupt = 0;$/;"	v	typeref:typename:uint3_t	file:
timerUse	app/watchdog_service.hpp	/^        TimerUse timerUse;$/;"	m	struct:WatchdogService::Properties	typeref:typename:TimerUse
timerUseExpirationFlags	app/watchdog.cpp	/^static std::bitset<8> timerUseExpirationFlags = 0;$/;"	v	typeref:typename:std::bitset<8>	file:
timestamp	systemintfcmds.hpp	/^    uint8_t timestamp[4];$/;"	m	struct:oem_sel_timestamped	typeref:typename:uint8_t[4]
toOemGroup	include/ipmid/oemrouter.hpp	/^constexpr Group toOemGroup(Number oen)$/;"	f	namespace:oem	typeref:typename:Group
toOemNumber	include/ipmid/oemrouter.hpp	/^constexpr Number toOemNumber(const Group& oeg)$/;"	f	namespace:oem	typeref:typename:Number
toOemNumber	include/ipmid/oemrouter.hpp	/^constexpr Number toOemNumber(const std::uint8_t oeg[groupMagicSize])$/;"	f	namespace:oem	typeref:typename:Number
trailingOk	include/ipmid/message.hpp	/^    bool trailingOk = true;$/;"	m	struct:ipmi::message::Payload	typeref:typename:bool
transferStatus	apphandler.cpp	/^static uint8_t transferStatus = setComplete;$/;"	v	typeref:typename:uint8_t	file:
transferStatus	chassishandler.cpp	/^static uint8_t transferStatus = setComplete;$/;"	v	typeref:typename:uint8_t	file:
transport	include/ipmid/api-types.hpp	/^namespace transport$/;"	n	namespace:ipmi
transport	transporthandler.cpp	/^namespace transport$/;"	n	namespace:ipmi	file:
transport	transporthandler.hpp	/^namespace transport$/;"	n	namespace:ipmi
transport_oem	configure.ac	/^AC_ARG_ENABLE([transport_oem],$/;"	e
type	elog-errors.hpp	/^    using type = org::open_power::Common::Callout::Procedure;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:org::open_power::Common::Callout::Procedure
type	elog-errors.hpp	/^    using type = org::open_power::Host::Access::ReadCFAM;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:org::open_power::Host::Access::ReadCFAM
type	elog-errors.hpp	/^    using type = org::open_power::Host::Access::WriteCFAM;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:org::open_power::Host::Access::WriteCFAM
type	elog-errors.hpp	/^    using type = org::open_power::Host::Checkstop;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:org::open_power::Host::Checkstop
type	elog-errors.hpp	/^    using type = org::open_power::Host::Event;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:org::open_power::Host::Event
type	elog-errors.hpp	/^    using type = org::open_power::Host::MaintenanceProcedure;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:org::open_power::Host::MaintenanceProcedure
type	elog-errors.hpp	/^    using type = org::open_power::Host::WatchdogTimedOut;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:org::open_power::Host::WatchdogTimedOut
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::_Bar::BAR_DATA
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_DEVICE_PATH_TEST
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_AutoTestSimple::STRING
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_NAME
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::FILE_PATH
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_NAME
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::_Foo::FOO_DATA
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::org::open_power::Host::_Event::ESEL
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::org::open_power::Host::_MaintenanceProcedure::ESEL
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_DEVICE_PATH
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_BUS
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Inventory::CALLOUT_INVENTORY_PATH
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::PATH
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::PATH
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::PATH
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_NAME
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::_InvalidArgument::ARGUMENT_VALUE
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, const char*>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Dump::Create::_QuotaExceeded::REASON
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, int32_t>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::_Callout::CALLOUT_ERRNO_TEST
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, int32_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_Device::CALLOUT_ERRNO
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, int32_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Open::ERRNO
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, int32_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::ERRNO
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, int32_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::WHENCE
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, int32_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Write::ERRNO
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, int64_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::File::_Seek::OFFSET
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint16_t>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorOne::ERRNUM
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint16_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IIC::CALLOUT_IIC_ADDR
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint32_t>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestCallout::DEV_ADDR
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint32_t>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ADDR
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint32_t>;$/;"	t	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::_TestErrorTwo::DEV_ID
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint32_t>;$/;"	t	struct:phosphor::logging::org::open_power::Common::Callout::_Procedure::PROCEDURE
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint32_t>;$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::_ReadCFAM::ADDRESS
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint32_t>;$/;"	t	struct:phosphor::logging::org::open_power::Host::Access::_WriteCFAM::ADDRESS
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint32_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_GPIO::CALLOUT_GPIO_NUM
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint32_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::Callout::_IPMISensor::CALLOUT_IPMI_SENSOR_NUM
type	elog-errors.hpp	/^    using type = std::tuple<std::decay_t<decltype(str)>, uint64_t>;$/;"	t	struct:phosphor::logging::xyz::openbmc_project::Common::_Timeout::TIMEOUT_IN_MSEC
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::Callout::Device;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::Callout::Device
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::Callout::GPIO;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::Callout::GPIO
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::Callout::IIC;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::Callout::IIC
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::Callout::IPMISensor;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::Callout::IPMISensor
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::Callout::Inventory;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::Callout::Inventory
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::File::Open;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::File::Open
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::File::Seek;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::File::Seek
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::File::Write;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::File::Write
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::InternalFailure;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::InternalFailure
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::InvalidArgument;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::InvalidArgument
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Common::Timeout;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Common::Timeout
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Control::Device::WriteFailure;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Control::Device::WriteFailure
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Control::Host::CommandNotSupported;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Control::Host::CommandNotSupported
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Dump::Create::Disabled;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Dump::Create::Disabled
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Dump::Create::QuotaExceeded;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Dump::Create::QuotaExceeded
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::Sensor::Device::ReadFailure;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::Sensor::Device::ReadFailure
type	elog-errors.hpp	/^    using type = xyz::openbmc_project::State::Host::SoftOffTimeout;$/;"	t	struct:phosphor::logging::details::map_exception_type	typeref:typename:xyz::openbmc_project::State::Host::SoftOffTimeout
type	ipmi_fru_info_area.cpp	/^static constexpr auto type = "Type";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
type	systemintfcmds.hpp	/^    uint8_t type;$/;"	m	struct:oem_sel_timestamped	typeref:typename:uint8_t
type12Count	include/dbus-sdr/storagecommands.hpp	/^constexpr const size_t type12Count = 2;$/;"	v	namespace:ipmi::storage	typeref:typename:const size_t
typeASCII	ipmi_fru_info_area.cpp	/^static constexpr uint8_t typeASCII = 0xC0;$/;"	v	namespace:ipmi::fru	typeref:typename:uint8_t	file:
typeDbusToIpmi	chassishandler.cpp	/^std::map<Type::Types, IpmiValue> typeDbusToIpmi = {{Type::Types::Legacy, 0x00},$/;"	v	namespace:boot_options	typeref:typename:std::map<Type::Types,IpmiValue>
typeIpmiToDbus	chassishandler.cpp	/^std::map<IpmiValue, Type::Types> typeIpmiToDbus = {{0x00, Type::Types::Legacy},$/;"	v	namespace:boot_options	typeref:typename:std::map<IpmiValue,Type::Types>
typeLengthByteNull	ipmi_fru_info_area.cpp	/^static constexpr auto typeLengthByteNull = 0x0;$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
typeLengthCode	include/dbus-sdr/storagecommands.hpp	/^    uint8_t typeLengthCode;$/;"	m	struct:Type12Record	typeref:typename:uint8_t
typecode	sensorhandler.cpp	/^    uint8_t typecode;$/;"	m	struct:sensorTypemap_t	typeref:typename:uint8_t	file:
types	include/ipmid/message/types.hpp	/^namespace types$/;"	n
uint10_t	include/ipmid/message/types.hpp	/^using uint10_t = fixed_uint_t<10>;$/;"	t	typeref:typename:fixed_uint_t<10>
uint11_t	include/ipmid/message/types.hpp	/^using uint11_t = fixed_uint_t<11>;$/;"	t	typeref:typename:fixed_uint_t<11>
uint12_t	include/ipmid/message/types.hpp	/^using uint12_t = fixed_uint_t<12>;$/;"	t	typeref:typename:fixed_uint_t<12>
uint13_t	include/ipmid/message/types.hpp	/^using uint13_t = fixed_uint_t<13>;$/;"	t	typeref:typename:fixed_uint_t<13>
uint14_t	include/ipmid/message/types.hpp	/^using uint14_t = fixed_uint_t<14>;$/;"	t	typeref:typename:fixed_uint_t<14>
uint15_t	include/ipmid/message/types.hpp	/^using uint15_t = fixed_uint_t<15>;$/;"	t	typeref:typename:fixed_uint_t<15>
uint1_t	include/ipmid/message/types.hpp	/^using uint1_t = fixed_uint_t<1>;$/;"	t	typeref:typename:fixed_uint_t<1>
uint24_t	include/ipmid/message/types.hpp	/^using uint24_t = fixed_uint_t<24>;$/;"	t	typeref:typename:fixed_uint_t<24>
uint2_t	include/ipmid/message/types.hpp	/^using uint2_t = fixed_uint_t<2>;$/;"	t	typeref:typename:fixed_uint_t<2>
uint3_t	include/ipmid/message/types.hpp	/^using uint3_t = fixed_uint_t<3>;$/;"	t	typeref:typename:fixed_uint_t<3>
uint4_t	include/ipmid/message/types.hpp	/^using uint4_t = fixed_uint_t<4>;$/;"	t	typeref:typename:fixed_uint_t<4>
uint5_t	include/ipmid/message/types.hpp	/^using uint5_t = fixed_uint_t<5>;$/;"	t	typeref:typename:fixed_uint_t<5>
uint6_t	include/ipmid/message/types.hpp	/^using uint6_t = fixed_uint_t<6>;$/;"	t	typeref:typename:fixed_uint_t<6>
uint7_t	include/ipmid/message/types.hpp	/^using uint7_t = fixed_uint_t<7>;$/;"	t	typeref:typename:fixed_uint_t<7>
uint9_t	include/ipmid/message/types.hpp	/^using uint9_t = fixed_uint_t<9>;$/;"	t	typeref:typename:fixed_uint_t<9>
underlying_t	include/ipmid/message/types.hpp	/^using underlying_t =$/;"	t	namespace:types::details	typeref:typename:std::conditional_t<std::is_enum_v<U>,std::underlying_type<U>,std::enable_if<true,U>>::type
uniqueNameToChannelNumber	ipmid-new.cpp	/^std::unordered_map<std::string, uint8_t> uniqueNameToChannelNumber;$/;"	v	namespace:ipmi::__anone60fcc800110	typeref:typename:std::unordered_map<std::string,uint8_t>
unit	include/ipmid/types.hpp	/^    Unit unit;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:Unit
unknown	apphandler.cpp	/^    unknown = 0x2a,$/;"	e	enum:acpi_state::PowerState	file:
unknown	user_channel/channel_layer.hpp	/^    unknown = 0x82,$/;"	e	enum:ipmi::EChannelMediumType
unpack	include/ipmid/message.hpp	/^    int unpack()$/;"	f	struct:ipmi::message::Payload	typeref:typename:int
unpack	include/ipmid/message.hpp	/^    int unpack(Arg&& arg, Args&&... args)$/;"	f	struct:ipmi::message::Payload	typeref:typename:int
unpack	include/ipmid/message.hpp	/^    int unpack(Args&&... args)$/;"	f	struct:ipmi::message::Request	typeref:typename:int
unpack	include/ipmid/message.hpp	/^    int unpack(std::tuple<Types...>& t)$/;"	f	struct:ipmi::message::Payload	typeref:typename:int
unpack	include/ipmid/message.hpp	/^    int unpack(std::tuple<Types...>& t)$/;"	f	struct:ipmi::message::Request	typeref:typename:int
unpackCheck	include/ipmid/message.hpp	/^    bool unpackCheck = false;$/;"	m	struct:ipmi::message::Payload	typeref:typename:bool
unpackError	include/ipmid/message.hpp	/^    bool unpackError = false;$/;"	m	struct:ipmi::message::Payload	typeref:typename:bool
unset_percentage	sensorhandler.hpp	/^inline void unset_percentage(SensorDataFullRecordBody* body)$/;"	f	namespace:get_sdr::body	typeref:typename:void
unspecified	include/dbus-sdr/storagecommands.hpp	/^    unspecified = 0x0,$/;"	e	enum:SensorUnits
update	sys_info_param.cpp	/^void SysInfoParamStore::update(uint8_t paramSelector, const std::string& s)$/;"	f	class:SysInfoParamStore	typeref:typename:void
update	sys_info_param.cpp	/^void SysInfoParamStore::update(uint8_t paramSelector,$/;"	f	class:SysInfoParamStore	typeref:typename:void
update-functional-on-fail	configure.ac	/^AC_ARG_ENABLE([update-functional-on-fail],$/;"	e
updateCSPrivilegesMap	user_channel/cipher_mgmt.cpp	/^void CipherConfig::updateCSPrivilegesMap(const Json& jsonData)$/;"	f	class:ipmi::CipherConfig	typeref:typename:void
updateFunc	include/ipmid/types.hpp	/^    std::function<uint8_t(SetSensorReadingReq&, const Info&)> updateFunc;$/;"	m	struct:ipmi::sensor::Info	typeref:typename:std::function<uint8_t (SetSensorReadingReq &,const Info &)>
updateIpmiFromAssociation	dbus-sdr/sdrutils.cpp	/^void updateIpmiFromAssociation(const std::string& path,$/;"	f	namespace:ipmi	typeref:typename:void
updateName	include/dbus-sdr/sdrutils.hpp	/^    void updateName(size_t index, std::string_view name)$/;"	f	class:details::IPMIStatsTable	typeref:typename:void
updateName	include/dbus-sdr/sdrutils.hpp	/^    void updateName(std::string_view name)$/;"	f	class:details::IPMIStatsEntry	typeref:typename:void
updateOwners	ipmid-new.cpp	/^void updateOwners(sdbusplus::asio::connection& conn, const std::string& name)$/;"	f	namespace:ipmi::__anone60fcc800110	typeref:typename:void
updatePasswdSpecialFile	user_channel/passwd_mgr.cpp	/^int PasswdMgr::updatePasswdSpecialFile(const std::string& userName,$/;"	f	class:ipmi::PasswdMgr	typeref:typename:int
updatePayloadAccessInUserInfo	user_channel/user_mgmt.cpp	/^void UserAccess::updatePayloadAccessInUserInfo($/;"	f	class:ipmi::UserAccess	typeref:typename:void
updateReading	include/dbus-sdr/sdrutils.hpp	/^    bool updateReading(double reading, int raw)$/;"	f	class:details::IPMIStatsEntry	typeref:typename:bool
updateReading	include/dbus-sdr/sdrutils.hpp	/^    bool updateReading(size_t index, double reading, int raw)$/;"	f	class:details::IPMIStatsTable	typeref:typename:bool
updateSensorRecordFromSSRAESC	ipmisensor.cpp	/^int updateSensorRecordFromSSRAESC(const void* record)$/;"	f	typeref:typename:int
updateToDbus	sensordatahandler.cpp	/^ipmi_ret_t updateToDbus(IpmiUpdateData& msg)$/;"	f	namespace:ipmi::sensor	typeref:typename:ipmi_ret_t
updateUserEntry	user_channel/passwd_mgr.cpp	/^int PasswdMgr::updateUserEntry(const std::string& userName,$/;"	f	class:ipmi::PasswdMgr	typeref:typename:int
upperCritical	include/dbus-sdr/sensorcommands.hpp	/^    upperCritical = (1 << 4),$/;"	e	enum:IPMISensorReadingByte3
upperCritical	include/dbus-sdr/sensorcommands.hpp	/^    upperCritical,$/;"	e	enum:IPMIThresholdRespBits
upperCritical	sensorhandler.hpp	/^    uint8_t upperCritical;       \/\/!< upper critical threshold$/;"	m	struct:get_sdr::GetSensorThresholdsResponse	typeref:typename:uint8_t
upperCriticalGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    upperCriticalGoingHigh = (1 << 1),$/;"	e	enum:IPMISensorEventEnableThresholds
upperCriticalGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    upperCriticalGoingHigh = 9,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
upperCriticalGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    upperCriticalGoingLow = (1 << 0),$/;"	e	enum:IPMISensorEventEnableThresholds
upperCriticalGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    upperCriticalGoingLow = 8,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
upperNonCritical	include/dbus-sdr/sensorcommands.hpp	/^    upperNonCritical = (1 << 3),$/;"	e	enum:IPMISensorReadingByte3
upperNonCritical	include/dbus-sdr/sensorcommands.hpp	/^    upperNonCritical,$/;"	e	enum:IPMIThresholdRespBits
upperNonCritical	sensorhandler.hpp	/^    uint8_t upperNonCritical;    \/\/!< upper non-critical threshold$/;"	m	struct:get_sdr::GetSensorThresholdsResponse	typeref:typename:uint8_t
upperNonCriticalGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    upperNonCriticalGoingHigh = (1 << 7),$/;"	e	enum:IPMISensorEventEnableThresholds
upperNonCriticalGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    upperNonCriticalGoingHigh = 7,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
upperNonCriticalGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    upperNonCriticalGoingLow = (1 << 6),$/;"	e	enum:IPMISensorEventEnableThresholds
upperNonCriticalGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    upperNonCriticalGoingLow = 6,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
upperNonRecoverable	include/dbus-sdr/sensorcommands.hpp	/^    upperNonRecoverable = (1 << 5),$/;"	e	enum:IPMISensorReadingByte3
upperNonRecoverable	include/dbus-sdr/sensorcommands.hpp	/^    upperNonRecoverable$/;"	e	enum:IPMIThresholdRespBits
upperNonRecoverable	sensorhandler.hpp	/^    uint8_t upperNonRecoverable; \/\/!< upper non-recoverable threshold$/;"	m	struct:get_sdr::GetSensorThresholdsResponse	typeref:typename:uint8_t
upperNonRecoverableGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    upperNonRecoverableGoingHigh = (1 << 3),$/;"	e	enum:IPMISensorEventEnableThresholds
upperNonRecoverableGoingHigh	include/dbus-sdr/sensorcommands.hpp	/^    upperNonRecoverableGoingHigh = 11,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
upperNonRecoverableGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    upperNonRecoverableGoingLow = (1 << 2),$/;"	e	enum:IPMISensorEventEnableThresholds
upperNonRecoverableGoingLow	include/dbus-sdr/sensorcommands.hpp	/^    upperNonRecoverableGoingLow = 10,$/;"	e	enum:IPMIGetSensorEventEnableThresholds
upper_critical_threshold	sensorhandler.hpp	/^    uint8_t upper_critical_threshold;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
upper_noncritical_threshold	sensorhandler.hpp	/^    uint8_t upper_noncritical_threshold;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
upper_nonrecoverable_threshold	sensorhandler.hpp	/^    uint8_t upper_nonrecoverable_threshold;$/;"	m	struct:get_sdr::SensorDataFullRecordBody	typeref:typename:uint8_t
uppercritical	include/dbus-sdr/sensorcommands.hpp	/^    uint8_t uppercritical;$/;"	m	struct:SensorThresholdResp	typeref:typename:uint8_t
uppernc	include/dbus-sdr/sensorcommands.hpp	/^    uint8_t uppernc;$/;"	m	struct:SensorThresholdResp	typeref:typename:uint8_t
uppernonrecoverable	include/dbus-sdr/sensorcommands.hpp	/^    uint8_t uppernonrecoverable;$/;"	m	struct:SensorThresholdResp	typeref:typename:uint8_t
usbV1x	user_channel/channel_layer.hpp	/^    usbV1x = 0x0A,$/;"	e	enum:ipmi::EChannelMediumType
usbV2x	user_channel/channel_layer.hpp	/^    usbV2x = 0x0B,$/;"	e	enum:ipmi::EChannelMediumType
user	user_channel/file.hpp	/^namespace user$/;"	n	namespace:phosphor
user	user_channel/shadowlock.hpp	/^namespace user$/;"	n	namespace:phosphor
user	user_channel/user_mgmt.hpp	/^    UserInfo user[ipmiMaxUsers + 1];$/;"	m	struct:ipmi::UsersTbl	typeref:typename:UserInfo[]
userAuthDisabled	user_channel/channel_layer.hpp	/^    bool userAuthDisabled;$/;"	m	struct:ipmi::ChannelAccess	typeref:typename:bool
userAuthDisabledString	user_channel/channel_mgmt.cpp	/^static constexpr const char* userAuthDisabledString = "user_auth_disabled";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
userCreated	user_channel/user_mgmt.hpp	/^    userCreated,$/;"	e	enum:ipmi::UserUpdateEvent
userDeleted	user_channel/user_mgmt.hpp	/^    userDeleted,$/;"	e	enum:ipmi::UserUpdateEvent
userEnabled	user_channel/user_mgmt.hpp	/^    bool userEnabled;$/;"	m	struct:ipmi::UserInfo	typeref:typename:bool
userEnabledProperty	user_channel/user_mgmt.cpp	/^static constexpr const char* userEnabledProperty = "UserEnabled";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
userGrpProperty	user_channel/user_mgmt.cpp	/^static constexpr const char* userGrpProperty = "UserGroups";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
userGrpUpdated	user_channel/user_mgmt.hpp	/^    userGrpUpdated,$/;"	e	enum:ipmi::UserUpdateEvent
userId	include/ipmid/message.hpp	/^    int userId;$/;"	m	struct:ipmi::Context	typeref:typename:int
userId	user_channel/usercommands.cpp	/^    uint8_t userId : 6;$/;"	m	struct:ipmi::GetUserNameReq	typeref:typename:uint8_t:6	file:
userId	user_channel/usercommands.cpp	/^    uint8_t userId : 6;$/;"	m	struct:ipmi::SetUserNameReq	typeref:typename:uint8_t:6	file:
userId	user_channel/usercommands.cpp	/^    uint8_t userId : 6;$/;"	m	struct:ipmi::SetUserPasswordReq	typeref:typename:uint8_t:6	file:
userIdDisabledViaSetPassword	user_channel/usercommands.hpp	/^static constexpr uint8_t userIdDisabledViaSetPassword = 0x2;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
userIdEnabledViaSetPassword	user_channel/usercommands.hpp	/^static constexpr uint8_t userIdEnabledViaSetPassword = 0x1;$/;"	v	namespace:ipmi	typeref:typename:uint8_t
userInSystem	user_channel/user_mgmt.hpp	/^    bool userInSystem;$/;"	m	struct:ipmi::UserInfo	typeref:typename:bool
userMgrInterface	user_channel/user_mgmt.cpp	/^static constexpr const char* userMgrInterface =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
userMgrObjBasePath	user_channel/user_mgmt.cpp	/^static constexpr const char* userMgrObjBasePath = "\/xyz\/openbmc_project\/user";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
userMgrRenamedSignal	user_channel/user_mgmt.cpp	/^std::unique_ptr<sdbusplus::bus::match_t> userMgrRenamedSignal$/;"	v	namespace:ipmi	typeref:typename:std::unique_ptr<sdbusplus::bus::match_t>
userMutex	user_channel/user_mgmt.hpp	/^    std::unique_ptr<boost::interprocess::named_recursive_mutex> userMutex{$/;"	m	class:ipmi::UserAccess	typeref:typename:std::unique_ptr<boost::interprocess::named_recursive_mutex>
userName	user_channel/user_mgmt.hpp	/^    uint8_t userName[ipmiMaxUserName];$/;"	m	struct:ipmi::UserInfo	typeref:typename:uint8_t[]
userName	user_channel/usercommands.cpp	/^    uint8_t userName[16];$/;"	m	struct:ipmi::GetUserNameResp	typeref:typename:uint8_t[16]	file:
userName	user_channel/usercommands.cpp	/^    uint8_t userName[16];$/;"	m	struct:ipmi::SetUserNameReq	typeref:typename:uint8_t[16]	file:
userObjBasePath	user_channel/user_mgmt.cpp	/^static constexpr const char* userObjBasePath = "\/xyz\/openbmc_project\/user";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
userPassword	user_channel/usercommands.cpp	/^    uint8_t userPassword[maxIpmi20PasswordSize];$/;"	m	struct:ipmi::SetUserPasswordReq	typeref:typename:uint8_t[]	file:
userPrivAccess	user_channel/user_mgmt.hpp	/^    UserPrivAccess userPrivAccess[ipmiMaxChannels];$/;"	m	struct:ipmi::UserInfo	typeref:typename:UserPrivAccess[]
userPrivProperty	user_channel/user_mgmt.cpp	/^static constexpr const char* userPrivProperty = "UserPrivilege";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
userPrivUpdated	user_channel/user_mgmt.hpp	/^    userPrivUpdated,$/;"	e	enum:ipmi::UserUpdateEvent
userPropertiesSignal	user_channel/user_mgmt.cpp	/^std::unique_ptr<sdbusplus::bus::match_t> userPropertiesSignal$/;"	v	namespace:ipmi	typeref:typename:std::unique_ptr<sdbusplus::bus::match_t>
userRenamed	user_channel/user_mgmt.hpp	/^    userRenamed,$/;"	e	enum:ipmi::UserUpdateEvent
userRenamedSignal	user_channel/user_mgmt.cpp	/^static constexpr const char* userRenamedSignal = "UserRenamed";$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
userStateUpdated	user_channel/user_mgmt.hpp	/^    userStateUpdated$/;"	e	enum:ipmi::UserUpdateEvent
userUpdateHelper	user_channel/user_mgmt.cpp	/^void userUpdateHelper(UserAccess& usrAccess, const UserUpdateEvent& userEvent,$/;"	f	namespace:ipmi	typeref:typename:void
userUpdatedSignal	user_channel/user_mgmt.cpp	/^std::unique_ptr<sdbusplus::bus::match_t> userUpdatedSignal$/;"	v	namespace:ipmi	typeref:typename:std::unique_ptr<sdbusplus::bus::match_t>
userUpdatedSignalHandler	user_channel/user_mgmt.cpp	/^void userUpdatedSignalHandler(UserAccess& usrAccess,$/;"	f	namespace:ipmi	typeref:typename:void
usersInterface	user_channel/user_mgmt.cpp	/^static constexpr const char* usersInterface =$/;"	v	namespace:ipmi	typeref:typename:const char *	file:
usersTbl	user_channel/user_mgmt.hpp	/^    UsersTbl usersTbl;$/;"	m	class:ipmi::UserAccess	typeref:typename:UsersTbl
utility	include/ipmid/utility.hpp	/^namespace utility$/;"	n	namespace:ipmi
utils	ipmid-new.cpp	/^namespace utils$/;"	n	namespace:ipmi	file:
uuidBinaryLength	apphandler.cpp	/^static constexpr size_t uuidBinaryLength = 16;$/;"	v	typeref:typename:size_t	file:
validMask	sensorhandler.hpp	/^    uint8_t validMask;           \/\/!< valid mask$/;"	m	struct:get_sdr::GetSensorThresholdsResponse	typeref:typename:uint8_t
value	include/ipmid/message/types.hpp	/^    static constexpr size_t value = N;$/;"	m	struct:types::details::Size	typeref:typename:size_t
value_type	transporthandler.hpp	/^        using value_type = PropertiesCache::value_type;$/;"	t	class:ipmi::transport::ObjectLookupCache::iterator	typeref:typename:PropertiesCache::value_type
version	ipmi_fru_info_area.cpp	/^static constexpr auto version = "Version";$/;"	v	namespace:ipmi::fru	typeref:typename:auto	file:
versionIntf	apphandler.cpp	/^static constexpr auto versionIntf = "xyz.openbmc_project.Software.Version";$/;"	v	typeref:typename:auto	file:
versionOffset	chassishandler.cpp	/^static constexpr size_t versionOffset = 5;$/;"	v	typeref:typename:size_t	file:
voltFileLastUpdatedTime	user_channel/channel_mgmt.hpp	/^    std::time_t voltFileLastUpdatedTime;$/;"	m	class:ipmi::ChannelConfig	typeref:typename:std::time_t
voltage	include/dbus-sdr/sdrutils.hpp	/^    voltage = 0x2,$/;"	e	enum:SensorTypeCodes
volts	include/dbus-sdr/storagecommands.hpp	/^    volts = 0x4,$/;"	e	enum:SensorUnits
vrInterface	dbus-sdr/sensorcommands.cpp	/^static constexpr const char* vrInterface =$/;"	v	namespace:ipmi::sensor	typeref:typename:const char *	file:
warningHigh	include/dbus-sdr/sensorcommands.hpp	/^    std::optional<uint8_t> warningHigh;$/;"	m	struct:ipmi::IPMIThresholds	typeref:typename:std::optional<uint8_t>
warningLow	include/dbus-sdr/sensorcommands.hpp	/^    std::optional<uint8_t> warningLow;$/;"	m	struct:ipmi::IPMIThresholds	typeref:typename:std::optional<uint8_t>
watts	include/dbus-sdr/storagecommands.hpp	/^    watts = 0x6,$/;"	e	enum:SensorUnits
wdActionToIpmiAction	app/watchdog.cpp	/^IpmiAction wdActionToIpmiAction(WatchdogService::Action wd_action)$/;"	f	typeref:typename:IpmiAction
wdExpirationFlagReservedBit0	app/watchdog.cpp	/^static constexpr uint8_t wdExpirationFlagReservedBit0 = 0x0;$/;"	v	typeref:typename:uint8_t	file:
wdExpirationFlagReservedBit6	app/watchdog.cpp	/^static constexpr uint8_t wdExpirationFlagReservedBit6 = 0x6;$/;"	v	typeref:typename:uint8_t	file:
wdExpirationFlagReservedBit7	app/watchdog.cpp	/^static constexpr uint8_t wdExpirationFlagReservedBit7 = 0x7;$/;"	v	typeref:typename:uint8_t	file:
wdTimeoutActionMax	app/watchdog.cpp	/^static constexpr uint8_t wdTimeoutActionMax = 3;$/;"	v	typeref:typename:uint8_t	file:
wdTimeoutInterruptTimer	app/watchdog.cpp	/^static constexpr uint8_t wdTimeoutInterruptTimer = 0x04;$/;"	v	typeref:typename:uint8_t	file:
wdTimerUseResTimer1	app/watchdog.cpp	/^static constexpr uint8_t wdTimerUseResTimer1 = 0x0;$/;"	v	typeref:typename:uint8_t	file:
wdTimerUseResTimer2	app/watchdog.cpp	/^static constexpr uint8_t wdTimerUseResTimer2 = 0x6;$/;"	v	typeref:typename:uint8_t	file:
wdTimerUseResTimer3	app/watchdog.cpp	/^static constexpr uint8_t wdTimerUseResTimer3 = 0x7;$/;"	v	typeref:typename:uint8_t	file:
wdTimerUseToIpmiTimerUse	app/watchdog.cpp	/^IpmiTimerUse wdTimerUseToIpmiTimerUse(WatchdogService::TimerUse wdTimerUse)$/;"	f	typeref:typename:IpmiTimerUse
wd_dont_stop	app/watchdog.cpp	/^static constexpr uint8_t wd_dont_stop = 0x1 << 6;$/;"	v	typeref:typename:uint8_t	file:
wd_intf	app/watchdog_service.cpp	/^static constexpr char wd_intf[] = "xyz.openbmc_project.State.Watchdog";$/;"	v	typeref:typename:char[]	file:
wd_path	app/watchdog_service.cpp	/^static constexpr char wd_path[] = "\/xyz\/openbmc_project\/watchdog\/host0";$/;"	v	typeref:typename:char[]	file:
wd_running	app/watchdog.cpp	/^static constexpr uint8_t wd_running = 0x1 << 6;$/;"	v	typeref:typename:uint8_t	file:
wd_service	app/watchdog_service.hpp	/^    static ipmi::ServiceCache wd_service;$/;"	m	class:WatchdogService	typeref:typename:ipmi::ServiceCache
wd_timeout_action_mask	app/watchdog.cpp	/^static constexpr uint8_t wd_timeout_action_mask = 0x3;$/;"	v	typeref:typename:uint8_t	file:
what	elog-errors.hpp	/^    const char* what() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Bar::Bar	typeref:typename:const char *
what	elog-errors.hpp	/^    const char* what() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Device::Callout	typeref:typename:const char *
what	elog-errors.hpp	/^    const char* what() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::AutoTestSimple	typeref:typename:const char *
what	elog-errors.hpp	/^    const char* what() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestCallout	typeref:typename:const char *
what	elog-errors.hpp	/^    const char* what() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorOne	typeref:typename:const char *
what	elog-errors.hpp	/^    const char* what() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Elog::TestErrorTwo	typeref:typename:const char *
what	elog-errors.hpp	/^    const char* what() const noexcept$/;"	f	struct:phosphor::logging::example::xyz::openbmc_project::Example::Foo::Foo	typeref:typename:const char *
what	sensorhandler.hpp	/^    const char* what() const noexcept$/;"	f	struct:SensorFunctionalError	typeref:typename:const char *
whitelistFilter	whitelist-filter.cpp	/^WhitelistFilter whitelistFilter;$/;"	v	namespace:ipmi::__anonc26dafe60110	typeref:typename:WhitelistFilter
wildHandler	test/oemrouter_unittest.cpp	/^static ipmid_callback_t wildHandler;$/;"	v	typeref:typename:ipmid_callback_t	file:
wipeTable	include/dbus-sdr/sdrutils.hpp	/^    void wipeTable(void)$/;"	f	class:details::IPMIStatsTable	typeref:typename:void
words	include/dbus-sdr/storagecommands.hpp	/^    words = 0x1$/;"	e	enum:GetFRUAreaAccessType
words	storagehandler.cpp	/^    words  \/\/\/< Device is accessed by words$/;"	e	enum:AccessMode	file:
workQueue	host-cmd-manager.hpp	/^    std::queue<CommandHandler> workQueue{};$/;"	m	class:phosphor::host::command::Manager	typeref:typename:std::queue<CommandHandler>
writeAddr	dbus-sdr/storagecommands.cpp	/^static uint8_t writeAddr = 0XFF;$/;"	v	namespace:ipmi::storage	typeref:typename:uint8_t	file:
writeAssetTag	dcmihandler.cpp	/^void writeAssetTag(const std::string& assetTag)$/;"	f	namespace:dcmi	typeref:typename:void
writeBus	dbus-sdr/storagecommands.cpp	/^static uint8_t writeBus = 0xFF;$/;"	v	namespace:ipmi::storage	typeref:typename:uint8_t	file:
writeCSPrivilegeLevels	user_channel/cipher_mgmt.cpp	/^int CipherConfig::writeCSPrivilegeLevels(const Json& jsonData)$/;"	f	class:ipmi::CipherConfig	typeref:typename:int
writeChannelPersistData	user_channel/channel_mgmt.cpp	/^int ChannelConfig::writeChannelPersistData()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
writeChannelVolatileData	user_channel/channel_mgmt.cpp	/^int ChannelConfig::writeChannelVolatileData()$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
writeFru	dbus-sdr/storagecommands.cpp	/^bool writeFru()$/;"	f	namespace:ipmi::storage	typeref:typename:bool
writeFruIfRunning	dbus-sdr/storagecommands.cpp	/^void writeFruIfRunning()$/;"	f	namespace:ipmi::storage	typeref:typename:void
writeJsonFile	user_channel/channel_mgmt.cpp	/^int ChannelConfig::writeJsonFile(const std::string& configFile,$/;"	f	class:ipmi::ChannelConfig	typeref:typename:int
writeTimeoutSeconds	dbus-sdr/storagecommands.cpp	/^constexpr static const size_t writeTimeoutSeconds = 10;$/;"	v	namespace:ipmi::storage	typeref:typename:const size_t	file:
writeTimer	dbus-sdr/storagecommands.cpp	/^std::unique_ptr<phosphor::Timer> writeTimer = nullptr;$/;"	v	namespace:ipmi::storage	typeref:typename:std::unique_ptr<phosphor::Timer>
writeUserData	user_channel/user_mgmt.cpp	/^void UserAccess::writeUserData()$/;"	f	class:ipmi::UserAccess	typeref:typename:void
xyz	elog-errors.hpp	/^namespace xyz$/;"	n	namespace:phosphor::logging
xyz	elog-errors.hpp	/^namespace xyz$/;"	n	namespace:phosphor::logging::example
xyz	elog-errors.hpp	/^namespace xyz$/;"	n	namespace:sdbusplus
xyz/openbmc_project/Ipmi/Internal/SoftPowerOff/server.cpp	softoff/Makefile.am	/^xyz\/openbmc_project\/Ipmi\/Internal\/SoftPowerOff\/server.cpp: ${top_srcdir}\/xyz\/openbmc_proj/;"	t
xyz/openbmc_project/Ipmi/Internal/SoftPowerOff/server.hpp	softoff/Makefile.am	/^xyz\/openbmc_project\/Ipmi\/Internal\/SoftPowerOff\/server.hpp: ${top_srcdir}\/xyz\/openbmc_proj/;"	t
xyzPrefix	read_fru_data.hpp	/^static constexpr auto xyzPrefix = "\/xyz\/openbmc_project\/";$/;"	v	namespace:ipmi::fru	typeref:typename:auto
yield	include/ipmid/message.hpp	/^    boost::asio::yield_context yield;$/;"	m	struct:ipmi::Context	typeref:typename:boost::asio::yield_context
~ChannelConfig	user_channel/channel_mgmt.cpp	/^ChannelConfig::~ChannelConfig()$/;"	f	class:ipmi::ChannelConfig
~File	user_channel/file.hpp	/^    ~File()$/;"	f	class:phosphor::user::File
~IpmiProvider	ipmid-new.cpp	/^    ~IpmiProvider()$/;"	f	struct:ipmi::IpmiProvider	file:
~LegacyRouter	ipmid-new.cpp	/^    virtual ~LegacyRouter()$/;"	f	class:oem::LegacyRouter	file:
~Lock	user_channel/shadowlock.hpp	/^    ~Lock()$/;"	f	class:phosphor::user::shadow::Lock
~Payload	include/ipmid/message.hpp	/^    ~Payload()$/;"	f	struct:ipmi::message::Payload
~Router	include/ipmid/oemrouter.hpp	/^    virtual ~Router()$/;"	f	class:oem::Router
~SecureAllocator	user_channel/user_mgmt.hpp	/^    ~SecureAllocator() throw()$/;"	f	class:ipmi::SecureAllocator
~SignalHandler	libipmid/signals.cpp	/^    ~SignalHandler()$/;"	f	class:__anonf9df85400110::SignalHandler	file:
~SysInfoParamStoreIntf	sys_info_param.hpp	/^    virtual ~SysInfoParamStoreIntf()$/;"	f	class:SysInfoParamStoreIntf
~UserAccess	user_channel/user_mgmt.cpp	/^UserAccess::~UserAccess()$/;"	f	class:ipmi::UserAccess

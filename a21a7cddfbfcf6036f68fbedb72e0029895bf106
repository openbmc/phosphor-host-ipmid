{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "19d65b9b_ae545422",
        "filename": "apphandler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 486,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-06-22T00:36:14Z",
      "side": 1,
      "message": "string_view doesn\u0027t guarantee null character ending - will this be an issue with the processing logic? I\u0027m guessing std::from_chars would throw?",
      "range": {
        "startLine": 486,
        "startChar": 24,
        "endLine": 486,
        "endChar": 35
      },
      "revId": "a21a7cddfbfcf6036f68fbedb72e0029895bf106",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79ea97c4_a096c7ea",
        "filename": "apphandler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 486,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-06-22T06:29:46Z",
      "side": 1,
      "message": "Do we need null terminator? in this case?",
      "parentUuid": "19d65b9b_ae545422",
      "range": {
        "startLine": 486,
        "startChar": 24,
        "endLine": 486,
        "endChar": 35
      },
      "revId": "a21a7cddfbfcf6036f68fbedb72e0029895bf106",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "f410a06d_b4857ebb",
        "filename": "apphandler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 486,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-08-03T20:53:08Z",
      "side": 1,
      "message": "from_chars doesn\u0027t use nul char string termination, it uses a begin pointer and and end pointer.",
      "parentUuid": "79ea97c4_a096c7ea",
      "range": {
        "startLine": 486,
        "startChar": 24,
        "endLine": 486,
        "endChar": 35
      },
      "revId": "a21a7cddfbfcf6036f68fbedb72e0029895bf106",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d1cc95dd_59a6aa31",
        "filename": "apphandler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 544,
      "author": {
        "id": 1000388
      },
      "writtenOn": "2022-06-22T00:36:14Z",
      "side": 1,
      "message": "Should we be doing a location check here as well before throwing it into substr?",
      "range": {
        "startLine": 544,
        "startChar": 8,
        "endLine": 544,
        "endChar": 16
      },
      "revId": "a21a7cddfbfcf6036f68fbedb72e0029895bf106",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "08dd5dc5_4fd8ad81",
        "filename": "apphandler.cpp",
        "patchSetId": 2
      },
      "lineNbr": 544,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-06-22T06:29:46Z",
      "side": 1,
      "message": "no need to check since \n\n```\ntoken \u003d\u003d token.substr(0, std::string::npos)\n```\n\n---\n\nJust FYI,\n\nstd::string::npos \u003d\u003d -1, but the argument is size_t...\n\nso std::string::npos \u003d\u003d MAX(size_t).\n\nSo at the end of the day, token.substr(index \u003d 0, len \u003d MAX(size_t)) \u003d token.\n(len is the max length of the string to take... Original string can be shorter).",
      "parentUuid": "d1cc95dd_59a6aa31",
      "range": {
        "startLine": 544,
        "startChar": 8,
        "endLine": 544,
        "endChar": 16
      },
      "revId": "a21a7cddfbfcf6036f68fbedb72e0029895bf106",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
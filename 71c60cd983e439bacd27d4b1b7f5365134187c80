{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "8637c7dc_14e97841",
        "filename": "storagehandler.cpp",
        "patchSetId": 5
      },
      "lineNbr": 824,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2022-06-14T17:19:48Z",
      "side": 1,
      "message": "I took a quick look at the numbers on a particular system I have using blob read:\n* The Max transfer size of the particular channel is 64 bytes.\n* When transferring Blobs, the maximum IPMI response size is 59 bytes (3 bytes OEN, 2 bytes CRC, 54 bytes blob payload).\n* If the max IPMI response size for FRU read is also 59 bytes, the max read count would be 58 and not 63. I wonder if we need to also subtract 5 from readCount to account for the overhead?",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 17
      },
      "revId": "71c60cd983e439bacd27d4b1b7f5365134187c80",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c561ff3a_346c50e9",
        "filename": "storagehandler.cpp",
        "patchSetId": 5
      },
      "lineNbr": 824,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-06-15T01:34:57Z",
      "side": 1,
      "message": "I will need to check what getChannelMaxTransferSize actually returns. I would think that it is the actual size that we can use with the header already substracted.",
      "parentUuid": "8637c7dc_14e97841",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 17
      },
      "revId": "71c60cd983e439bacd27d4b1b7f5365134187c80",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77387a84_b78a1dc1",
        "filename": "storagehandler.cpp",
        "patchSetId": 5
      },
      "lineNbr": 824,
      "author": {
        "id": 1000500
      },
      "writtenOn": "2022-06-17T19:05:09Z",
      "side": 1,
      "message": "Took another look, the reason a blob read payload is capped to 54 bytes is due to:\n```\n(BlobManager::read)\n    handler-\u003eread(session, offset,\n                  std::min(maximumReadSize, requestedSize));\n\n```\n`maximumReadSize` is defined as `btTransportLength - (btReplyHdrLen + oem::groupMagicSize + crcSize);` here: https://github.com/openbmc/phosphor-ipmi-blobs/blob/master/manager.hpp#L26\n\nBT has a 5-byte long header, as is described in btbridged: NetFN, cmd, cc, LUN, seq.\nFor KCS, the header is 3-byte long as is described in kcsbridged: NetFN|LUN, cmd, cc.\n\nSo I think maybe we need to determine the header length and subtract it from the getChannelMaxTransferSize and then sutbtract sizeof(uint8).",
      "parentUuid": "c561ff3a_346c50e9",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 17
      },
      "revId": "71c60cd983e439bacd27d4b1b7f5365134187c80",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "2772e182_60f3c199",
        "filename": "storagehandler.cpp",
        "patchSetId": 5
      },
      "lineNbr": 824,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-06-22T22:05:20Z",
      "side": 1,
      "message": "Good find. We actualy don\u0027t need the code you referenced https://gerrit.openbmc.org/c/openbmc/phosphor-ipmi-blobs/+/54820.\n\n---\n\nAs for getChannelMaxTransferSize, I believe it have already taken care of the headers.\n\nThe FRU read with this change return exactly 64 bytes. (this will usually exceed the size) \n```\nipmitool raw 0x0a 0x11 0x57 0x00 0x00 0xff\n 3f 01 00 00 01 00 00 00 fe 01 07 00 56 e7 ba c6\n 51 75 61 6e 74 61 ca 46 72 6f 6e 74 50 61 6e 65\n 6c cf 41 52 50 49 56 53 31 39 31 35 30 30 30 33\n 32 ca 31 30 33 36 38 31 33 2d 30 35 00 00 c1 00\n```",
      "parentUuid": "77387a84_b78a1dc1",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 17
      },
      "revId": "71c60cd983e439bacd27d4b1b7f5365134187c80",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "07479999_b803bd5c",
        "filename": "storagehandler.cpp",
        "patchSetId": 5
      },
      "lineNbr": 824,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-07-12T16:03:11Z",
      "side": 1,
      "message": "anymore concern here?",
      "parentUuid": "2772e182_60f3c199",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 17
      },
      "revId": "71c60cd983e439bacd27d4b1b7f5365134187c80",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "024cbf38_8d94c39e",
        "filename": "storagehandler.cpp",
        "patchSetId": 5
      },
      "lineNbr": 824,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-08-09T17:57:53Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "07479999_b803bd5c",
      "range": {
        "startLine": 824,
        "startChar": 8,
        "endLine": 824,
        "endChar": 17
      },
      "revId": "71c60cd983e439bacd27d4b1b7f5365134187c80",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
{
  "comments": [
    {
      "key": {
        "uuid": "d2483929_e2dd61ff",
        "filename": "user_channel/user_mgmt.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2021-04-12T08:21:37Z",
      "side": 1,
      "message": "Retain the sensitive data clearing in old line number 741 itself.\nI believe, crash is due to passing address of std::string type variable, instead of character pointer to it.\n\n void OPENSSL_cleanse(void *ptr, size_t len);",
      "revId": "a0eb8d753b520c61a2aa1fad5c4093a6a7d80159",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "98a457fa_2513aa51",
        "filename": "user_channel/user_mgmt.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-04-14T20:15:58Z",
      "side": 1,
      "message": "+1. First argument needs to be passwd.data(). And I\u0027d like to point out again, there is no guarantee this does anything useful for security, since we have no control over the std::string memory allocation logic.",
      "parentUuid": "d2483929_e2dd61ff",
      "revId": "a0eb8d753b520c61a2aa1fad5c4093a6a7d80159",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "1d25902b_7f5324b1",
        "filename": "user_channel/user_mgmt.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1000652
      },
      "writtenOn": "2021-04-15T07:21:25Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "98a457fa_2513aa51",
      "revId": "a0eb8d753b520c61a2aa1fad5c4093a6a7d80159",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "f91f5bb8_e812a56c",
        "filename": "user_channel/user_mgmt.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1000418
      },
      "writtenOn": "2021-04-15T16:54:09Z",
      "side": 1,
      "message": "@jonathan: One other thing is, passwd.data() returns \u0027const char *\u0027 and we pass it to OPENSSL_cleanse() after stripping const-ness apparently.  passwd.front() may be suggested use?\n\nWe discuss in other code-review about \u0027class Passwd\u0027 with destructor defining this contents reset.  For simplicity, Can we fill the contents with some fixed value like 0xbabe\" through out its length in the destructor ?\n\nI don\u0027t see a standard way to clear std::string.\nRef:\nhttps://stackoverflow.com/questions/38702943/how-to-cleanse-overwrite-with-random-bytes-stdstring-internal-buffer",
      "parentUuid": "1d25902b_7f5324b1",
      "revId": "a0eb8d753b520c61a2aa1fad5c4093a6a7d80159",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "783e36f8_87bc152c",
        "filename": "user_channel/user_mgmt.cpp",
        "patchSetId": 1
      },
      "lineNbr": 760,
      "author": {
        "id": 1000900
      },
      "writtenOn": "2021-04-20T20:35:08Z",
      "side": 1,
      "message": "Since c++17 there is a non-const overload of data(), but sure, there are other ways to get the pointer that may be preferable.\n\nWhether the data is overwritten with zeros (as in openssl_cleanse) or another pattern - I don\u0027t think it matters much. The bigger problem is ensuring that std::string did not allocate intermediate buffers (e.g. as the string was being built up in memory) which are then deallocated before the string is destroyed. I believe we can provide a custom allocator to std::basic_string\u003c\u003e to control this.",
      "parentUuid": "f91f5bb8_e812a56c",
      "revId": "a0eb8d753b520c61a2aa1fad5c4093a6a7d80159",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}
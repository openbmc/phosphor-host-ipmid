{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "d8417802_0f816768",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 273,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-10-17T17:13:26Z",
      "side": 1,
      "message": "nit:\n(deprecated in C++17)(removed in C++20)",
      "range": {
        "startLine": 273,
        "startChar": 11,
        "endLine": 273,
        "endChar": 17
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "81effb8c_da0a9abf",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 280,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-10-17T17:13:26Z",
      "side": 1,
      "message": "won\u0027t you double de allocate?, because you are added another call to OPENSSL_cleanse, below. (this is the second time you would dealloc, so the error would be here)",
      "range": {
        "startLine": 280,
        "startChar": 8,
        "endLine": 280,
        "endChar": 23
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b813a0e1_ca487b6d",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 280,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-17T19:51:49Z",
      "side": 1,
      "message": "I am not exactly sure here.",
      "parentUuid": "81effb8c_da0a9abf",
      "range": {
        "startLine": 280,
        "startChar": 8,
        "endLine": 280,
        "endChar": 23
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "29b489d3_c7f8c86e",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 280,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-10-17T20:19:05Z",
      "side": 1,
      "message": "Your child class will deconstructs on line 300, calling OPENSSL_cleanse, then when your parent class deconstructs it will (using the child of std::allocate, SecureAllocator) call OPENSSL_cleanse again in line 280. \nwhich is a use after free/double fee issue. \n\nYou could simply not use the SecureAllocator, and use the stock std::allocator",
      "parentUuid": "b813a0e1_ca487b6d",
      "range": {
        "startLine": 280,
        "startChar": 8,
        "endLine": 280,
        "endChar": 23
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "450818a6_f17f54d8",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 280,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-10-17T22:41:50Z",
      "side": 1,
      "message": "OPENSSL_cleanse does not dealloc, only forces memset to zero",
      "parentUuid": "29b489d3_c7f8c86e",
      "range": {
        "startLine": 280,
        "startChar": 8,
        "endLine": 280,
        "endChar": 23
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "b204454a_c3ce9e66",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 280,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-10-17T22:43:55Z",
      "side": 1,
      "message": "That is good news.",
      "parentUuid": "450818a6_f17f54d8",
      "range": {
        "startLine": 280,
        "startChar": 8,
        "endLine": 280,
        "endChar": 23
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "da6303a5_7eab2d1a",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 280,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2022-10-17T22:47:15Z",
      "side": 1,
      "message": "Also, only one of the dealloc calls will be called anyway. The string class will only call the allocator dealloc function if it used the allocator class to allocate in the first place. For short strings, the allocator/deallocator is not called and only the internal storage is used, which is why the OPENSSL_cleanse is needed in the securestring destructor.",
      "parentUuid": "b204454a_c3ce9e66",
      "range": {
        "startLine": 280,
        "startChar": 8,
        "endLine": 280,
        "endChar": 23
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "01f9943d_5f07b544",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 280,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-17T22:58:21Z",
      "side": 1,
      "message": "ok, sounds good. thanks for the info.",
      "parentUuid": "da6303a5_7eab2d1a",
      "range": {
        "startLine": 280,
        "startChar": 8,
        "endLine": 280,
        "endChar": 23
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "edfc1a0b_24a6cad2",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 300,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-10-17T17:13:26Z",
      "side": 1,
      "message": "I suspect this can be simplified. It is strange to use deference twice, and reference once on the same pointer. \n\n\u0026((*this)[0] \n\u0026(**this)\n(*this)",
      "range": {
        "startLine": 300,
        "startChar": 24,
        "endLine": 300,
        "endChar": 37
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3c5b3d74_d6355aee",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 300,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2022-10-17T19:51:49Z",
      "side": 1,
      "message": "I am aiming to change minimum code to fix the current issue. Will update the change in a follow up change once this change is resolved. https://gerrit.openbmc.org/c/openbmc/phosphor-host-ipmid/+/57975\n\nBut I think it should just be `this-\u003edata()`? Pointing to the beginning of the data.",
      "parentUuid": "edfc1a0b_24a6cad2",
      "range": {
        "startLine": 300,
        "startChar": 24,
        "endLine": 300,
        "endChar": 37
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "7c644d85_e64976df",
        "filename": "include/ipmid/types.hpp",
        "patchSetId": 5
      },
      "lineNbr": 300,
      "author": {
        "id": 1000593
      },
      "writtenOn": "2022-10-17T20:19:05Z",
      "side": 1,
      "message": "checks out, I did not see this was the original way. \n\n(resolved)",
      "parentUuid": "3c5b3d74_d6355aee",
      "range": {
        "startLine": 300,
        "startChar": 24,
        "endLine": 300,
        "endChar": 37
      },
      "revId": "76889090d85dade0e4c486cbd4977d8275765fbe",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4"
    }
  ]
}
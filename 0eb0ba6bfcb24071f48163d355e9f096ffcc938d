{
  "comments": [
    {
      "key": {
        "uuid": "e3a4e6e1_fea8376d",
        "filename": "Makefile.am",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-02-17T19:26:15Z",
      "side": 1,
      "message": "I am worried that not everybody will want this to be enabled by default. For now, it would probably be better to hide this behind a configure parameter.",
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "dc38803c_45c714cb",
        "filename": "Makefile.am",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-02-18T08:14:55Z",
      "side": 1,
      "message": "Done. something like this? Also see configure.ac",
      "parentUuid": "e3a4e6e1_fea8376d",
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "65afa950_0a880653",
        "filename": "Makefile.am",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1000002
      },
      "writtenOn": "2021-02-18T19:28:36Z",
      "side": 1,
      "message": "\u003e I am worried that not everybody will want this to be enabled by default. For now, it would probably be better to hide this behind a configure parameter.\n\nIf it is IBM and other YAML using machines you are worried about ...FWIW I\u0027ve got no issue with this being enabled by default now or later (in fact that probably makes the most sense?), as long there is a corresponding change to the in-tree layers that opt out where it would cause problems.  Is the hard part knowing which layers those are?  Maybe its anything with a yaml file in the ipmi tree?\n\nAnyway...just thinking about the future - no action required based on my comment.",
      "parentUuid": "dc38803c_45c714cb",
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6664b38e_77fc91a9",
        "filename": "Makefile.am",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-02-21T08:52:24Z",
      "side": 1,
      "message": "sounds good. thanks for the feedback. I have left it to be enabled by default for now.\n\nI am not sure where enabling this will cause any issue, but it\u0027s still good to try to see what issue this can cause in the future.",
      "parentUuid": "65afa950_0a880653",
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "6a5ce73b_2871156d",
        "filename": "Makefile.am",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1000153
      },
      "writtenOn": "2021-02-21T20:17:44Z",
      "side": 1,
      "message": "\u003e sounds good. thanks for the feedback. I have left it to be enabled by default for now.\n\u003e \n\u003e I am not sure where enabling this will cause any issue, but it\u0027s still good to try to see what issue this can cause in the future.\n\nNot all platforms today support the dynamic way of building the SDR, so we don\u0027t want to break them by forcing these new commands on everything, only those that can work with it.\n\nBasically you would walk through the meta layers, and look for all platforms that have a phosphor-hwmon config file, and disable this option in a packageconfig.  I can walk you through it in more detail if you need.\n\nAs a note, It\u0027s on my list to go write a converter to try to convert the phosphor-hwmon files to EM configs automatically so we wont see any breakages with those platforms, but that\u0027s a ways off.\n\n\nWith all of the above said, up to Vernon if he doesn\u0027t want this enabled by default.  I think it\u0027s a good idea in the long run for this to be the default, but whether or not we do it in this patchset Â¯\\_(ãƒ„)_/Â¯\n\nYou\u0027ll for sure need a feature for it, something similar to line 177.",
      "parentUuid": "6664b38e_77fc91a9",
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "2bb9f928_1299edbe",
        "filename": "Makefile.am",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-02-22T07:20:10Z",
      "side": 1,
      "message": "sounds good. thanks. I have the FEATURE in the latest patch. Please take a look. It should be right. I have left the default to true in https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/40201/14/configure.ac#269",
      "parentUuid": "6a5ce73b_2871156d",
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "955939b2_c710a7a4",
        "filename": "Makefile.am",
        "patchSetId": 9
      },
      "lineNbr": 167,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-03-01T07:39:34Z",
      "side": 1,
      "message": "I just realized that I missed some part of the message.\n\nFor the packageconfig issue, I am actually not exactly sure why that is needed. Do we just want to prevent it from building the library in the first place? Could you point me to an example for that?\n\nI was under the impression that we can just not include the new library in `HOSTIPMI_PROVIDER_LIBRARY` like https://github.com/openbmc/openbmc/blob/master/meta-phosphor/recipes-phosphor/ipmi/phosphor-ipmi-host_git.bb#L86. Then this will not break anything?",
      "parentUuid": "2bb9f928_1299edbe",
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "75844223_e6365ae9",
        "filename": "dbus-sdr/sensorcommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 216,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-02-17T19:26:15Z",
      "side": 1,
      "message": "I know this was just a copy from the Intel code, but not all the code there was perfect either. ðŸ˜Š\n\nIf you replace all the \"boost::asio::yield_context yield\" parameters with an \"ipmi::Context::ptr ctx\", then you don\u0027t need to call getSdBus() because the bus is already there (ctx-\u003ebus)",
      "range": {
        "startLine": 216,
        "startChar": 25,
        "endLine": 216,
        "endChar": 57
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "f58a51bc_1c6a21e5",
        "filename": "dbus-sdr/sensorcommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 216,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-02-18T08:14:55Z",
      "side": 1,
      "message": "Done. thanks.\n\nI had to update the data type that is used in the code to use \n```\n#include \u003cipmid/types.hpp\u003e\n```\n\ninstead of the custom one in `dbus-sdr/types.hpp`. Had to add \n```\nusing Association \u003d std::tuple\u003cstd::string, std::string, std::string\u003e;\n\nusing Value \u003d\n    std::variant\u003cbool, uint8_t, int16_t, uint16_t, int32_t, uint32_t, int64_t,\n                 uint64_t, double, std::string, std::vector\u003cAssociation\u003e\u003e;\n```\n\nto make it work.",
      "parentUuid": "75844223_e6365ae9",
      "range": {
        "startLine": 216,
        "startChar": 25,
        "endLine": 216,
        "endChar": 57
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "72a4255c_4864d278",
        "filename": "dbus-sdr/sensorcommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 242,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-02-17T19:26:15Z",
      "side": 1,
      "message": "this can use the yielding variant of the utils.cpp getManagedObjects()",
      "range": {
        "startLine": 240,
        "startChar": 11,
        "endLine": 242,
        "endChar": 71
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "60687571_4bdba4e9",
        "filename": "dbus-sdr/sensorcommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 242,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-02-18T08:14:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "72a4255c_4864d278",
      "range": {
        "startLine": 240,
        "startChar": 11,
        "endLine": 242,
        "endChar": 71
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "fd20ab52_0e61ef4e",
        "filename": "dbus-sdr/sensorcommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 304,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-02-17T19:26:15Z",
      "side": 1,
      "message": "just pass ctx to simplify things",
      "range": {
        "startLine": 304,
        "startChar": 25,
        "endLine": 304,
        "endChar": 32
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "aa67219d_aa79ec85",
        "filename": "dbus-sdr/sensorcommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 304,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-02-18T08:14:55Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "fd20ab52_0e61ef4e",
      "range": {
        "startLine": 304,
        "startChar": 25,
        "endLine": 304,
        "endChar": 32
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "1b1e7af9_adb8b1cf",
        "filename": "dbus-sdr/sensorcommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1529,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-02-17T19:26:15Z",
      "side": 1,
      "message": "this should be ipmi::prioOpenBmcBase for all of these commands.\n\nWhen it was in the intel-ipmi-oem repo, prioOemBase was appropriate, but now that it is in the phosphor-host-ipmid repo, it should use a lower priority so it can be easily overridden by oems.",
      "range": {
        "startLine": 1529,
        "startChar": 32,
        "endLine": 1529,
        "endChar": 43
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "62fbf3cb_4de1b929",
        "filename": "dbus-sdr/sensorcommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 1529,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-02-18T08:14:55Z",
      "side": 1,
      "message": "Done. I have replaced all of the prioOemBase to the lowest priority of prioOpenBmcBase.",
      "parentUuid": "1b1e7af9_adb8b1cf",
      "range": {
        "startLine": 1529,
        "startChar": 32,
        "endLine": 1529,
        "endChar": 43
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "190cef59_b2c37b42",
        "filename": "dbus-sdr/storagecommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 232,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-02-17T19:26:15Z",
      "side": 1,
      "message": "util yielding version of getManangedObjects()",
      "range": {
        "startLine": 232,
        "startChar": 11,
        "endLine": 232,
        "endChar": 52
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "89d74f01_07b9862c",
        "filename": "dbus-sdr/storagecommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 232,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-02-18T08:14:55Z",
      "side": 1,
      "message": "there is no `ipmi::Context::ptr ctx` available in this function. This is called within startMatch() which also does not have access to ctx. Is there a function to get ipmi::Context::ptr ctx?",
      "parentUuid": "190cef59_b2c37b42",
      "range": {
        "startLine": 232,
        "startChar": 11,
        "endLine": 232,
        "endChar": 52
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "5621058a_41347c56",
        "filename": "dbus-sdr/storagecommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 232,
      "author": {
        "id": 1000163
      },
      "writtenOn": "2021-02-18T20:36:51Z",
      "side": 1,
      "message": "Nope, you are right; while this is running as a coroutine, it is called from spawn below, which is where it gets its yield_context, and not from an ipmi call.",
      "parentUuid": "89d74f01_07b9862c",
      "range": {
        "startLine": 232,
        "startChar": 11,
        "endLine": 232,
        "endChar": 52
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    },
    {
      "key": {
        "uuid": "56117281_11dea328",
        "filename": "dbus-sdr/storagecommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 232,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-02-21T08:52:24Z",
      "side": 1,
      "message": "There is another yield_method_call() in https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/40201/9/dbus-sdr/storagecommands.cpp#607\n\nHowever, changing that will require change the data structure used to follow ipmid/types.hpp instead of the ones defined in here. I tried it and it messed up https://gerrit.openbmc-project.xyz/c/openbmc/phosphor-host-ipmid/+/40201/9/dbus-sdr/storagecommands.cpp#622. There was some convention error.\n\nShould we just leave it as it is? or try to use `ipmid/types.hpp` as much as possible.",
      "parentUuid": "5621058a_41347c56",
      "range": {
        "startLine": 232,
        "startChar": 11,
        "endLine": 232,
        "endChar": 52
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": true
    },
    {
      "key": {
        "uuid": "e0f31b0f_9eaebd7a",
        "filename": "dbus-sdr/storagecommands.cpp",
        "patchSetId": 9
      },
      "lineNbr": 232,
      "author": {
        "id": 1000885
      },
      "writtenOn": "2021-03-01T07:39:34Z",
      "side": 1,
      "message": "Ack",
      "parentUuid": "56117281_11dea328",
      "range": {
        "startLine": 232,
        "startChar": 11,
        "endLine": 232,
        "endChar": 52
      },
      "revId": "0eb0ba6bfcb24071f48163d355e9f096ffcc938d",
      "serverId": "adbd0a64-1f21-4d83-b585-671fe73cb6e4",
      "unresolved": false
    }
  ]
}